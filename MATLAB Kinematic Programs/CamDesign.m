function CamDesign(Action,Argument2)% This integrated cam design includes four ypes of follower% case 1: translating flat-faced follower% case 2: oscillating flat-faced follower% case 3: roller follower% case 4: oscillating cylindrical-faced follower% There is switch-cases statement in the part of retrieving parameter values and handles from  % the userdata of the figure and the axis. % There is switch-cases statement in the case 'Draw Axes' to calculate the data for draw graphs  % of the design window. In four cases, individual code are executed for different type of followers.% Variables for calculation %   rb=base circle radius%   tmin=length of follower face below centerline of stem%   tmax=lenght of follower face above centerline of stem%   xc=x coordinate of cam point%   yc=y coordinate of cam point%   rise = maximum follower displacement%   direction = direction of cam rotation [CW(-), CCW(+)]%   ainc = cam rotation angle increment (deg)%   Graphics Variables%   h1=handle on the first axes in the window (cam animation)%   h2=handle on the second axes in the window (displacement diagram)%   h3=handle on the fourth axes in the window (pressure angle)%   Displ=line representing the follower displacement%   dbead=bead which follows the displacement throughout the animation%   stem=line for follower stem%   face=line for follower face%   cam=line for cam%   baset=line for top of slider guide%   baseb=line for bottom of slider guide%   pin=line for the cam axis%   bush=line representing the cam bushing%   xmin, xmax= x limits for the axes%   ymin, ymax= y limits for the axes% program global g_AnaResglobal Data%g_AnaRes = zeros(36,3);if nargin == 0 && isempty(findobj('Tag','cam_dsgn'))	Action = 'initialize';elseif nargin == 0 && ~isempty(findobj('Tag','cam_dsgn'))    Action = 'None';endif ~strcmp(Action,'initialize') && ~strcmp(Action,'Help')% To retrieve handles for uicontrols       a = findobj('Tag','cam_dsgn');    handles = get(a,'UserData');    h_popupmenu = handles(1);	h_length = handles(2:10);	h_inc = handles(11);    h_Dradio = handles(12:13);    h_status = handles(14);    %Input the linkage variables    choice = get(h_popupmenu,'value');    for i = 1:9      length(i) = get(h_length(i),'userdata');    end	rb = length(1);    rise = length(2);    rised = length(3);    judge = get(h_Dradio(1),'value');    if judge == 1		direction = '+';	else            direction = '-';    end	ainc = get(h_inc,'userdata');    if ~strcmp(Action,'Change Cam Style')	   % To retrieve graphics handles         b = findobj('Tag','cam_axes');         handles =get(b,'UserData');            % there are 9 editable boxes for user input, type-dependent variables are assign values      % in different cases      switch choice      case 1         cam = handles(1);         stem = handles(2);         face = handles(3);         baset = handles(4);         baseb = handles(5);         bush = handles(6);         pin = handles(7);               case 2         cam = handles(1);         stem = handles(2);         bush1 = handles(3);         pin1 = handles(4);         bush2 = handles(5);         pin2 = handles(6);      case 3         cam = handles(1);         stem = handles(2);         roller = handles(3);         baset = handles(4);         baseb = handles(5);         bush = handles(6);         pin = handles(7);      case 4         cam = handles(1);         roller = handles(2);         stem = handles(3);         bush1 = handles(4);         pin1 = handles(5);         bush2 = handles(6);         pin2 = handles(7);         end   endendswitch Actioncase 'None'     findobj('Tag','cam_dsgn');case 'initialize' 	% For importing cam profile data from the CamProfileDesign window, the following marked line   % should be executed here.	% Data = CamProfileDesign;   if nargin >= 2 || ~isempty(findobj('tag','menu_page'))       LocalOpenFig;       CamDesign('Change Cam Style');         CamDesign('Draw Axes');   else       show_me_logo('initialize','CamDesign');   end   case 'Draw Axes'    fact=pi/180;   dtheta=ainc;%   dtheta=1;   sign=1;   if direction=='+'        dtheta=-ainc;        sign=-1;   end   temp=-dtheta;   n=abs(360/dtheta);      % The following marked code is to read in the size of the data depending on the specification   % from the users.	%	nSize=size(Data);	%	n = nSize(2);	%	f = Data(1,:);	%	fp = Data(2,:);	%	fpp = Data(3,:);	% The calculation for drawing the mechanism is executed in four casesswitch choice   case 1      tmax = length(4);      tmin = length(5);      % Compute the displacement of the flat-faced follower.  The variable      % dtheta will change the resolution of the cam.  Make it smaller for      % accurate results.      		      % Compute the follower displacement and follower center coordinates       % relative to cam.      for j=1:1:n      	temp=temp+dtheta;        theta(j)=temp;      	camangle(j)=abs(theta(j));      	[coords]=follower(camangle(j),rise);      	f(j)=coords(1);	      	fp(j)=coords(2);      	fpp(j)=coords(3);      	tt=theta(j)*fact;      	ct=cos(tt);      	st=sin(tt);      	xc(j)=(rb+f(j))*ct-sign*fp(j)*st;      	yc(j)=(rb+f(j))*st+sign*fp(j)*ct;      	rho(j)=rb+f(j)+	fpp(j);      end      thetaa = theta';      xcc = xc';      ycc = yc';      g_AnaRes = [thetaa xcc ycc];      xc(n+1)=xc(1);      yc(n+1)=yc(1);      % If rho is large, truncate it for drawing purposes      rhom=2*sqrt((max(xc))^2+(max(yc))^2);      for j=1:1:n      	rhod(j)=rho(j);      	if abs(rho(j))>rhom      		rhod(j)=rhom*rho(j)/abs(rho(j));      	end      end	      % Set up coordinates of bushings and pins.      rpivot=rb/10;      ninc=20;        npoints=ninc+1;      centerx=0;      centery=0;      coord=circle2(rpivot,centerx,centery,ninc);      % find coordinates of cam pin         for i=1:1:npoints      	xcoordcp(i)=coord(i,1);      	ycoordcp(i)=coord(i,2);      end      % Find coordinates of cam bushing      binc=ninc/2;      coord1=bushing(rpivot,centerx,centery,binc,0);      bpoints=ninc/2+16;      for i=1:1:bpoints      	xbush(i)=coord1(i,1);      	ybush(i)=coord1(i,2);      end      % Set up coordinates of follower face in position 1.      flag=1;      npointf=ninc+1;      x0=xc(1);      y0=yc(1)-tmin;      height=tmax+tmin;      length=0.1*height;      angle=0;      coord = rect(length,height,x0,y0,angle,flag);         % find coordinates of follower face      for i=1:1:5      	xcoordf(i)=coord(i,1);      	ycoordf(i)=coord(i,2);      end      % Find coordinates of follower stem      centerxf=x0+length;      centeryf=0;      xstem(1)=centerxf;      ystem(1)=centeryf+length/2;      xstem(2)=xstem(1)+2*rise;      ystem(2)=ystem(1);      xstem(4)=centerxf;      ystem(4)=centeryf-length/2;      xstem(3)=xstem(2);      ystem(3)=ystem(4);      % set up coordinates of top sliderline.		      l=rise;      ndash=8;      xe = xstem(1)+rise;      ye = ystem(1)+0.3*(ystem(1)-ystem(3));      flag=-1;      coordf1=frameline(l,xe,ye,ndash,0,flag);					      npoints1=3*ndash;      for i=1:1:npoints1      	xsl1(i)=coordf1(i,1);      	ysl1(i)=coordf1(i,2);      end      % set up coordinates of bottom sliderline.	   	ye = ystem(3)-0.3*(ystem(1)-ystem(3));   	flag=1;   	coordf2=frameline(l,xe,ye,ndash,0,flag);					   	for i=1:1:npoints1   		xsl2(i)=coordf2(i,1);   	  	ysl2(i)=coordf2(i,2);   	end    % Set up the axes for first drawing.   	width=0.95;    height=0.95;   	cx=[ xsl1, xsl2, xstem, xcoordf, xbush, xcoordcp,xc,xcoordf];   	cy=[ ysl1, ysl2, ystem, ycoordf, ybush, ycoordcp,yc,ycoordf];       xmina=min(cx);   	xmaxa=max(cx);   	ymina=min(cy);   	if ymina>-.5; ymina=-0.5; end   	ymaxa=max(cy);   	rangex=xmaxa-xmina;   	rangey=ymaxa-ymina;   	xmin=xmina-0.2*rangex;   	xmax=xmaxa+0.2*rangex;   	ymin=ymina-0.2*rangey;   	ymax=ymaxa+0.2*rangey;   	values=axisadjust(xmin, xmax, ymin, ymax, width, height);   	xmin=values(1);   	xmax=values(2);   	ymin=values(3);   	ymax=values(4);   	axis([xmin xmax ymin ymax]);      % draw the pin and bushing.   	set(pin,'xdata', xcoordcp, 'ydata',ycoordcp);   	set(bush,'xdata', xbush,'ydata', ybush);      % Draw the top and bottom frame lines   	set (baset,'xdata', xsl1, 'ydata',ysl1)   	set (baseb,'xdata', xsl2, 'ydata',ysl2)      % Draw the cam.   	set (cam,'xdata', xc, 'ydata', yc);      % Draw follower roller.   	set (face, 'xdata', xcoordf, 'ydata',ycoordf);      % Draw follower stem   	set (stem, 'xdata', xstem, 'ydata',ystem);      %flush the draw buffer      refresh;      case 2      r1 = length(6);      r3 = length(8);      d = length(9);      rise=length(3)*fact;      ae=r1/(1+d/rb);      be=sqrt(ae^2-rb^2);      phi0=atan2(rb, be);      % Compute the follower displacement and follower center coordinates       % relative to cam.      for j=1:1:n      	temp=temp+dtheta;         theta(j)=temp;      	camangle(j)=abs(theta(j));      	[coords]=follower(camangle(j),rise);      	f(j)=coords(1);      	fd(j)=f(j)/fact;      	tt=theta(j)*fact;      	if tt<0; tt=tt+2*pi; end      	mu=3*pi/2+tt-f(j)-phi0;      	beta(j)=tt-f(j)-phi0;      	cm=cos(mu);      	sm=sin(mu);      	ct=cos(tt);       	st=sin(tt);      	XC(j)=r1*ct;      	YC(j)=r1*st;      	XD(j)=XC(j)+d*cos(mu);      	YD(j)=YC(j)+d*sin(mu);      end      % Compute the XG.      B=[XD(1)-XD(n);YD(1)-YD(n)];      A=[-cos(beta(1)) cos(beta(n));-sin(beta(1)) sin(beta(n))];      t=A\B;      s(1)=t(1);      XG(1)=XD(1)+s(1)*cos(beta(1));      YG(1)=YD(1)+s(1)*sin(beta(1));      gamma(1)=(beta(1)+beta(n))/2+3*pi/2;      for i=2:1:n      	B=[XD(i)-XD(i-1);YD(i)-YD(i-1)];      	A=[-cos(beta(i)) cos(beta(i-1));-sin(beta(i)) sin(beta(i-1))];      	t=A\B;      	s(i)=t(1);      	XG(i)=XD(i)+s(i)*cos(beta(i));      	YG(i)=YD(i)+s(i)*sin(beta(i));      	gamma(i)=(beta(i)+beta(i-1))/2+3*pi/2;      	if gamma(i)>2*pi; gamma(i)=gamma(i)-2*pi; end      end      % Compute the XM.      B=[XG(n)-XG(1); YG(n)-YG(1)];      A=[-cos(gamma(n)) cos(gamma(1));-sin(gamma(n)) sin(gamma(1))];      t=A\B;      v(n)=t(1);      XM(n)=XG(n)+v(n)*cos(gamma(n));      YM(n)=YG(n)+v(n)*sin(gamma(n));      for i=1:1:n-1      	B=[XD(i)-XD(i+1); YD(i)-YD(i+1)];      	A=[-cos(gamma(i)) cos(gamma(i+1));-sin(gamma(i)) sin(gamma(i+1))];      	t=A\B;      	v(i)=t(1);      	XM(i)=XG(i)+v(i)*cos(gamma(i));      	YM(i)=YG(i)+v(i)*sin(gamma(i));      end      % Compute the cam coordinates.      for i=1:1:n      	B=[XM(i)-XG(i); YM(i)-YG(i)];      	kappa(i)=beta(i)+pi/2;      	A=[-cos(kappa(i)) cos(beta(i));-sin(kappa(i)) sin(beta(i))];      	t=A\B;        	z(i)=t(2);      	xc(i)=XG(i)+z(i)*cos(beta(i));      	yc(i)=YG(i)+z(i)*sin(beta(i));         rcc(i)=sqrt(xc(i)^2+yc(i)^2);      	angc(i)=atan2(yc(i), xc(i));      	if angc(i)<0; angc(i)=angc(i)+2*pi; end      end      thetaa = theta';      xcc = xc';      ycc = yc';      g_AnaRes = [thetaa xcc ycc];      xc(n+1)=xc(1);      yc(n+1)=yc(1);      % Compute the pressure angle      for i=1:1:n      	psi=atan2((yc(i)-YC(i)),(xc(i)-XC(i)))-pi/2;      	lamda=atan2((yc(i)-YM(i)),(xc(i)-XM(i)));      	pa(i)=acos((cos(psi)*cos(lamda)+sin(psi)*sin(lamda)))/fact;      end         % Compute the radius of curvature      for j=1:1:n      	jp1=j+1;      	jm1=j-1;      	if j==1   	    	a1=[xc(n), yc(n)];      		b1=[xc(n+1), yc(n+1)];      		a2=b1;      		b2=[xc(jp1), yc(jp1)];      		sign=(xc(n+1)-xc(n))*(yc(jp1)-yc(n+1))-(xc(jp1)-xc(n+1))*(yc(n+1)-yc(n));		      	end      	if j>1      		a1=[xc(jm1), yc(jm1)];      		b1=[xc(j), yc(j)];      		a2=b1;      		b2=[xc(jp1), yc(jp1)];      		sign=(xc(j)-xc(jm1))*(yc(jp1)-yc(j))-(xc(jp1)-xc(j))*(yc(j)-yc(jm1));      	end      	coords=pole(a1,a2,b1,b2);      	xcent(j)=coords(1);      	ycent(j)=coords(2);      	rho(j)=10^10;            % If flag =0, compute the true value for rho      	if coords(3)==0      		rho(j)=sqrt((xc(j)-xcent(j))^2+(yc(j)-ycent(j))^2);      	end	            % Compute the sign for rho      	if sign ~=0;      	  	sign=sign/abs(sign);      	end      	if sign==0; sign=1; end            rho(j)=rho(j)*sign;        end      % If rho is large, truncate it for drawing purposes      rhom=2*sqrt((max(xc))^2+(max(yc))^2);      for j=1:1:n      	rhod(j)=rho(j);      	if abs(rho(j))>rhom      		rhod(j)=rhom*rho(j)/abs(rho(j));      	end      end         % Set up coordinates of bushings and pins.      rpivot=rb/10;      ninc=20;        npoints=ninc+1;      centerx=0;      centery=0;      coord1=circle2(rpivot,centerx,centery,ninc);            % find coordinates of cam pin      for i=1:1:npoints      	 xcoordcp(i)=coord1(i,1);      	 ycoordcp(i)=coord1(i,2);      	 xcoordfp(i)=xcoordcp(i)+r1;         ycoordfp(i)=ycoordcp(i);               end      % Find coordinates of cam and follower bushings      binc=ninc/2;      coord2=bushing(rpivot,centerx,centery,binc,0);      bpoints=ninc/2+16;      for i=1:1:bpoints      	xbush1(i)=coord2(i,1);      	ybush1(i)=coord2(i,2);      	xbush2(i)=xbush1(i)+r1;      	ybush2(i)=ybush1(i);      end         % Find coordinates of follower stem      xstem(1)=r1;      ystem(1)=0;      xstem(2)=xstem(1)-d*cos(pi/2-phi0);      ystem(2)=ystem(1)-d*sin(pi/2-phi0);      xstem(3)=xstem(2)+r3*cos(pi-phi0);      ystem(3)=ystem(2)+r3*sin(pi-phi0);            % Set up the axes for first drawing.   	width=0.95;   	height=0.95;      cx=[ xstem,  xbush2, xc];      cy=[ ystem,  ybush2, yc];         xmina=min(cx);      xmaxa=max(cx);      ymina=min(cy);      ymaxa=max(cy);      rangex=xmaxa-xmina;      rangey=ymaxa-ymina;      xmin=xmina-0.05*rangex;      xmax=xmaxa+0.05*rangex;      ymin=ymina-0.05*rangey;      ymax=ymaxa+0.05*rangey;      values=axisadjust(xmin, xmax, ymin, ymax, width, height);   	xmin=values(1);   	xmax=values(2);   	ymin=values(3);   	ymax=values(4);   	axis([xmin xmax ymin ymax]);      % draw the pin and bushing.      set(pin1,'xdata', xcoordcp, 'ydata',ycoordcp);      set(bush1,'xdata', xbush1,'ydata', ybush1);      set(pin2,'xdata', xcoordfp, 'ydata',ycoordfp);      set(bush2,'xdata', xbush2,'ydata', ybush2);         % Draw the cam.      set (cam,'xdata', xc, 'ydata', yc);      % Draw follower stem        set (stem, 'xdata', xstem, 'ydata',ystem);      %flush the draw buffer        refresh;                  case 3      r0 = length(7);      d = length(9);      % Compute the follower displacement and follower center coordinates       % relative to cam.   	for j=1:1:n   		temp=temp+dtheta;   		theta(j)=temp;   		camangle(j)=abs(theta(j));   		[coords]=follower(camangle(j),rise);   		f(j)=coords(1);   		tt=theta(j)*fact;   		if tt<0; tt=tt+2*pi; end   		ct=cos(tt);   		st=sin(tt);   		xf(j)=(rb+r0+f(j))*ct-d*st;   		yf(j)=(rb+r0+f(j))*st+d*ct;	   	end      % Reorder the prime points in the order of increasing angle      % if cam rotation direction is CCW (+).	  if direction =='+'   		for i=2:1:n   			j=n-i+2;   			rfollower=sqrt(xf(j)^2+yf(j)^2);   			angfoll=atan2(yf(j), xf(j));   			xftmp(i)=rfollower*cos(angfoll);   			yftmp(i)=rfollower*sin(angfoll);   		end   		for i=2:1:n   			xf(i)=xftmp(i);   			yf(i)=yftmp(i);   		end	   	end	      % Compute the chord angle   	for j=1:1:n-1   		sigma(j)=atan2((yf(j+1)-yf(j)), (xf(j+1)-xf(j)));   		if sigma(j) < 0   			sigma(j)=sigma(j)+2*pi;   		end   	end	      sigma(n)=atan2((yf(1)-yf(n)), (xf(1)-xf(n)));   	if sigma(n) < 0   		sigma(n)=sigma(n)+2*pi;   	end         % Compute the average tangent angle and cam coordinates   	gamma(1)=atan2(sin(sigma(1)+pi/2)+sin(sigma(n)+pi/2),...   	              cos(sigma(1)+pi/2)+cos(sigma(n)+pi/2));   	tt=theta(1)*fact;   	pa(1)=(acos(cos(tt)*cos(gamma(1)-pi)+sin(tt)*sin(gamma(1)-pi)))/fact;   	xc(1)=xf(1)+r0*cos(gamma(1));   	yc(1)=yf(1)+r0*sin(gamma(1));      	for j=2:1:n   		gamma(j)=atan2(sin(sigma(j)+pi/2)+sin(sigma(j-1)+pi/2),...                  cos(sigma(j)+pi/2)+cos(sigma(j-1)+pi/2));   		tt=theta(j)*fact;   		xc(j)=xf(j)+r0*cos(gamma(j));   		yc(j)=yf(j)+r0*sin(gamma(j));   	end   	thetaa = theta';      xcc = xc';      ycc = yc';      g_AnaRes = [thetaa xcc ycc];            xc(n+1)=xf(1)+r0*cos(gamma(1));   	yc(n+1)=yf(1)+r0*sin(gamma(1));         % Compute the pressure angle       	for j=2:1:n   		k=n-j+2;   		if direction =='-'   			k=j;   		end   		tt=camangle(k)*fact;   		pa(j)=(acos(cos(tt)*cos(gamma(k)-pi)+sin(tt)*sin(gamma(k)-pi)))/fact;   	end	      % Compute the radius of curvature   	for j=1:1:n   		jp1=j+1;   		jm1=j-1;   		if j==1   			a1=[xc(n), yc(n)];   			b1=[xc(n+1), yc(n+1)];   			a2=b1;   			b2=[xc(jp1), yc(jp1)];   			sign=(xc(n+1)-xc(n))*(yc(jp1)-yc(n+1))-(xc(jp1)-xc(n+1))*(yc(n+1)-yc(n));		   		end   		if j>1   			a1=[xc(jm1), yc(jm1)];   			b1=[xc(j), yc(j)];   			a2=b1;   			b2=[xc(jp1), yc(jp1)];   			sign=(xc(j)-xc(jm1))*(yc(jp1)-yc(j))-(xc(jp1)-xc(j))*(yc(j)-yc(jm1));   		end	     	coords=pole(a1,a2,b1,b2);   		xcent(j)=coords(1);   		ycent(j)=coords(2);   		rho(j)=10^10;      % If flag =0, compute the true value for rho   		if coords(3)==0   			rho(j)=sqrt((xc(j)-xcent(j))^2+(yc(j)-ycent(j))^2);   		end	         % Compute the sign for rho   		if sign ~=0;   			sign=sign/abs(sign);   		end   		if sign==0; sign=1; end   		rho(j)=rho(j)*sign;   	end      % If rho is large, truncate it for drawing purposes   	rhom=2*sqrt((max(xc))^2+(max(yc))^2);   	for j=1:1:n   		rhod(j)=rho(j);   		if abs(rho(j))>rhom   			rhod(j)=rhom*rho(j)/abs(rho(j));   		end   	end	      % Set up coordinates of bushings and pins.   	rpivot=rb/10;   	ninc=20;     	npoints=ninc+1;   	centerx=0;   	centery=0;   	coord=circle2(rpivot,centerx,centery,ninc);      % find coordinates of cam pin   	for i=1:1:npoints   		xcoordcp(i)=coord(i,1);   		ycoordcp(i)=coord(i,2);   	end      % Find coordinates of cam bushing   	binc=ninc/2;   	coord1=bushing(rpivot,centerx,centery,binc,0);   	bpoints=ninc/2+16;   	for i=1:1:bpoints   		xbush(i)=coord1(i,1);   		ybush(i)=coord1(i,2);   	end      % Set up coordinates of follower circle in position 1.   	nincf=20;     	npointf=ninc+1;   	centerxf=xf(1);   	centeryf=yf(1);   	coord=circle2(r0,centerxf,centeryf,nincf);	      % find coordinates of follower circle   	for i=1:1:npointf   		xcoordf(i)=coord(i,1);   		ycoordf(i)=coord(i,2);   	end      % Find coordinates of follower stem   	centerxf=xf(1);   	centeryf=yf(1);   	stemangle=pi/8;   	xstem(1)=centerxf+r0*cos(stemangle);   	ystem(1)=centeryf+r0*sin(stemangle);   	xstem(2)=xstem(1)+2*rise;   	ystem(2)=ystem(1);   	xstem(4)=centerxf+r0*cos(stemangle);   	ystem(4)=centeryf-r0*sin(stemangle);   	xstem(3)=xstem(2);   	ystem(3)=ystem(4);      % set up coordinates of top sliderline.   	l=rise;   	ndash=8;   	xe = xstem(1)+rise;   	ye = ystem(1)+0.3*(ystem(1)-ystem(3));   	flag=-1;   	coordf1=frameline(l,xe,ye,ndash,0,flag);					   	npoints1=3*ndash;   	for i=1:1:npoints1   		xsl1(i)=coordf1(i,1);   		ysl1(i)=coordf1(i,2);   	end	      % set up coordinates of bottom sliderline.   	ye = ystem(3)-0.3*(ystem(1)-ystem(3));   	flag=1;   	coordf2=frameline(l,xe,ye,ndash,0,flag);					   	for i=1:1:npoints1   		xsl2(i)=coordf2(i,1);   		ysl2(i)=coordf2(i,2);   	end   	width=0.80;   	height=0.80;   	cx=[ xsl1, xsl2, xstem, xcoordf, xbush, xcoordcp,xc];   	cy=[ ysl1, ysl2, ystem, ycoordf, ybush, ycoordcp,yc];	   	xmina=min(cx);   	xmaxa=max(cx);   	ymina=min(cy);   	if ymina>-.5; ymina=-0.5; end   	ymaxa=max(cy);   	rangex=xmaxa-xmina;   	rangey=ymaxa-ymina;   	xmin=xmina-0.1*rangex;   	xmax=xmaxa+0.1*rangex;   	ymin=ymina-0.1*rangey;   	ymax=ymaxa+0.1*rangey;   	values=axisadjust(xmin, xmax, ymin, ymax, width, height);   	xmin=values(1);   	xmax=values(2);   	ymin=values(3);   	ymax=values(4);   	axis([xmin xmax ymin ymax]);		      % draw the pin and bushing.   	set(pin,'xdata', xcoordcp, 'ydata',ycoordcp);   	set(bush,'xdata', xbush,'ydata', ybush);      % Draw the top and bottom frame lines   	set (baset,'xdata', xsl1, 'ydata',ysl1)   	set (baseb,'xdata', xsl2, 'ydata',ysl2)         % Draw the cam.   	set (cam,'xdata', xc, 'ydata', yc);      % Draw follower roller.   	set (roller, 'xdata', xcoordf, 'ydata',ycoordf);      % Draw follower stem   	set (stem, 'xdata', xstem, 'ydata',ystem);      %flush the draw buffer   	refresh;          case 4         r1 = length(6);      r0 = length(7);      r3 = length(8);      rise = length(3)*fact;      % Compute phi0.   	phi0=acos((r1^2+r3^2-(rb+r0)^2)/(2*r1*r3));      % Compute the follower displacement and follower center coordinates       % relative to cam.      for j=1:1:n   		temp=temp+dtheta;   		theta(j)=temp;   		camangle(j)=abs(theta(j));   		[coords]=follower(camangle(j),rise);   		f(j)=coords(1);   		fd(j)=f(j)/fact;   		tt=theta(j)*fact;   		if tt<0; tt=tt+2*pi; end   		mu=pi+tt-f(j)-phi0;   		psi(j)=mu-pi/2;   		cm=cos(mu);   		sm=sin(mu);   		ct=cos(tt);   		st=sin(tt);   		xf(j)=r1*ct+r3*cm;   		yf(j)=r1*st+r3*sm;      end         % Reorder the prime points in the order of increasing angle      % if cam rotation direction is CCW (+).   	if direction =='+'   		for i=2:1:n   			j=n-i+2;   			rfollower=sqrt(xf(j)^2+yf(j)^2);   			angfoll=atan2(yf(j), xf(j));   			xftmp(i)=rfollower*cos(angfoll);   			yftmp(i)=rfollower*sin(angfoll);   		end   		for i=2:1:n   			xf(i)=xftmp(i);   			yf(i)=yftmp(i);   		end	   	end      % Compute the chord angle   	for j=1:1:n-1   		sigma(j)=atan2((yf(j+1)-yf(j)), (xf(j+1)-xf(j)));   		if sigma(j) < 0   			sigma(j)=sigma(j)+2*pi;   		end   	end   	sigma(n)=atan2((yf(1)-yf(n)), (xf(1)-xf(n)));   	if sigma(n) < 0   		sigma(n)=sigma(n)+2*pi;     	end      % Compute the average tangent angle and cam coordinates   	gamma(1)=atan2(sin(sigma(1)+pi/2)+sin(sigma(n)+pi/2),...               cos(sigma(1)+pi/2)+cos(sigma(n)+pi/2));   	xc(1)=xf(1)+r0*cos(gamma(1));   	yc(1)=yf(1)+r0*sin(gamma(1));         for j=2:1:n   		gamma(j)=atan2(sin(sigma(j)+pi/2)+sin(sigma(j-1)+pi/2),...               cos(sigma(j)+pi/2)+cos(sigma(j-1)+pi/2));   		xc(j)=xf(j)+r0*cos(gamma(j));   		yc(j)=yf(j)+r0*sin(gamma(j));   	end      thetaa = theta';      xcc = xc';      ycc = yc';      g_AnaRes = [thetaa xcc ycc];   	xc(n+1)=xf(1)+r0*cos(gamma(1));   	yc(n+1)=yf(1)+r0*sin(gamma(1));      % Compute the pressure angle   	lamda=atan2((yf(1)-yc(1)),(xf(1)-xc(1)));   	pa(1)=acos((cos(psi(1))*cos(lamda)+sin(psi(1))*sin(lamda)))/fact;   	for i=2:1:n   		j=n-i+2;   		if direction =='-'   			j=i;   		end   		lamda=atan2((yf(i)-yc(i)),(xf(i)-xc(i)));   		pa(j)=acos((cos(psi(j))*cos(lamda)+sin(psi(j))*sin(lamda)))/fact;   	end      % Compute the radius of curvature   	for j=1:1:n   		jp1=j+1;   		jm1=j-1;   		if j==1   			a1=[xc(n), yc(n)];   			b1=[xc(n+1), yc(n+1)];   			a2=b1;   			b2=[xc(jp1), yc(jp1)];   			sign=(xc(n+1)-xc(n))*(yc(jp1)-yc(n+1))-(xc(jp1)-xc(n+1))*(yc(n+1)-yc(n));		   		end   		if j>1   			a1=[xc(jm1), yc(jm1)];   			b1=[xc(j), yc(j)];   			a2=b1;   			b2=[xc(jp1), yc(jp1)];   			sign=(xc(j)-xc(jm1))*(yc(jp1)-yc(j))-(xc(jp1)-xc(j))*(yc(j)-yc(jm1));   	  	end   		coords=pole(a1,a2,b1,b2);   		xcent(j)=coords(1);   		ycent(j)=coords(2);   		rho(j)=10^10;         % If flag =0, compute the true value for rho   		if coords(3)==0   			rho(j)=sqrt((xc(j)-xcent(j))^2+(yc(j)-ycent(j))^2);   		end	      % Compute the sign for rho   		if sign ~=0;   			sign=sign/abs(sign);   		end   	  	if sign==0; sign=1; end   		rho(j)=rho(j)*sign;   	end         % If rho is large, truncate it for drawing purposes   	rhom=2*sqrt((max(xc))^2+(max(yc))^2);   	for j=1:1:n   		rhod(j)=rho(j);   		if abs(rho(j))>rhom   			rhod(j)=rhom*rho(j)/abs(rho(j));   		end   	end      % Set up coordinates of bushings and pins.   	rpivot=rb/10;   	ninc=20;     	npoints=ninc+1;   	centerx=0;   	centery=0;   	coord1=circle2(rpivot,centerx,centery,ninc);      % find coordinates of cam pin   	for i=1:1:npoints   		xcoordcp(i)=coord1(i,1);   		ycoordcp(i)=coord1(i,2);   		xcoordfp(i)=xcoordcp(i)+r1;   		ycoordfp(i)=ycoordcp(i);	   	end      % Find coordinates of cam bushing   	binc=ninc/2;   	coord2=bushing(rpivot,centerx,centery,binc,0);   	bpoints=ninc/2+16;   	for i=1:1:bpoints	    	xbush1(i)=coord2(i,1);   		ybush1(i)=coord2(i,2);   		xbush2(i)=xbush1(i)+r1;   		ybush2(i)=ybush1(i);   	end      % Set up coordinates of follower circle in position 1.   	nincf=20;     	npointf=ninc+1;   	centerxf=r1+r3*cos(pi-phi0-f(1));   	centeryf=r3*sin(pi-phi0-f(1));   	coord=circle2(r0,centerxf,centeryf,nincf);      % find coordinates of follower circle   	for i=1:1:npointf   		xcoordf(i)=coord(i,1);   		ycoordf(i)=coord(i,2);   	end      % Find coordinates of follower stem   	xstem(1)=r1;   	ystem(1)=0;   	xstem(2)=centerxf;   	ystem(2)=centeryf;	      % Set up the axes for first drawing.   	width=0.95;   	height=0.95;   	cx=[ xstem, xcoordf, xbush2, xc];   	cy=[ ystem, ycoordf, ybush2, yc];      	xmi=min(cx);   	xma=max(cx);   	ymi=min(cy);   	yma=max(cy);   	dxm=abs(xma-xmi);   	dym=abs(yma-ymi);   	xmina=xmi-0.1*dxm;   	xmaxa=xma+0.1*dxm;   	ymina=ymi-0.1*dym;   	ymaxa=yma+0.1*dym;   	rangex=xmaxa-xmina;   	rangey=ymaxa-ymina;   	xmin=xmina-0.05*rangex;   	xmax=xmaxa+0.05*rangex;   	ymin=ymina-0.05*rangey;   	ymax=ymaxa+0.05*rangey;   	values=axisadjust(xmin, xmax, ymin, ymax, width, height);      xmin=values(1);   	xmax=values(2);   	ymin=values(3);   	ymax=values(4);   	axis([xmin xmax ymin ymax]);      % draw the pin and bushing.      set(pin1,'xdata', xcoordcp, 'ydata',ycoordcp);      set(bush1,'xdata', xbush1,'ydata', ybush1);      set(pin2,'xdata', xcoordfp, 'ydata',ycoordfp);      set(bush2,'xdata', xbush2,'ydata', ybush2);      % Draw the cam.   	set (cam,'xdata', xc, 'ydata', yc);      % Draw follower roller.   	set (roller, 'xdata', xcoordf, 'ydata',ycoordf);      % Draw follower stem   	set (stem, 'xdata', xstem, 'ydata',ystem);      %flush the draw buffer   	refresh;          endcase 'Change Length'   n = Argument2;   newval=get(h_length(n),'string');   oldval = get(h_length(n),'userdata');	val=check_val(oldval,newval);	set(h_length(n),'UserData',val,'string',num2str(val));	CamDesign('Draw Axes');         %case 'Change Rise'%	newval=get(h_length(2),'string');%	rise=check_val(rise,newval);%	set(h_length(2),'UserData',rise,'string',num2str(rise));%   CamDesign('Draw Axes');%   if ~isempty(findobj('Tag','FF Cam Profile Window'))%      a = findobj('Tag','FF Cam Profile Window');%      close(a);%      CamDesign('Profile');%   end   case 'Change Cam Style'   case1 = [3.2  2   0  2.6 1.6  0   0   0   0 ];   case2 = [ 2   0  15   0   0   6   0   9  0.5];   case3 = [ 2   2   0   0   0   0  0.5  0   1 ];   case4 = [ 2   0  30   0   0   6   1   5.2 30];   direction = '+';   ainc = 5;   nStyle = get(h_popupmenu,'value');   DeleteCamPlot;   if (nStyle == 1) % ff_cam      set(h_length(2),'Enable','on','String',num2str(case1(2)),'Userdata',case1(2));      set(h_length(3),'Enable','off');      for n = 4:5         set(h_length(n),'Enable','on','String',num2str(case1(n)),'Userdata',case1(n));      end      for n = 6:9         set(h_length(n),'Enable','off');      end      CreateCamPlot1;   elseif (nStyle == 2) % off_cam      set(h_length(2),'Enable','off');      set(h_length(3),'Enable','on','String',num2str(case2(3)),'Userdata',case2(3));      for n = 4:5         set(h_length(n),'Enable','off');      end      set(h_length(6),'Enable','on','String',num2str(case2(6)),'Userdata',case2(6));      set(h_length(7),'Enable','off');      for n = 8:9         set(h_length(n),'Enable','on','String',num2str(case2(n)),'Userdata',case2(n));      end      CreateCamPlot2;   elseif (nStyle == 3) % rf_cam      set(h_length(2),'Enable','on','String',num2str(case3(2)),'Userdata',case3(2));      for n = 3:6         set(h_length(n),'Enable','off');      end      set(h_length(7),'Enable','on','String',num2str(case3(7)),'Userdata',case3(7));      set(h_length(8),'Enable','off');      set(h_length(9),'Enable','on','String',num2str(case3(9)),'Userdata',case3(9));      CreateCamPlot3;   else %(nStyle == 4) orf_cam         set(h_length(2),'Enable','off');         set(h_length(3),'Enable','on','String',num2str(case4(3)),'Userdata',case4(3));      for n = 4:5         set(h_length(n),'Enable','off');      end      for n = 6:8         set(h_length(n),'Enable','on','String',num2str(case4(n)),'Userdata',case4(n));      end      set(h_length(9),'Enable','off');      CreateCamPlot4;   end	CamDesign('Draw Axes');         case 'Change Increment'	newval=get(h_inc,'string');	ainc=check_val(ainc,newval);	set(h_inc,'UserData',ainc,'string',num2str(ainc));	CamDesign('Draw Axes');         case 'Dradio'   num_buttons = 2;   n = Argument2;   set(h_Dradio(n),'value',1);   set(h_Dradio([1:(n-1), (n+1):num_buttons]),'value',0);	CamDesign('Draw Axes');         case 'None'      	% the following command will bring the existing figure 	% to foreground	a = findobj('Tag','cam_dsgn');	figure(a);case 'Close'   	% if the target window exist then close it	if ~isempty(findobj('Tag','FF Cam Analysis Window'))        ff_cam_ana('Stop');        a = findobj('Tag','FF Cam Analysis Window');   	  	close(a);	end   	a = findobj('Tag','cam_dsgn');	close(a);   case 'Analysis'	if ~isempty(findobj('Tag','FF Cam Analysis Window'))        ff_cam_ana('Stop');        a = findobj('Tag','FF Cam Analysis Window');   	  	close(a);    end	if ~isempty(findobj('Tag','oFF Cam Analysis Window'))        off_cam_ana('Stop');        a = findobj('Tag','OFF Cam Analysis Window');   	  	close(a);    end	if ~isempty(findobj('Tag','RF Cam Analysis Window'))        rf_cam_ana('Stop');        a = findobj('Tag','RF Cam Analysis Window');   	  	close(a);    end	if ~isempty(findobj('Tag','ORF Cam Analysis Window'))        orf_cam_ana('Stop');        a = findobj('Tag','ORF Cam Analysis Window');   	  	close(a);    end   switch choice    case 1        eval('ff_cam_ana(''initialize'',length,direction,ainc);');        set(h_popupmenu,'userdata',1);    case 2        eval('off_cam_ana(''initialize'',length,direction,ainc);');        set(h_popupmenu,'userdata',2);    case 3        eval('rf_cam_ana(''initialize'',length,direction,ainc);');        set(h_popupmenu,'userdata',3);    case 4        eval('orf_cam_ana(''initialize'',length,direction,ainc);');        set(h_popupmenu,'userdata',4);    end      case 'Show Definitions'    str1 = 'Cam.jpg';    switch choice    case 1      [strDefinition, errmsg] = sprintf('%s%s','FF',str1);    case 2      [strDefinition, errmsg] = sprintf('%s%s','OFF',str1);    case 3      [strDefinition, errmsg] = sprintf('%s%s','RF',str1);    case 4      [strDefinition, errmsg] = sprintf('%s%s','ORF',str1);    end      Show_definition('initialize',strDefinition);   case 'Profile'    if isempty(findobj('Tag','FF Cam Profile Window'));           OpenProfileFig;    else        figure(findobj('Tag','FF Cam Profile Window'));        % Bring the figure to front, if it already exists    end    fact=pi/180;    % Compute the displacement of the flat-faced follower.  The variable    % dtheta will change the resolution of the cam.  Make it smaller for    % accurate results.    dtheta=ainc;    sign=1;    if direction=='+'        dtheta=-ainc;        sign=-1;    end    temp=-dtheta;    n=abs(360/dtheta);    % Plot the displacement profile, velocity and acceleration for     % the follower.  Start by normalizing f, fp, and fpp    temp=-1;    for j=1:1:360        temp=temp+1;        thetal(j)=temp;        [coords]=follower(thetal(j),rise);        fl(j)=coords(1);	        flp(j)=coords(2);        flpp(j)=coords(3);    end    fmax=max(fl);    fmin=min(fl);    fpmax=max(flp);    fpmin=min(flp);    fppmax=max(flpp);    fppmin=min(flpp);    fn=max([abs(fmax), abs(fmin)]);    fpn=max([abs(fpmax), abs(fpmin)]);    fppn=max([abs(fppmax), abs(fppmin)]);    fnorm=fl/fn;    fpnorm=flp/fpn;    fppnorm=flpp/fppn;        % Set up the axes for displacement drawing.    width=0.9;    height=0.8;    hdl = findobj('tag','ff_cam_profile');    handles = get(hdl,'userdata');    position = handles(1);    velocity = handles(2);    acceleration = handles(3);    axes(hdl);    xlabel('Cam Angle','color', 'k')    ylabel('Follower Displacement, Velocity, and Acceleration','color', 'k')    title('\it{Follower Displacement Diagram}','color', 'r','fontsize', 12)    xmin=0;    xmax=365;    ymina=min([min(fnorm), min(fpnorm), min(fppnorm)]);    ymaxa=max([max(fnorm), max(fpnorm), max(fppnorm)]);    yrange=ymaxa-ymina;    ymin=ymina-0.1*yrange;    ymax=ymaxa+0.1*yrange;    axis([xmin xmax ymin ymax]);    set(hdl, 'XTick',[0 40 80 120 160 200 240 280 320 360]);    set(position,'xdata',thetal, 'ydata',fnorm);    set(velocity,'xdata',thetal,'ydata', fpnorm);    set(acceleration,'xdata',thetal, 'ydata',fppnorm);    text(10, -0.4,['Max. Pos. is: ', num2str(fn) ], 'color', 'r');    text(10, -0.5,['Max. Vel. is: ', num2str(fpn), ' ( \omega', ' )' ],'color', 'b');    text(10, -0.6,['Max. Acc. is: ', num2str(fppn), ' ( \omega^2', ' )' ], 'color', 'k');case 'Help'    %-------On-line help      HelpStr={'Integrated Cam Design';    '';    '    "CamDesign" is an  integrated program  to design and analyze four';    'types of cam-follower mechanisms:  the axial flat-faced follower, the';    'oscillating flat-faced follower, the translating roller follower  the';    'oscillating cylindrical-faced follower.  The nomenclature used by the';    'program is that given in  the  textbook,  Kinematics,  Dynamics,  and';     'Design of Mechanisms by Kenneth Waldron and Gary Kinzel. ';    '';    '    It includes two  windows: a design window and an analysis window.';    'In the design window,  the disabled variables are displayed  in  gray';    'when users specify the type  of  cam-follower  mechanism.   Different';    'sets of  variables are  available to different  types  of  followers.';    'The cam can rotate  in  either  the  clockwise  or  counter-clockwise';    'direction.  The cam  profile can be seen in the profile  window  when';    'users click the "Profile" button.  In addition, users can specify the';    'angle increment for the profile. ';    '';    '    The cam-follower mechanism in  the analysis  window relies on the';    'type specified in the design  window.   For consistency,  the  option';    'for  changing  the  type is  not  available in the  analysis  window.';    'Users  need  to  go back to  the design  window, make  the  necessary';    'changes, and then  click  on the  "Analysis"  button  to  update  the';    'analysis window.';    '';    '    In the analysis window, users can control the number of plots (up';    'to four) and the contents of each plot (four options)  are  provided.';    'Furthermore, the animation speed can be easily adjusted  by  clicking';    'on the speed buttons. ';    '';    ' '};    helpwin(HelpStr,'Integrated Cam Design');   case 'Get File'    % Get the file name using the UIGETFILE	[sFileName sFilePath] = uigetfile('*.dat','Load File');  	if sFileName == 0 && sFilePath == 0	   return;    end          % Combine the path and file name together	sTemp = strcat( sFilePath, sFileName );    % get the size to erase the '.dat' extension   	sz  = size(sFileName);    % load the data file  	load(sTemp);    % assign the parameter to a variable	Parameter = eval(sFileName(1:(sz(2)-4)));    if max(size((Parameter))) == 12        nStyle = Parameter(1);        val = Parameter(2:10);        ainc = Parameter(11);        judge = Parameter(12);        set(h_popupmenu,'Value',nStyle);        for i = 1:9			set(h_length(i),'UserData',val(i),'string',num2str(val(i)));        end        set(h_inc,'UserData',ainc,'string',num2str(ainc));        if judge == 1            set(h_Dradio(1),'Value',1);            set(h_Dradio(2),'Value',0);        else             set(h_Dradio(1),'Value',0);            set(h_Dradio(2),'Value',1);        end      		CamDesign('Change Cam Style');              refresh;    else        set(h_status,'string','invalid file format');          return;	end             case 'Put File'    if direction == '-'        judge = 2;    else        judge = 1;    end    length = length';    [sFileName sFilePath] = uiputfile('*.dat','Save As');    if Argument2 == 1           ParameterData = [choice; length; ainc; judge];    else        ParameterData = g_AnaRes;    end    %sTemp = strcat( sFilePath, sFileName);    [sTemp , errMsg] = sprintf('%s%s', sFilePath, sFileName);    [strCmd, errMsg] = sprintf('%s %s %s', 'save', sTemp, ' -ascii ParameterData');    eval(strCmd);   end   function val=check_val(oldval,newval)    % Check if the user input is number input    % if not, retrieve the previous value in userdata    val=zeros(1);    if ~isequal(length(oldval),length(str2num(newval))),        val=oldval;    %	set(findobj(gcf,'Tag','status_txt'),'String', ...    %   ['Warning: An invalid property value has been entered.']);    else        val=str2num(newval);    endfunction LocalOpenFig()    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Control the color of the UI    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    StdColor = get(0,'DefaultUIcontrolBackgroundColor');    %PointsPerPixel = 72/get(0,'ScreenPixelsPerInch');    bgframe = StdColor;    bgedit = [1 1 1];    bgtext = bgframe;    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % The Main Figure of Crank Rocker Design    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ScreenSize = get(0,'ScreenSize');    sx = 480;    sy = 400;     FigPos = [ 10 ScreenSize(4)-sy-95 sx sy ] ;    a = figure('Units','pixels', ...        'Color',[0.8 0.8 0.8], ...        'Name','Cam Synthesis', ...        'NumberTitle','off', ...        'Position',FigPos, ...        'Tag','cam_dsgn');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % menu uicontrols    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    b = uimenu('Parent',a, ...        'Label','Parameter', ...        'Tag','menu_parameter');    c = uimenu('Parent',b, ...        'Callback','CamDesign(''Get File'')', ...        'Label','Load Parameters', ...        'Tag','submenu_load');    c = uimenu('Parent',b, ...        'Callback','CamDesign(''Put File'',1)', ...        'Label','Save Parameters', ...        'Tag','submenu_save1');    c = uimenu('Parent',b, ...        'Callback','CamDesign(''Put File'',2)', ...        'Label','Save Result Data', ...        'Tag','submenu_save2');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Draw Frame First    % This will prevent the frames from been drawn on top of    % other UICONTROLS.     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.0125 0.0119332 0.98 0.1106], ...        'Style','frame', ...        'Tag','Frame_status');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.6125 0.7625 0.38 0.1575], ...        'Style','frame');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.6125 0.60 0.38 0.1575], ...        'Style','frame');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.6125 0.4375 0.38 0.1575], ...        'Style','frame');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.6125 0.3678 0.38 0.0656], ...        'Style','frame');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.6125 0.297 0.38 0.0656], ...        'Style','frame');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.6125 0.2139 0.38 0.079], ...        'Style','frame');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.6125 0.1312 0.38 0.079], ...        'Style','frame', ...        'Tag','Frame_pushbutton');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Create graphics window for design input    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    %-------Reference axis    b = axes('Parent',a, ...        'Box','on', ...        'Color',[1 1 1], ...        'Position',[0.0125 0.13 0.5896 0.85], ...        'XColor',[0 0 0], ...        'XGrid','off', ...        'XTick',[],...        'YColor',[0 0 0], ...        'YGrid','off', ...        'YTick',[], ...        'ZColor',[0 0 0], ...        'ZGrid','off', ...        'ZTick',[]);    b = axes('Parent',a, ...       'Box','off', ...        'DataAspectRatio',[1 1 1],...        'CameraUpVector',[0 1 0], ...        'CameraUpVectorMode','manual', ...        'Position',[0.0125 0.13 0.5896 0.85], ...        'Tag','cam_axes');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Popup Menu controls    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    h_popupmenu = uicontrol('Parent',a, ...        'Units','normalized', ...        'ListboxTop',0, ...        'Callback','CamDesign(''Change Cam Style'')', ...        'Position',[0.6112 0.9325 0.3830 0.0525], ...        'String',['Axial Flat-Faced Follower       ';'Oscillating Flat-Faced Follower ';'Roller Follower                 ';'Oscillating Cylindrical Follower'], ...        'Style','popupmenu', ...        'UserData',0, ...           'Tag','PopupMenu1', ...        'Value',1);    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Editable box controls    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    h_length(1) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgedit, ...        'Callback','CamDesign(''Change Length'',1)', ...        'Position',[0.8333 0.865 0.1333 0.0475], ...        'String','3.2', ...        'Style','edit', ...        'UserData',3.2);       h_length(2) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgedit, ...        'Callback','CamDesign(''Change Length'',2)', ...        'Position',[0.8333 0.8175 0.1333 0.0475], ...        'String','2', ...        'Style','edit', ...        'UserData',2);       h_length(3) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgedit, ...        'Callback','CamDesign(''Change Length'',3)', ...        'Position',[0.8333 0.7725 0.1333 0.0475], ...        'String','2', ...        'Style','edit', ...        'UserData',2);       h_length(4) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgedit, ...        'Callback','CamDesign(''Change Length'',4)', ...        'Position',[0.8333 0.7025 0.1333 0.0475], ...        'String','2.6', ...        'Style','edit', ...        'UserData',2.6);       h_length(5) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgedit, ...        'Callback','CamDesign(''Change Length'',5)', ...        'Position',[0.8333 0.655 0.1333 0.0475], ...        'String','1.6', ...        'Style','edit', ...        'UserData',1.6);       h_length(6) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgedit, ...        'Callback','CamDesign(''Change Length'',6)', ...       'Position',[0.8333 0.6075 0.1333 0.0475], ...       'Enable','off', ...        'String','0', ...        'Style','edit', ...        'UserData',0);       h_length(7) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgedit, ...        'Callback','CamDesign(''Change Length'',7)', ...        'Position',[0.8333 0.54 0.1333 0.0475], ...       'Enable','off', ...        'String','0', ...        'Style','edit', ...        'UserData',0);       h_length(8) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgedit, ...        'Callback','CamDesign(''Change Length'',8)', ...        'Position',[0.8333 0.4925 0.1333 0.0475], ...       'Enable','off', ...        'String','0', ...        'Style','edit', ...        'UserData',0);       h_length(9) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgedit, ...        'Callback','CamDesign(''Change Length'',9)', ...        'Position',[0.8333 0.4450 0.1333 0.0475], ...       'Enable','off', ...        'String','0', ...        'Style','edit', ...        'UserData',0);       h_inc = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgedit, ...        'Callback','CamDesign(''Change Increment'')', ...        'Position',[0.8333 0.3045 0.1333 0.0475], ...        'String','5', ...        'Style','edit', ...        'UserData',5);       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % push button controls    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Callback','CamDesign(''Profile'')', ...        'Position',[0.6208 0.2203 0.1801 0.0625], ...        'String','Profile', ...        'Tag','CloseButon');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Callback','CamDesign(''Show Definitions'')', ...        'Position',[0.803 0.2203 0.1801 0.0625], ...        'String','Definitions', ...        'Tag','CloseButon');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Callback','CamDesign(''Analysis'')', ...        'Position',[0.6208 0.1386 0.120 0.0625], ...        'String','Analysis', ...        'Tag','AnalysisButton');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Callback','CamDesign(''Close'')', ...        'Position',[0.8646 0.1386 0.120 0.0625], ...        'String','Close', ...        'Tag','CloseButon');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Callback','CamDesign(''Help'')', ...        'Position',[0.7437 0.1386 0.12 0.0625], ...        'String','Info', ...        'Tag','InfoButton');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % radio button controls    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    h_Dradio(1) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Callback','CamDesign(''Dradio'',1)', ...        'Position',[0.7863 0.37 0.110 0.0475], ...       'Style','radiobutton', ...       'value',0, ...        'String','CCW');    h_Dradio(2) = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Callback','CamDesign(''Dradio'',2)', ...        'Position',[0.897 0.37 0.09 0.0475], ...       'Style','radiobutton', ...       'value',1, ...        'String','CW');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % text controls    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    h_status = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'HorizontalAlignment','left', ...        'Position',[0.05625 0.0275 0.9083 0.0775], ...        'String',' ', ...        'Style','text', ...        'Tag','status_txt');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6146 0.8650 0.2062 0.04], ...        'String','base radius', ...        'Style','text');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6146 0.82 0.2062 0.04], ...        'String','rise (height)', ...        'Style','text');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6146 0.775 0.2062 0.04], ...        'String','rise (degree)', ...        'Style','text');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6146 0.7025 0.2062 0.04], ...        'String','dist. to top', ...        'Style','text');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6146 0.655 0.2062 0.04], ...        'String','dist. to buttom', ...        'Style','text');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6146 0.61 0.2062 0.04], ...        'String','pivots distance', ...        'Style','text');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6146 0.5375 0.2062 0.04], ...       'String','follower radius', ...        'Style','text');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6146 0.495 0.2062 0.04], ...        'String','follower length', ...        'Style','text');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6146 0.4525 0.2062 0.04], ...        'String','follower offset', ...        'Style','text');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6292 0.38 0.1458 0.04], ...        'String','rotation', ...        'Style','text');    b = uicontrol('Parent',a, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'Position',[0.6229 0.3094 0.2062 0.04], ...        'String','angle increment', ...        'Style','text');    axis off;    hdls = [h_popupmenu h_length h_inc h_Dradio h_status];    a = findobj('Tag','cam_dsgn');    set(a,'UserData',hdls );	    % The default type is the flat-faced follower. creating the associated mechanism using function    % CreateCamPlot1();    CreateCamPlot1;% CreateCamPlot1() creates mechanism-related objects for the flat-faced follower% CreateCamPlot2() creates mechanism-related objects for the oscillating flat-faced follower% CreateCamPlot3() creates mechanism-related objects for the roller follower% CreateCamPlot4() creates mechanism-related objects for the oscillating cylindrical-faced follower% DeleteCamPlot()  delete the mechanism-related objects for all types% Set up vectors to be drawn in the first plotfunction CreateCamPlot1() % ff_cam    cam=line('xdata', [], 'ydata' ,[], 'linewidth' ,1, 'color', 'k');    stem=line('xdata', [], 'ydata' ,[], 'linewidth',1,'color', 'k');    face=line('xdata', [], 'ydata' ,[], 'linewidth',1,'color', 'k');		    baset=line('xdata', [], 'ydata' ,[], 'linewidth' ,1, 'color', 'r');    baseb=line('xdata', [], 'ydata' ,[], 'linewidth' ,1, 'color', 'r');    bush=line('xdata',[],'ydata',[],'color','r');    pin=line('xdata',[],'ydata',[],'color','r');    hdls = [	cam stem face baset ...            baseb bush pin];    b = findobj('Tag','cam_axes');    set(b,'userdata',hdls );    drawnow;   function DeleteCamPlot()     b = findobj('Tag','cam_axes');    hdls = get(b,'userdata');    for i = 1:7       if hdls(i) ~= 0;          delete(hdls(i));       end    endfunction CreateCamPlot2() % off_cam    cam=line('xdata', [], 'ydata' ,[], 'linewidth' ,1, 'color', 'k');    stem=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'k');    bush1=line('xdata',[],'ydata',[],'color','r');    pin1=line('xdata',[],'ydata',[],'color','r');    bush2=line('xdata',[],'ydata',[],'color','r');    pin2=line('xdata',[],'ydata',[],'color','r');    hdls = [	cam stem bush1 pin1 bush2 pin2 0];    b = findobj('Tag','cam_axes');    set(b,'userdata',hdls );    drawnow;   function CreateCamPlot3() % rf_cam    cam=line('xdata', [], 'ydata' ,[], 'linewidth' ,1, 'color', 'k');    stem=line('xdata', [], 'ydata' ,[], 'linewidth',1,'color', 'k');    roller=line('xdata', [], 'ydata' ,[], 'linewidth' ,1, 'color', 'k');    baset=line('xdata', [], 'ydata' ,[], 'linewidth' ,1, 'color', 'r');    baseb=line('xdata', [], 'ydata' ,[], 'linewidth' ,1, 'color', 'r');    bush=line('xdata',[],'ydata',[],'color','r');    pin=line('xdata',[],'ydata',[],'color','r');    hdls = [	cam stem roller baset ...            baseb bush pin];    b = findobj('Tag','cam_axes');    set(b,'userdata',hdls );    drawnow;   function CreateCamPlot4() % orf_cam    cam=line('xdata', [], 'ydata' ,[], 'linewidth' ,1, 'color', 'k');    roller=line('xdata', [], 'ydata' ,[], 'linewidth' ,1, 'color', 'k');    stem=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'k');    bush1=line('xdata',[],'ydata',[],'color','r');    pin1=line('xdata',[],'ydata',[],'color','r');    bush2=line('xdata',[],'ydata',[],'color','r');    pin2=line('xdata',[],'ydata',[],'color','r');    hdls = [	cam roller stem bush1 pin1 bush2 pin2];    b = findobj('Tag','cam_axes');    set(b,'userdata',hdls );    drawnow;    function OpenProfileFig()    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    %	Profile Figure    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ScreenSize = get(0,'ScreenSize');    sx = 400;    sy = 350;    FigPos = [ ScreenSize(3)-sx-30 ScreenSize(4)-sy-95 sx sy ] ;    a = figure('Units','Pixels', ...        'Color',[0.8 0.8 0.8], ...       'Name','FF Cam Profile Window', ...        'NumberTitle','off', ...        'Position',FigPos, ...        'Tag','FF Cam Profile Window');     b = axes('Parent',a, ...       'Box','off', ...        'CameraUpVector',[0 1 0], ...        'CameraUpVectorMode','manual', ...        'Position',[0.15 0.15 0.75 0.75], ...        'Tag','ff_cam_profile');    % Set up vectors to be drawn in the follower displacement plot    position=line('xdata', [], 'ydata' ,[], 'linewidth',1,'linestyle', '-', 'color', 'r');    velocity=line('xdata', [], 'ydata' ,[], 'linewidth',0.75,'linestyle', '--','color', 'b');    acceleration=line('xdata', [], 'ydata' ,[], 'linewidth' ,0.5, 'linestyle', '-.','color', 'k');    hdls = [position velocity acceleration];    set(b,'userdata',hdls);	
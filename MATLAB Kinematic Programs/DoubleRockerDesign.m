function DoubleRockerDesign(selector, varargin)% Double lever mechanism design program% Variablesglobal dl_fig;global dl_axes;global theta0text;global thetatext;global phi0text;global phitext;global r1text;global r2text;global r3text;global r4text;global mode_popup;global modetextglobal h_status;global bush1;global bush2;global link2a;global link3a;global link4a;global link2b;global link3b;global link4b;global nodeA;global nodeB1;global nodeB2;global nodeC1;global nodeC2;global nodeC;global nodeD;% Animation Variablesglobal link2c;global link3c;global link4c;global nodeB3;global nodeC3;global animate_button;global count;global dir;global stop;global B;global C;% Buttonsglobal def_button;global inf_button;global close_button;global zoom_in_button;global zoom_out_button;global h_plus;global h_minus;global nChangeSpeed;global timesink;% axis variablesglobal xmin;global xmax;global ymin;global ymax;% Calculation Variablesglobal theta0;global theta;global phi0;global phi;global r1;global r2;global r3;global r4;global A;global B1;global C1;global D;global B2;global C2;global d2r;global r2d;global ani;if  nargin == 0    selector = 'init';endswitch selectorcase 'init'    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Control the color of the UI    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    StdColor = get(0,'DefaultUIcontrolBackgroundColor');    %PointsPerPixel = 72/get(0,'ScreenPixelsPerInch');    bgframe = StdColor;    bgedit = [1 1 1];    bgtext = bgframe;        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % The Main Figure of the Double Lever Program    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ScreenSize = get(0,'ScreenSize');    sx = 1000;    sy = 680;    FigPos = [80 ScreenSize(4)-sy-95 sx sy] ;    dl_fig = figure('Units','pixels', 'Color',[0.8 0.8 0.8], 'Name',...         'Double Lever Design Program', 'NumberTitle','off', 'Position',FigPos);    %*****************************************************************************************************    frame_1 = uicontrol('Parent',dl_fig, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.72 0.63 0.27 0.358], ...        'Style','frame', ...        'Tag','frame_1');    frame_2 = uicontrol('Parent',dl_fig, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.72 0.27 0.27 0.34], ...        'Style','frame', ...        'Tag','frame_2');    frame_3 = uicontrol('Parent',dl_fig, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.72 0.02 0.27 0.23], ...        'Style','frame', ...        'Tag','frame_3');    frame_4 = uicontrol('Parent',dl_fig, ...        'Units','normalized', ...        'BackgroundColor',bgframe, ...        'Position',[0.015 0.02 0.69 0.07], ...        'Style','frame', ...        'Tag','frame_3');    % dl_axes=axes('Parent',dl_fig,'box','on','Units','normalized','FontSize',8.0, ...    %          'xtick',[-50:1:50], 'ytick',[-50:1:50], ...    %          'Position',[0.06 0.12 0.6 0.87],'xlim',[-5 10],'ylim',[-5 10]);    dl_axes=axes('Parent',dl_fig,'box','on','Units','normalized','FontSize',8.0, ...                 'xtick',[], 'ytick',[], ...             'Position',[0.06 0.12 0.6 0.87],'xlim',[-5 10],'ylim',[-5 10]);    % grid on;    %*****************************************************************************************************    text1=uicontrol('Parent',dl_fig,'Units','normalized','Style','text', ...         'BackgroundColor',bgtext, 'Position',[0.76 0.9 0.05 0.03],...         'String','Theta1','FontSize',10.0);    text2=uicontrol('Parent',dl_fig,'Units','normalized','Style','text', ...         'BackgroundColor',bgtext, 'Position',[0.76 0.83 0.05 0.03],...         'String','Theta','FontSize',10.0);    text3=uicontrol('Parent',dl_fig,'Units','normalized','Style','text', ...         'BackgroundColor',bgtext, 'Position',[0.76 0.76 0.05 0.03],...         'String','Phi1','FontSize',10.0);    text4=uicontrol('Parent',dl_fig,'Units','normalized','Style','text', ...         'BackgroundColor',bgtext, 'Position',[0.76 0.69 0.05 0.03],...         'String','Phi','FontSize',10.0);    text5=uicontrol('Parent',dl_fig,'Units','normalized','Style','text', ...         'BackgroundColor',bgtext, 'Position',[0.76 0.55 0.05 0.03],...         'String','r1','FontSize',10.0);    text6=uicontrol('Parent',dl_fig,'Units','normalized','Style','text', ...         'BackgroundColor',bgtext, 'Position',[0.76 0.48 0.05 0.03],...         'String','r2','FontSize',10.0);    text7=uicontrol('Parent',dl_fig,'Units','normalized','Style','text', ...         'BackgroundColor',bgtext, 'Position',[0.76 0.41 0.05 0.03],...         'String','r3','FontSize',10.0);    text8=uicontrol('Parent',dl_fig,'Units','normalized','Style','text', ...         'BackgroundColor',bgtext, 'Position',[0.76 0.34 0.05 0.03],...         'String','r4','FontSize',10.0);    text9=uicontrol('Parent',dl_fig,'Units','normalized','Style','text', ...         'BackgroundColor',bgtext, 'Position',[0.73 0.28 0.13 0.03], ...         'String','assembly mode:','FontSize',10.0);    theta0text=uicontrol('Parent',dl_fig,'Units','normalized','Style','edit',...         'backgroundcolor', [1 1 1], 'Position',[0.85 0.9 0.1 0.03],...         'String','','callback','DoubleRockerDesign(''theta0'')');    thetatext=uicontrol('Parent',dl_fig,'Units','normalized','Style','edit',...         'backgroundcolor', [1 1 1], 'Position',[0.85 0.83 0.1 0.03],...         'String','','callback','DoubleRockerDesign(''theta'')');    phi0text=uicontrol('Parent',dl_fig,'Units','normalized','Style','edit',...         'backgroundcolor', [1 1 1], 'Position',[0.85 0.76 0.1 0.03],...         'String','','callback','DoubleRockerDesign(''phi0'')');    phitext=uicontrol('Parent',dl_fig,'Units','normalized','Style','edit',...         'backgroundcolor', [1 1 1], 'Position',[0.85 0.69 0.1 0.03],...         'String','','callback','DoubleRockerDesign(''phi'')');    r1text=uicontrol('Parent',dl_fig,'Units','normalized','Style','edit',...         'backgroundcolor', [1 1 1], 'Position',[0.85 0.55 0.1 0.03],...         'String','','callback','DoubleRockerDesign(''r1'')');    r2text=uicontrol('Parent',dl_fig,'Units','normalized','Style','edit',...         'backgroundcolor', [1 1 1], 'Position',[0.85 0.48 0.1 0.03],...         'String','','callback','DoubleRockerDesign(''r2'')');    r3text=uicontrol('Parent',dl_fig,'Units','normalized','Style','edit',...         'backgroundcolor', [1 1 1], 'Position',[0.85 0.41 0.1 0.03],...         'String','','callback','DoubleRockerDesign(''r3'')');    r4text=uicontrol('Parent',dl_fig,'Units','normalized','Style','edit',...         'backgroundcolor', [1 1 1], 'Position',[0.85 0.34 0.1 0.03],...         'String','','callback','DoubleRockerDesign(''r4'')');    modetext=uicontrol('Parent',dl_fig,'Units','normalized','Style','text', ...         'backgroundcolor',bgtext, 'Position',[0.88 0.28 0.05 0.03], ...         'String','-1');     h_status = uicontrol('Parent',dl_fig, ...        'Units','normalized', ...        'BackgroundColor',bgtext, ...        'HorizontalAlignment','left', ...        'Position',[0.05625 0.025 0.6 0.0475], ...        'String',' ', ...        'Style','text', ...        'Tag','status_txt');    %********************************************************************************************************     def_button=uicontrol('Parent',dl_fig,'Units','normalized','Style','pushbutton',...         'backgroundcolor', bgtext, 'Position',[0.745 0.18 0.1 0.04],...         'String','Definitions','fontsize',10.0,'callback','DoubleRockerDesign(''Show Definitions'')');    info_button=uicontrol('Parent',dl_fig,'Units','normalized','Style','pushbutton',...         'backgroundcolor', bgtext, 'Position',[0.865 0.18 0.1 0.04],...         'String','Info','fontsize',10.0,'callback','DoubleRockerDesign(''Help'')');     animate_button=uicontrol('Parent',dl_fig,'Units','normalized','Style','pushbutton',...         'backgroundcolor', bgtext, 'Position',[0.745 0.115 0.1 0.04],...         'String','Animate','fontsize',10.0,'callback','DoubleRockerDesign(''animate1'')');    close_button=uicontrol('Parent',dl_fig,'Units','normalized','Style','pushbutton',...         'backgroundcolor', bgtext, 'Position',[0.865 0.115 0.1 0.04],...         'String','Close','fontsize',10.0,'callback','DoubleRockerDesign(''close'')');    zoom_in_button=uicontrol('Parent',dl_fig,'Units','normalized','Style','pushbutton',...         'backgroundcolor', bgtext, 'Position',[0.745 0.05 0.1 0.04],...         'String','Zoom In','fontsize',10.0,'callback','DoubleRockerDesign(''Zoom In'')');     zoom_out_button=uicontrol('Parent',dl_fig,'Units','normalized','Style','pushbutton',...         'backgroundcolor', bgtext, 'Position',[0.865 0.05 0.1 0.04],...         'String','Zoom Out','fontsize',10.0,'callback','DoubleRockerDesign(''Zoom Out'')');     %********************************************************************************************************     link2a=line('xdata',[],'ydata',[],'linewidth',3,'color',[0 1 0]);    link3a=line('xdata',[],'ydata',[],'linewidth',2,'color',[0 0 0]);    link4a=line('xdata',[],'ydata',[],'linewidth',2,'color',[0 0 0]);    link2b=line('xdata',[],'ydata',[],'linewidth',2.5,'color','r','linestyle',':');    link3b=line('xdata',[],'ydata',[],'linewidth',2.5,'color','r','linestyle',':');    link4b=line('xdata',[],'ydata',[],'linewidth',2.5,'color','r','linestyle',':');    bush1=line('xdata',[],'ydata',[],'linewidth',1, ...         'color',[0 0 0],'buttondownfcn','DoubleRockerDesign(''moveA'')');    nodeA=line('xdata',[],'ydata',[],'linewidth',1,'marker','o', ...         'markerSize',6,'color',[0 0 0],'buttondownfcn','DoubleRockerDesign(''moveA'')');    bush2=line('xdata',[],'ydata',[],'linewidth',1, ...         'color',[0 0 0],'buttondownfcn','DoubleRockerDesign(''moveD'')');    nodeD=line('xdata',[],'ydata',[],'linewidth',1,'marker','o', ...         'markerSize',6,'color',[0 0 0],'buttondownfcn','DoubleRockerDesign(''moveD'')');    nodeB1=line('xdata',[],'ydata',[],'linewidth',1,'marker','o', ...         'markerSize',8,'color',[0 0 0],'buttondownfcn','DoubleRockerDesign(''moveB1'')');    nodeC1=line('xdata',[],'ydata',[],'linewidth',1,'marker','o', ...         'markerSize',8,'color',[0 0 0],'buttondownfcn','DoubleRockerDesign(''moveC1'')');    nodeB2=line('xdata',[],'ydata',[],'linewidth',1,'marker','o', ...         'markerSize',8,'color','r','buttondownfcn','DoubleRockerDesign(''moveB2'')');    nodeC2=line('xdata',[],'ydata',[],'linewidth',1,'marker','o', ...         'markerSize',8,'color','r','buttondownfcn','DoubleRockerDesign(''moveC2'')');    % Animation links    link2c=line('xdata',[],'ydata',[],'linewidth',2,'color','b','linestyle',':','visible','on');    link3c=line('xdata',[],'ydata',[],'linewidth',2,'color','b','linestyle',':','visible','on');    link4c=line('xdata',[],'ydata',[],'linewidth',2,'color','b','linestyle',':','visible','on');    nodeB3=line('xdata',[],'ydata',[],'linewidth',2,'marker','o','markerSize',8,'color','b','visible','on');    nodeC3=line('xdata',[],'ydata',[],'linewidth',2,'marker','o','markerSize',8,'color','b','visible','on');    % Initialize variables         xmin = -5;         xmax = 10;         ymin = -5;         ymax = 10;    theta0=pi/4;    % 45 deg    theta=pi/10;    phi0=pi/3;      % 60 deg    phi=pi/12;      % 15 deg    r1=5;    r2=6;    r3=5;    r4=6;    A=[0.0 0.0];    D=[A(1)+r1 A(2)];    d2r = pi/180;    r2d = 180/pi;    B1=[A(1)+r2*cos(theta0) A(2)+r2*sin(theta0)];    B2=[A(1)+r2*cos(theta0+theta) A(2)+r2*sin(theta0+theta)];    C1=[D(1)+r4*cos(phi0) D(2)+r4*sin(phi0)];    C2=[D(1)+r2*cos(phi0+phi) A(2)+r2*sin(phi0+phi)];    timesink = 0.001;    DoubleRockerDesign('set_text');    DoubleRockerDesign('bushings');    DoubleRockerDesign('nodes');    DoubleRockerDesign('links');    DoubleRockerDesign('Status');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Callback to set the edit text boxes to the correct valuescase 'set_text'         theta0=atan2(B1(2)-A(2), B1(1)-A(1));     theta=atan2(B2(2)-A(2), B2(1)-A(1))-theta0;        if theta < -pi            theta = theta + 2*pi;        elseif theta > pi            theta = theta - 2*pi;        end     phi0=atan2(C1(2)-D(2), C1(1)-D(1));     phi=atan2(C2(2)-D(2), C2(1)-D(1))-phi0;        % "phi" must be less than pi or -pi  %==================        if phi < -pi            phi = phi + 2*pi;        elseif theta > pi            phi = phi - 2*pi;        end        %=========================================================                r1=sqrt((D(1)-A(1))^2+(D(2)-A(2))^2);     r2=sqrt((B1(1)-A(1))^2+(B1(2)-A(2))^2);     r3=sqrt((C1(1)-B1(1))^2+(C1(2)-B1(2))^2);     r4=sqrt((C1(1)-D(1))^2+(C1(2)-D(2))^2);     set(theta0text,'string',num2str(theta0*r2d));     set(thetatext,'string',num2str(theta*r2d));     set(phi0text,'string',num2str(phi0*r2d));     set(phitext,'string',num2str(phi*r2d));     set(r1text,'string',num2str(r1));     set(r2text,'string',num2str(r2));     set(r3text,'string',num2str(r3));     set(r4text,'string',num2str(r4));case 'SetSpeed_plus'    timesink = timesink-0.01; case 'SetSpeed_minus'    timesink = timesink+0.01;     % Callback to calculate and plot the bushingscase 'bushings'     coords = bushing(0.1,A(1),A(2),10,0);     xbush1 = coords(:,1);     ybush1 = coords(:,2);     set(bush1,'xdata',xbush1,'ydata',ybush1);     set(nodeA,'xdata',[A(1)],'ydata',[A(2)]);     coords = bushing(0.1,D(1),D(2),10,0);     xbush2 = coords(:,1);     ybush2 = coords(:,2);     set(bush2,'xdata',xbush2,'ydata',ybush2);     set(nodeD,'xdata',[D(1)],'ydata',[D(2)]);% Callback to plot the nodes (pins)case 'nodes'     set(nodeB1,'xdata',[B1(1)],'ydata',[B1(2)]);     set(nodeC1,'xdata',[C1(1)],'ydata',[C1(2)]);     set(nodeB2,'xdata',[B2(1)],'ydata',[B2(2)]);     set(nodeC2,'xdata',[C2(1)],'ydata',[C2(2)]);% Callback to plot the linkscase 'links'     set(link2a,'xdata',[A(1) B1(1)],'ydata',[A(2) B1(2)]);     set(link3a,'xdata',[B1(1) C1(1)],'ydata',[B1(2) C1(2)]);     set(link4a,'xdata',[C1(1) D(1)],'ydata',[C1(2) D(2)]);     set(link2b,'xdata',[A(1) B2(1)],'ydata',[A(2) B2(2)]);     set(link3b,'xdata',[B2(1) C2(1)],'ydata',[B2(2) C2(2)]);     set(link4b,'xdata',[C2(1) D(1)],'ydata',[C2(2) D(2)]);% Callback sequence to facilitate moving the point B1case 'moveB1'     set(dl_fig,'windowbuttonmotionfcn','DoubleRockerDesign(''moveB1_2'')');     set(dl_fig,'windowbuttonupfcn','DoubleRockerDesign(''moveB1_3'')');case 'moveB1_2'     loc=get(dl_axes,'currentpoint');          B1 = [loc(1,1) loc(1,2)];     DoubleRockerDesign('calcB1');     DoubleRockerDesign('set_text');     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');case 'moveB1_3'     set(dl_fig,'windowbuttonmotionfcn','');     set(dl_fig,'windowbuttonupfcn','');case 'calcB1'     theta0=atan2(B1(2)-A(2), B1(1)-A(1));     r2=sqrt((B1(1)-A(1))^2+(B1(2)-A(2))^2);     B2=[A(1)+r2*cos(theta0+theta) A(2)+r2*sin(theta0+theta)];          num=r1*r2*(cos(theta0)-cos(theta0+theta));      den1 = -r2*cos(theta0-phi0);          den2 = r1*(cos(phi0)-cos(phi0+phi));     den3 = r2*cos(theta0+theta-phi0-phi);     den = den1 + den2+ den3;         r4=num/den;     C1=[D(1)+r4*cos(phi0) D(2)+r4*sin(phi0)];      C2=[D(1)+r4*cos(phi0+phi) D(2)+r4*sin(phi0+phi)];   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Callback sequence to facilitate moving the point C1case 'moveC1'     set(dl_fig,'windowbuttonmotionfcn','DoubleRockerDesign(''moveC1_2'')');     set(dl_fig,'windowbuttonupfcn','DoubleRockerDesign(''moveC1_3'')');case 'moveC1_2'     loc=get(dl_axes,'currentpoint');             C1 = [loc(1,1) loc(1,2)];     DoubleRockerDesign('calcC1');     DoubleRockerDesign('set_text');     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');%*****************************************************************************     case 'moveC1_3'     set(dl_fig,'windowbuttonmotionfcn','');     set(dl_fig,'windowbuttonupfcn','');case 'calcC1'     phi0=atan2(C1(2)-D(2), C1(1)-D(1));     r4=sqrt((C1(1)-D(1))^2+(C1(2)-D(2))^2);     C2=[D(1)+r4*cos(phi0+phi) D(2)+r4*sin(phi0+phi)];     num=r1*r4*cos(phi+phi0)-r1*r4*cos(phi0);      den1 = -r4*cos(theta0-phi0);     den2 = r1*(cos(theta0+theta)-cos(theta0));     den3 = r4*cos(theta0+theta-phi0-phi);          den = den1+den2+den3;          r2=num/den;          B1=[A(1)+r2*cos(theta0) A(2)+r2*sin(theta0)];     B2=[A(1)+r2*cos(theta0+theta) A(2)+r2*sin(theta0+theta)];%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Callback sequence to facilitate moving the point D1case 'moveD'     set(dl_fig,'windowbuttonmotionfcn','DoubleRockerDesign(''moveD_2'')');     set(dl_fig,'windowbuttonupfcn','DoubleRockerDesign(''moveD_3'')');case 'moveD_2'     loc=get(dl_axes,'currentpoint');     D = [loc(1,1) 0];     DoubleRockerDesign('set_text');     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');case 'moveD_3'     set(dl_fig,'windowbuttonmotionfcn','');     set(dl_fig,'windowbuttonupfcn','');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Callback sequence to facilitate moving the point B2case 'moveB2'     set(dl_fig,'windowbuttonmotionfcn','DoubleRockerDesign(''moveB2_2'')');     set(dl_fig,'windowbuttonupfcn','DoubleRockerDesign(''moveB2_3'')');case 'moveB2_2'     loc=get(dl_axes,'currentpoint');              B2 = [loc(1,1) loc(1,2)];     r2=sqrt((B2(1)-A(1))^2+(B2(2)-A(2))^2);     theta=atan2(B2(2)-A(2), B2(1)-A(1))-theta0;        B1=[A(1)+r2*cos(theta0), A(2)+r2*sin(theta0)];     DoubleRockerDesign('calcB1');          DoubleRockerDesign('set_text');     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');     % endcase 'moveB2_3'     set(dl_fig,'windowbuttonmotionfcn','');     set(dl_fig,'windowbuttonupfcn','');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Callback sequence to facilitate moving the point B2case 'moveC2'     set(dl_fig,'windowbuttonmotionfcn','DoubleRockerDesign(''moveC2_2'')');     set(dl_fig,'windowbuttonupfcn','DoubleRockerDesign(''moveC2_3'')');case 'moveC2_2'     loc=get(dl_axes,'currentpoint');     C2 = [loc(1,1) loc(1,2)];     r4=sqrt((C2(1)-D(1))^2+(C2(2)-D(2))^2);     phi=atan2(C2(2)-D(2), C2(1)-D(1))-phi0;     C1=[D(1)+r4*cos(phi0), D(2)+r4*sin(phi0)];     DoubleRockerDesign('calcC1');     DoubleRockerDesign('set_text');     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');case 'moveC2_3'     set(dl_fig,'windowbuttonmotionfcn','');     set(dl_fig,'windowbuttonupfcn','');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % theta0 edit box callback : need to recalculate B1, B2, r3, r4, C1, C2case 'theta0'    % read new theta0     theta0=str2num(get(theta0text,'string'))*d2r;         % B1, B2     B1=[A(1)+r2*cos(theta0) A(2)+r2*sin(theta0)];     B2=[A(1)+r2*cos(theta0+theta) A(2)+r2*sin(theta0+theta)];         %======================================================================     % r4       num=r1*r2*(cos(theta0)-cos(theta0+theta));     den1 = -r2*cos(theta0-phi0);          den2 = r1*(cos(phi0)-cos(phi0+phi));     den3 = r2*cos(theta0+theta-phi0-phi);     den = den1 + den2+ den3;     r4=num/den;    %C1, C2     C1=[D(1)+r4*cos(phi0) D(2)+r4*sin(phi0)];        C2=[D(1)+r4*cos(phi0+phi) D(2)+r4*sin(phi0+phi)];      phi0=atan2(C1(2)-D(2), C1(1)-D(1));      phi=atan2(C2(2)-D(2), C2(1)-D(1))-phi0;         %r3     r3=sqrt((C1(1)-B1(1))^2+(C1(2)-B1(2))^2);         % set new theta0, r3, r4 in the box     set(theta0text,'string',num2str(theta0*r2d));     set(phi0text,'string',num2str(phi0*r2d));      set(phitext,'string',num2str(phi*r2d));            if r3 > 0         set(r3text,'string',num2str(r3));     else   % if r3 < 0         set(r3text,'string',num2str(-r3));     end          if r4 > 0         set(r4text,'string',num2str(r4));     else   % if r4 < 0         set(r4text,'string',num2str(-r4));     end          DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % phi0 edit box callback : need to recalculate C1, C2, r2, r3, B1, B2case 'phi0'    % read new phi0     phi0=str2num(get(phi0text,'string'))*d2r;         % C1, C2     C1=[D(1)+r4*cos(phi0) D(2)+r4*sin(phi0)];     C2=[D(1)+r4*cos(phi0+phi) D(2)+r4*sin(phi0+phi)];     %======================================================================    %r2     num=r1*r4*cos(phi+phi0)-r1*r4*cos(phi0);      den1 = -r4*cos(theta0-phi0);     den2 = r1*(cos(theta0+theta)-cos(theta0));     den3 = r4*cos(theta0+theta-phi0-phi);          den = den1 + den2+ den3;          r2=num/den;    % B1, B2     B1=[A(1)+r2*cos(theta0) A(2)+r2*sin(theta0)];     B2=[A(1)+r2*cos(theta0+theta) A(2)+r2*sin(theta0+theta)];         % theta0 change when B1(2)<0    % theta change when B2(2)<0    % recalculate from the value of B1 and B2     theta0=atan2(B1(2)-A(2), B1(1)-A(1));     theta=atan2(B2(2)-A(2), B2(1)-A(1))-theta0;              % r3     r3=sqrt((C1(1)-B1(1))^2+(C1(2)-B1(2))^2);    % set new phi, r2, r3 in the box     set(phi0text,'string',num2str(phi0*r2d));     set(theta0text,'string',num2str(theta0*r2d));      set(thetatext,'string',num2str(theta*r2d));            if r2 > 0         set(r2text,'string',num2str(r2));     else   % if r2 < 0         set(r2text,'string',num2str(-r2));     end          if r3 > 0         set(r3text,'string',num2str(r3));     else   % if r3 < 0         set(r3text,'string',num2str(-r3));     end     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % theta edit box callback : need to recalculate B2, r3, r4, C1, C2case 'theta'     % read new theta     theta=str2num(get(thetatext,'string'))*d2r;         % B2     B2=[A(1)+r2*cos(theta+theta0) A(2)+r2*sin(theta+theta0)];         %======================================================================     % r4       num=r1*r2*(cos(theta0)-cos(theta0+theta));     den1 = -r2*cos(theta0-phi0);          den2 = r1*(cos(phi0)-cos(phi0+phi));     den3 = r2*cos(theta0+theta-phi0-phi);     den = den1 + den2+ den3;     r4=num/den;    %C1, C2     C1=[D(1)+r4*cos(phi0) D(2)+r4*sin(phi0)];        C2=[D(1)+r4*cos(phi0+phi) D(2)+r4*sin(phi0+phi)];         % phi0 change when C1(2)<0    % phi change when C2(2)<0    % recalculate from the value of C1 and C2     phi0=atan2(C1(2)-D(2), C1(1)-D(1));    %<-----------------------------     phi=atan2(C2(2)-D(2), C2(1)-D(1))-phi0;  %<---------------------------          %r3     r3=sqrt((C1(1)-B1(1))^2+(C1(2)-B1(2))^2);         % set new theta, phi0, phi, r3, r4 in the box     set(thetatext,'string',num2str(theta*r2d));     set(phi0text,'string',num2str(phi0*r2d));  %<------------------------     set(phitext,'string',num2str(phi*r2d));    %<------------------------     if r3 > 0         set(r3text,'string',num2str(r3));     else   % if r3 < 0         set(r3text,'string',num2str(-r3));     end          if r4 > 0         set(r4text,'string',num2str(r4));     else   % if r4 < 0         set(r4text,'string',num2str(-r4));     end     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % phi edit box callback : need to recalculate C2, r2, r3, B1, B2case 'phi'    % read new phi     phi=str2num(get(phitext,'string'))*d2r;         % C2     C2=[D(1)+r4*cos(phi+phi0) D(2)+r4*sin(phi+phi0)];   %======================================================================    %r2     num=r1*r4*cos(phi+phi0)-r1*r4*cos(phi0);      den1 = -r4*cos(theta0-phi0);     den2 = r1*(cos(theta0+theta)-cos(theta0));     den3 = r4*cos(theta0+theta-phi0-phi);          den = den1 + den2+ den3;          r2=num/den;    % B1, B2     B1=[A(1)+r2*cos(theta0) A(2)+r2*sin(theta0)];     B2=[A(1)+r2*cos(theta0+theta) A(2)+r2*sin(theta0+theta)];         % theta0 change when B1(2)<0    % theta change when B2(2)<0    % recalculate from the value of B1 and B2     theta0=atan2(B1(2)-A(2), B1(1)-A(1));     theta=atan2(B2(2)-A(2), B2(1)-A(1))-theta0;             % r3     r3=sqrt((C1(1)-B1(1))^2+(C1(2)-B1(2))^2);         % set new phi, r2, r3 in the box     set(phitext,'string',num2str(phi*r2d));     set(theta0text,'string',num2str(theta0*r2d));      set(thetatext,'string',num2str(theta*r2d));      if r2 > 0         set(r2text,'string',num2str(r2));     else   % if r2 < 0         set(r2text,'string',num2str(-r2));     end          if r3 > 0         set(r3text,'string',num2str(r3));     else   % if r3 < 0         set(r3text,'string',num2str(-r3));     end     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % r1 edit box callbackcase 'r1'     r1=str2num(get(r1text,'string'));     angle=atan2(D(2)-A(2),D(1)-A(1));     D(1)=A(1)+r1*cos(angle);     D(2)=A(2)+r1*sin(angle);     DoubleRockerDesign('set_text');     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % r2 edit box callbackcase 'r2'     r2=str2num(get(r2text,'string'));     B1(1)=A(1)+r2*cos(theta0);     B1(2)=A(2)+r2*sin(theta0);     B2(1)=A(1)+r2*cos(theta+theta0);     B2(2)=A(2)+r2*sin(theta+theta0);     DoubleRockerDesign('calcB1');     DoubleRockerDesign('set_text');     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % r3 edit box callbackcase 'r3'     r3=str2num(get(r3text,'string'));     angle1=atan2(C1(2)-B1(2),C1(1)-B1(1));     angle2=atan2(C2(2)-B2(2),C2(1)-B2(1));     C1(1)=B1(1)+r3*cos(angle1);     C1(2)=B1(2)+r3*sin(angle1);     DoubleRockerDesign('calcC1');     DoubleRockerDesign('set_text');     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % r4 edit box callbackcase 'r4'     r4=str2num(get(r4text,'string'));     C1(1)=D(1)+r4*cos(phi0);     C1(2)=D(2)+r4*sin(phi0);     DoubleRockerDesign('calcC1');     DoubleRockerDesign('set_text');     DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');     DoubleRockerDesign('Status');     DoubleRockerDesign('Mode');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %==========================================================================%==========================================================================% Animation Modifycase 'animate1'        % get the angles from the text boxes      theta0=str2num(get(theta0text,'string'));    theta=str2num(get(thetatext,'string'));    phi0=str2num(get(phi0text,'string'));    phi=str2num(get(phitext,'string'));          % convert all angles to radian    theta0 = theta0*(pi/180);    theta = theta*(pi/180);    phi0 = phi0*(pi/180);    phi = phi*(pi/180);        r = [r1 r2 r3 r4 0 r3];   % r(5) is the same value of cr1 in FourbarAnalysis: coupler radius (to point D1 from the crank pin)                              % r(6) is the same as r3 to draw the output line of the rocker output    beta1 = 0; % angle between the coupler and link 3: set to zero to show the input & output lines     Q1 = 0;     % the frame angle    wdr = 5;    cpflag = 1;    driver = 1;    times = 1;    mode = DoubleRockerAssemblymode(r(1), r(2), r(3), r(4), Q1, theta0, phi0);    DoubleRocker_ana('initialize',r,beta1,Q1,wdr,cpflag,driver,times,mode,1,theta0,theta);case 'Show Definitions'   Show_definition('initialize','DoubleRockerDesign.jpg');case 'Help'%-------On-line help     HelpStr={'Double Lever Design';    '';    '    "Double Lever Design" is a program to design double lever mechanisms';    'and to analyze the result based.  The program contains two steps: design';    'and analysis.  The nomenclature used by the program is that given in the';    'textbook,  Kinematics,  Dynamics, and  Design of  Mechanisms  by Kenneth';    'Waldron and Gary Kinzel.';    '';    '    In the design step, the variables are the  four link lengths (frame,';    'crank, coupler, and rocker) and four angles( frame angle and its change,';    'rocker angle and its change).  One of the program features is that users';    'can drag the mouse to  change the coupler point in a continuous fashion. ';    'Also users  can input the  values of link  lengths and  angles  from the';    'keyboard.';    '';    '    In the analysis step, users can see the animation  from  the initial';    'position to the final position of the double lever.';    '';    '    The "Close" button closes the "Double Lever Disign" window while the';    '"Animate"  button  starts the linkage animation.';    ' '};   helpwin(HelpStr,'Double Lever Design');case 'close'     close('Double Lever Design Program');          case 'Zoom In'     factor = 0.95;          xmin = xmin*factor;     xmax = xmax*factor;     ymin = ymin*factor;     ymax = ymax*factor;          DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');          axis([xmin xmax ymin ymax]);      case 'Zoom Out'          factor = 1.05;          xmin = xmin*factor;     xmax = xmax*factor;     ymin = ymin*factor;     ymax = ymax*factor;          DoubleRockerDesign('bushings');     DoubleRockerDesign('nodes');     DoubleRockerDesign('links');          axis([xmin xmax ymin ymax]);case 'Status'    % show the status %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    vector_r2 = [B1(1)-A(1) B1(2)-A(2) 0];    vector_r3 = [C1(1)-B1(1) C1(2)-B1(2) 0];    vector_r2 = [C1(1)-B1(1) C1(2)-B1(2) 0];    vector_r3 = [D(1)-C1(1) D(2)-C1(2) 0];    cross_product_r = cross(vector_r2, vector_r3);    vector_r2_prime = [B2(1)-A(1) B2(2)-A(2) 0];    vector_r3_prime = [C2(1)-B2(1) C2(2)-B2(2) 0];    vector_r2_prime = [C2(1)-B2(1) C2(2)-B2(2) 0];    vector_r3_prime = [D(1)-C2(1) D(2)-C2(2) 0];    cross_product_r_prime = cross(vector_r2_prime, vector_r3_prime);    if sign(cross_product_r(3)) == sign(cross_product_r_prime(3))        set(h_status,'string','');    else        set(h_status,'string','Branch Problem, Please input other values !');    end    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    case 'Mode'    Q1 = 0;    % the frame angle    mode = DoubleRockerAssemblymode(r1, r2, r3, r4, Q1, theta0, phi0);         set(modetext,'string',num2str(mode));    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [coords] = motion(A,D,theta0,theta,phi0,phi,r2,r4,dt,i)% Function to calculate the position of the links and nodes as the linkage moves.% dt = delta theta% dp = delta phi% i = increment #dp = phi/(theta/dt);    % from theta/dt == phi/dp    Bx = A(1)+r2*cos(theta0+dt*i);    By = A(2)+r2*sin(theta0+dt*i);    Cx = D(1)+r4*cos(phi0+dp*i);    Cy = D(2)+r4*sin(phi0+dp*i);coords = [Bx By Cx Cy];%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [coords] = bushing(r,x0,y0,ninc,theta)% This function determines the coordinates of a series of points defining% the outside of a bushing.  The radius of the pin is r.  The pin is not% computed.  It should be determined using the function "circle".% The input values are:%r       = radius of circle%x0      = x coordinate of center of circle%y0      = y coordinate of center of circle%ninc    = number of increments into which the semicircle is divided%angle 	 = rotation angle relative to the horizontal x axis (degrees)% The results are returned in the vector "coords".  The answers are% stored in values according to the following:%coords (i,1) = x coordinates of bushing%coords (i,2) = y coordinates of bushing% The number of points stored is npoints where npoints = ninc+16% find the coordinates of the points.npoints=ninc+16;inc=pi/ninc;i=0;tr=3*r;fact=pi/180;thetar=fact*theta;c=cos(fact*45);cr=r*c;p=r*(6-c)/3;tp=2*p;delta=(6*r-cr)/3;% define the base firsti=i+1;xtemp(i)=-tr+cr;ytemp(i)=-tr-cr;i=i+1;xtemp(i)=-tr;ytemp(i)=-tr;% find the dash coordinates starting from the left endfor j=1:1:3	i=i+1;	xtemp(i)=xtemp(i-1)+delta;	ytemp(i)=ytemp(i-1);	i=i+1;	xtemp(i)=xtemp(i-1)+cr;	ytemp(i)=ytemp(i-1)-cr;	i=i+1;	xtemp(i)=xtemp(i-2);	ytemp(i)=ytemp(i-2);end% find the coordinates of the end parti=i+1;xtemp(i)=tr;ytemp(i)=-tr;% locate the right vertical linei=i+1;xtemp(i)=2*r;ytemp(i)=-tr;i=i+1;xtemp(i)=2*r;ytemp(i)=0;% locate the semicirclefor j=0:inc:pi	i=i+1;	xtemp(i)=2*r*cos(j);	ytemp(i)=2*r*sin(j);end% locate the left vertical linei=i+1;xtemp(i)=-2*r;ytemp(i)=-tr;% rotate coordinates, translate by (x0, y0) and store coordinates in "coords"c=cos(thetar);s=sin(thetar);for j=1:1:npoints	coords(j,1)=x0+xtemp(j)*c-ytemp(j)*s;	coords(j,2)=y0+xtemp(j)*s+ytemp(j)*c;end
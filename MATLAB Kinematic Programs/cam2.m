function cam2(selector, varargin)% % Cam design program% Michael Stevens% modified: 04/14/02% Variablespersistent cam2_fig;persistent seg_column;persistent beta_column;persistent start_column;persistent end_column;persistent motion_column;persistent deflection_column;persistent from_column;persistent to_column;persistent segs;persistent base_rad;persistent offset;persistent fol_rad;persistent piv_dist;persistent fol_len;persistent type;persistent motion_button;persistent rownum;persistent beta;persistent thetastart;persistent thetaend;persistent motion;persistent deflection;persistent heightstart;persistent heightend;persistent plot_curves;persistent pos_axes;persistent vel_axes;persistent acc_axes;persistent jerk_axes;persistent f;persistent fd;persistent fdd;persistent fddd;persistent camangle;persistent defl_text;persistent seg_data_text;persistent cam2_title;persistent frame2;persistent text2;persistent text3;persistent text4;persistent text5;persistent text6;persistent text16;persistent text17;persistent text18;persistent text19;persistent frame3;persistent motion_title;persistent edit_profile_button;persistent animation_button;persistent xf;persistent x1;persistent yf;persistent y1;persistent position1;persistent position2;persistent position3;persistent velocity1;persistent velocity2;persistent velocity3;persistent acceleration1;persistent acceleration2;persistent acceleration3;persistent jerk1;persistent jerk2;persistent jerk3;persistent animate_title;persistent ani_axes;persistent cam_profile;persistent cam_center;persistent animate_button;persistent follower;persistent ani;persistent phi0;persistent xcam;persistent ycam;persistent xfol;persistent yfol;persistent column1;persistent column2;persistent xval;persistent yval;persistent xnode;persistent ynode;persistent node;persistent next_button;persistent nnum;persistent nodeindex;persistent output_button;persistent minimize_button;persistent seg_button;persistent segnum;persistent speed;persistent speed_text;persistent speed_plus;persistent speed_minus;persistent speed_button;persistent cam_axes;persistent cam_pin;persistent cam_bush;persistent fol_bush;persistent draw_button;persistent opt_meth_text;persistent opt_meth_menu;persistent opt_var_text;persistent opt_var;persistent rot_text;persistent rot_cw;persistent rot_ccw;persistent reset_curves_button;persistent close_button;%*************************************************************************persistent curvature_button;%*************************************************************************if  nargin == 0,    selector = 'init';endswitch selectorcase 'init' %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The Main Figure of Cam Design Program%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ScreenSize = get(0,'ScreenSize');sx = 880;sy = 600;FigPos = [80 ScreenSize(4)-sy-95 sx sy];cam2_fig = figure('Units','pixels', 'Color',[0.8 0.8 0.8], 'Name',...    'Cam Design Program', 'NumberTitle','off', 'Position',FigPos,...    'DeleteFcn','cam2(''close'')','Tag','MainFig');cam2_title=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.1 0.955 0.7 0.044],...    'String','Enter cam and follower data, and displacement program.',...    'FontSize',14.0);frame2=uicontrol('Parent',cam2_fig,'Units','normalized','Style','frame', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.023 0.30 0.175 0.5]);frame3=uicontrol('Parent',cam2_fig,'Units','normalized','Style','frame', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.22 0.54 0.716 0.4]);text4=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.048 0.715 0.141 0.03],...    'String','No. Sgmts. (max 10)','FontSize',10.0);text5=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.048 0.630 0.141 0.03],...    'String','Cam Base circle radius','FontSize',10.0);text6=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.048 0.513 0.124 0.058],...    'String','Follower','FontSize',12.0);seg_data_text=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.268 0.884 0.176 0.034],...    'String','Segment Data','FontSize',12.0);seg_column=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.233 0.827 0.074 0.031],...    'String','Seg #','FontSize',8.0);beta_column=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.307 0.827 0.074 0.031],...    'String','Beta','FontSize',8.0);start_column=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.381 0.827 0.074 0.031],...    'String','Start','FontSize',8.0);end_column=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.455 0.827 0.074 0.031],...    'String','End','FontSize',8.0);motion_column=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.529 0.827 0.148 0.031],...    'String','Motion','FontSize',8.0);deflection_column=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.677 0.827 0.074 0.031],...    'String','Deflection','FontSize',8.0);from_column=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.751 0.827 0.074 0.031],...    'String','From','FontSize',8.0);to_column=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.825 0.827 0.074 0.031],...    'String','To','FontSize',8.0);defl_text=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.677 0.855 0.144 0.04],...    'String','Deflection','FontSize',8.0);text16=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.065 0.46 0.06 0.03],...    'String','offset:','FontSize',8.0);text17=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.065 0.425 0.06 0.03],...    'String','radius:','FontSize',8.0);text18=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.065 0.39 0.06 0.03],...    'String','pivot dist.:','FontSize',8.0);text19=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.065 0.355 0.06 0.03],...    'String','fol. len.:','FontSize',8.0);rot_text=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',[0.06 0.875 0.1 0.031],...    'String','Cam Rotation:','FontSize',10.0);rot_cw=uicontrol('Parent',cam2_fig,'Units','normalized','Style','radiobutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',[0.05 0.84 0.055 0.031],...    'String','CW','FontSize',10.0,'value',1,'callback','cam2(''rotation_cw'')');rot_ccw=uicontrol('Parent',cam2_fig,'Units','normalized','Style','radiobutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',[0.1 0.84 0.065 0.031],...    'String','CCW','FontSize',10.0,'value',0,'callback','cam2(''rotation_ccw'')');segs=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...    'backgroundcolor', [1 1 1], 'Position',[0.073 0.684 0.075 0.031],...    'String','5','callback','cam2(''segments'')');base_rad=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...    'backgroundcolor', [1 1 1], 'Position',[0.073 0.60 0.075 0.031],...    'String','2','callback','');offset=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...    'backgroundcolor', [1 1 1], 'Position',[0.125 0.46 0.04 0.03],...    'String','0','callback','');fol_rad=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...    'backgroundcolor', [1 1 1], 'Position',[0.125 0.425 0.04 0.03],...    'String','1','callback','');piv_dist=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...    'backgroundcolor', [1 1 1], 'Position',[0.125 0.39 0.04 0.03],...    'String','4','callback','');fol_len=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...    'backgroundcolor', [1 1 1], 'Position',[0.125 0.355 0.04 0.03],...    'String','5','callback','');type=uicontrol('Parent',cam2_fig,'Units','normalized','Style','popupmenu',...    'BackgroundColor',[0.8 0.8 0.8],'Position',[0.053 0.505 0.13 0.035],...    'value',1.0,'String',['Radial, Flat       ';'Oscillating, Flat  ';...    'Radial, Roller     ';'Oscillating, Roller';],'FontSize',8.0,'callback','cam2(''fol_params'')');motion_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',[0.75 0.3 0.15 0.04],...    'String','Motion Plots','fontsize',10.0,'callback','cam2(''motion_plots'')');%*****************************************************************************************************curvature_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',[0.74 0.25 0.17 0.04],...    'String','Curvature and pressure angle','fontsize',8,...    'callback','cam2(''Curvature and pressure angle'')');%*****************************************************************************************************for i = 1:10    rownum(i)=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text',...        'BackgroundColor',[0.8 0.8 0.8],...        'Position',get(seg_column,'position')-[0 .035*i 0 0],...        'String',num2str(i),'FontSize',8.0,'visible','off');    beta(i)=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...        'BackgroundColor',[1 1 1],...        'Position',get(beta_column,'position')-[0 .035*i 0 0],...        'String','','FontSize',8.0,'callback','cam2(''beta_angle'')','visible','off');    thetastart(i)=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...        'BackgroundColor',[0.9 0.9 0.9],'callback','cam2(''start_angle'')',...        'Position',get(start_column,'position')-[0 .035*i 0 0],...        'String','','FontSize',8.0,'visible','off');    thetaend(i)=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...        'BackgroundColor',[0.9 0.9 0.9],'callback','cam2(''end_angle'')',...        'Position',get(end_column,'position')-[0 .035*i 0 0],...        'String','','FontSize',8.0,'visible','off');    motion(i)=uicontrol('Parent',cam2_fig,'Units','normalized','Style','popupmenu',...        'BackgroundColor',[0.8 0.8 0.8],'value',1.0,...        'Position',get(motion_column,'position')-[0 .035*i 0 0],...        'String',['Dwell     ';'Uniform   ';'Harmonic  ';'Cycloidal ';'Polynomial';],...        'callback','cam2(''dwell_motion'')','FontSize',8.0,'visible','off');    deflection(i)=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...        'BackgroundColor',[1 1 1],...        'Position',get(deflection_column,'position')-[0 .035*i 0 0],...        'String','','FontSize',8.0,'callback','cam2(''deflections'')','visible','off');    heightstart(i)=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...        'BackgroundColor',[0.9 0.9 0.9],'callback','cam2(''from_height'')',...        'Position',get(from_column,'position')-[0 .035*i 0 0],...        'String','','FontSize',8.0,'visible','off');    heightend(i)=uicontrol('Parent',cam2_fig,'Units','normalized','Style','edit',...        'BackgroundColor',[0.9 0.9 0.9],'callback','cam2(''to_height'')',...        'Position',get(to_column,'position')-[0 .035*i 0 0],...        'String','','FontSize',8.0,'visible','off');end% Motion Plots UIcontrolsmotion_title=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.2 0.94 0.7 0.044],...    'String','Follower position, veloctity, acceleration and jerk.',...    'FontSize',14.0,'visible','off');pos_axes=axes('Parent',cam2_fig,'Units','normalized','FontSize',8.0, ...        'Position',[0.3 0.755 0.5 0.175],'XLim',[0 360],'YLim',[-1 1],'visible','off');vel_axes=axes('Parent',cam2_fig,'Units','normalized','FontSize',8.0, ...        'Position',[0.3 0.52 0.5 0.175],'XLim',[0 360],'YLim',[-1 1],'visible','off');acc_axes=axes('Parent',cam2_fig,'Units','normalized','FontSize',8.0, ...        'Position',[0.3 0.285 0.5 0.175],'XLim',[0 360],'YLim',[-1 1],'visible','off');jerk_axes=axes('Parent',cam2_fig,'Units','normalized','FontSize',8.0, ...        'Position',[0.3 0.05 0.5 0.175],'XLim',[0 360],'YLim',[-1 1],'visible','off');edit_profile_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',[0.85 0.9 0.1 0.04],...    'String','Return','fontsize',8.0,'callback','cam2(''edit_profile'')','visible','off');animation_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',[0.85 0.8 0.1 0.04],...    'String','Animate','fontsize',8.0,'callback','cam2(''animation'')','visible','off');output_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',[0.85 0.70 0.14 0.04],...    'String','Output Cam Profile','fontsize',8.0,'callback','cam2(''output_profile'')','visible','off');% Cam drawing objects:cam_axes=axes('Parent',cam2_fig,'Units','normalized','FontSize',8.0,...        'Position',[0.35 0.05 0.3 0.44]);draw_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',[.175 0.15 0.15 0.04],...    'String','Refresh Drawing','fontsize',8.0,'callback','cla; cam2(''draw_cam'');','visible','on');% Close buttonclose_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.85 0.85 0.85], 'Position',[.9 0.05 0.075 0.04],...    'String','Close','fontsize',10.0,'callback','close(gcbf);','visible','on');  %<-------------'visible','off'------cam2('segments');cam2('init_segs');cam2('fol_params');cam2('draw_cam');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'segments'    segments = str2num(get(segs,'string'));    if isnan(segments)        segments = 1;        set(segs,'string','1');    elseif segments <= 0        segments = 1;        set(segs,'string','1');    elseif segments >=10        segments = 10;        set(segs,'string','10');    end    for i = 1:segments        set(rownum(i),'visible','on');        set(beta(i),'visible','on');        set(thetastart(i),'visible','on');        set(thetaend(i),'visible','on');        set(motion(i),'visible','on');        set(deflection(i),'visible','on');        set(heightstart(i),'visible','on');        set(heightend(i),'visible','on');       end    if segments < 10        for i = segments+1:10            set(rownum(i),'visible','off');            set(beta(i),'string','0','visible','off');            set(thetastart(i),'string','0','visible','off');            set(thetaend(i),'string','0','visible','off');            set(motion(i),'visible','off');            set(deflection(i),'string','0','visible','off');            set(heightstart(i),'string','0','visible','off');            set(heightend(i),'string','0','visible','off');                     end    end        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'init_segs'    segments = str2num(get(segs,'string'));    for i = 1:segments        set(beta(i),'string','0');        set(thetastart(i),'string','0');        set(thetaend(i),'string','0');        set(deflection(i),'string','0');        set(heightstart(i),'string','0');        set(heightend(i),'string','0');       end            set(beta(1),'string','90'); set(beta(2),'string','90');    set(beta(3),'string','90'); set(beta(4),'string','90');    set(motion(1),'value',5.0); set(motion(2),'value',1.0);    set(motion(3),'value',5.0); set(motion(4),'value',1.0);    set(deflection(1),'string','1'); set(deflection(2),'string','0');    set(deflection(3),'string','-1'); set(deflection(4),'string','0');    cam2('beta_angle'); cam2('deflections');        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'fol_params'        if get(type,'value') == 1.0        set(offset,'visible','off','string','0');        set(fol_rad,'visible','off');        set(piv_dist,'visible','off');        set(fol_len,'visible','off');    elseif get(type,'value') == 2.0        set(offset,'visible','on','backgroundcolor',[1 1 1]);        set(fol_rad,'visible','off');        set(piv_dist,'visible','on','backgroundcolor',[1 1 1]);        set(fol_len,'visible','on','backgroundcolor',[1 1 1]);    elseif get(type,'value') == 3.0        set(offset,'visible','on','backgroundcolor',[1 1 1]);        set(fol_rad,'visible','on','backgroundcolor',[1 1 1]);        set(piv_dist,'visible','off');        set(fol_len,'visible','off');    else        set(offset,'visible','off');        set(fol_rad,'visible','on','backgroundcolor',[1 1 1]);        set(piv_dist,'visible','on','backgroundcolor',[1 1 1]);        set(fol_len,'visible','on','backgroundcolor',[1 1 1]);    end            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    case 'beta_angle'    % Read the number of segments    numseg = str2num(get(segs,'string'));        % Read the Beta, Start, and End Angle values    for i=1:10        b(i)=str2num(get(beta(i),'string'));        ts(i)=str2num(get(thetastart(i),'string'));        te(i)=str2num(get(thetaend(i),'string'));    end        % Calculate the Beta, Start, and End Angle values    te(1)=ts(1)+b(1);    if te(1)>360        te(1)=360;        b(1)=360;    end    for i=2:10        ts(i)=te(i-1);        te(i)=ts(i)+b(i);        if te(i)>360            te(i)=360;            b(i)=360-ts(i);        end    end        % Force the final angle to 360    if te(numseg) < 360        go=1;        i=0;        while go == 1            i=i+1;            if b(i) == 0                b(i)=360-ts(i);                te(i)=360;                go=0;            end            if i==numseg                b(i)=360-ts(i);                te(i)=360;                go=0;             end        end; clear i;    end        % Set the Beta, Start, and End Angle values    for i=1:10        set(beta(i),'string',num2str(b(i)));        set(thetastart(i),'string',num2str(ts(i)));        set(thetaend(i),'string',num2str(te(i)));    end    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    case 'start_angle'    % Read the number of segments    numseg = str2num(get(segs,'string'));        % Read the Beta, Start, and End Angle values    for i=1:10        b(i)=str2num(get(beta(i),'string'));        ts(i)=str2num(get(thetastart(i),'string'));        te(i)=str2num(get(thetaend(i),'string'));    end        % Calculate the Beta, Start, and End Angle values    ts(1)=0;    for i=2:numseg        if ts(i)>=360            ts(i:numseg)=360;            te(i:numseg)=360;        end        te(i-1)=ts(i);        b(i-1)=te(i-1)-ts(i-1);    end        % Force the final angle to 360    if te(numseg) < 360        go=1;        i=0;        while go == 1            i=i+1;            if b(i) == 0                b(i)=360-ts(i);                te(i)=360;                go=0;            end            if i==numseg                b(i)=360-ts(i);                te(i)=360;                go=0;             end        end; clear i;    end        % Set the Beta, Start, and End Angle values    for i=1:10        set(beta(i),'string',num2str(b(i)));        set(thetastart(i),'string',num2str(ts(i)));        set(thetaend(i),'string',num2str(te(i)));    end        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    case 'end_angle'    % Read the number of segments    numseg = str2num(get(segs,'string'));        % Read the Beta, Start, and End Angle values    for i=1:10        b(i)=str2num(get(beta(i),'string'));        ts(i)=str2num(get(thetastart(i),'string'));        te(i)=str2num(get(thetaend(i),'string'));    end        % Calculate the Beta, Start, and End Angle values    b(1)=te(1)-ts(1);    if te(1)>360        te(1)=360;        b(1)=360;    end    for i=2:numseg        ts(i)=te(i-1);        b(i)=te(i)-ts(i);        if te(i)>360            te(i)=360;            b(i)=360-ts(i);        end    end        % Force the final angle to 360    if te(numseg) < 360        go=1;        i=0;        while go == 1            i=i+1;            if b(i) == 0                b(i)=360-ts(i);                te(i)=360;                go=0;            end            if i==numseg                b(i)=360-ts(i);                te(i)=360;                go=0;             end        end; clear i;    end        % Set the Beta, Start, and End Angle values    for i=1:10        set(beta(i),'string',num2str(b(i)));        set(thetastart(i),'string',num2str(ts(i)));        set(thetaend(i),'string',num2str(te(i)));    end        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    case 'deflections'    % Calculate number of active segments    go=1;    i=0;    while go == 1        i=i+1;        if str2num(get(thetaend(i),'string')) == 360            numseg=i;            go = 0;        end        if i==10; go=0; end    end; clear i;        % Read Deflection, From, and To values    for i=1:10        d(i)=str2num(get(deflection(i),'string'));        hs(i)=str2num(get(heightstart(i),'string'));        he(i)=str2num(get(heightend(i),'string'));    end        % Calculate Deflection, From, and To values    he(1)=hs(1)+d(1);    for i=2:numseg        hs(i)=he(i-1);        he(i)=hs(i)+d(i);    end    d(numseg)=hs(1)-hs(numseg);    he(numseg)=hs(numseg)+d(numseg);        if numseg < 10        hs(numseg+1:10)=0;        he(numseg+1:10)=0;        d(numseg+1:10)=0;    end        % Set the Deflection, From, and To values    for i=1:10        set(deflection(i),'string',num2str(d(i)));        set(heightstart(i),'string',num2str(hs(i)));        set(heightend(i),'string',num2str(he(i)));    end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'to_height'        % Calculate number of active segments    go=1;    i=0;    while go == 1        i=i+1;        if str2num(get(thetaend(i),'string')) == 360            numseg=i;            go = 0;        end        if i==10; go=0; end    end; clear i;        % Read Deflection, From, and To values    for i=1:10        d(i)=str2num(get(deflection(i),'string'));        hs(i)=str2num(get(heightstart(i),'string'));        he(i)=str2num(get(heightend(i),'string'));    end        % Calculate Deflection, From, and To values    d(1)=he(1)-hs(1);    for i=2:numseg        hs(i)=he(i-1);        d(i)=he(i)-hs(i);    end    he(numseg)=hs(1);    d(numseg)=he(numseg)-hs(numseg);        if numseg < 10        hs(numseg+1:10)=0;        he(numseg+1:10)=0;        d(numseg+1:10)=0;    end        % Set the Deflection, From, and To values    for i=1:10        set(deflection(i),'string',num2str(d(i)));        set(heightstart(i),'string',num2str(hs(i)));        set(heightend(i),'string',num2str(he(i)));    end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'from_height'        % Calculate number of active segments    go=1;    i=0;    while go == 1        i=i+1;        if str2num(get(thetaend(i),'string')) == 360            numseg=i;            go = 0;        end        if i==10; go=0; end    end; clear i;        % Read Deflection, From, and To values    for i=1:10        d(i)=str2num(get(deflection(i),'string'));        hs(i)=str2num(get(heightstart(i),'string'));        he(i)=str2num(get(heightend(i),'string'));    end        % Calculate Deflection, From, and To values    hs(1)=0;    for i=2:numseg        he(i-1)=hs(i);        d(i-1)=he(i-1)-hs(i-1);    end    he(numseg)=hs(1);    d(numseg)=he(numseg)-hs(numseg);        if numseg < 10        hs(numseg+1:10)=0;        he(numseg+1:10)=0;        d(numseg+1:10)=0;    end        % Set the Deflection, From, and To values    for i=1:10        set(deflection(i),'string',num2str(d(i)));        set(heightstart(i),'string',num2str(hs(i)));        set(heightend(i),'string',num2str(he(i)));    end       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'dwell_motion'    % Read the number of segments    numseg = str2num(get(segs,'string'));        for i=1:numseg        if get(motion(i),'value') == 1.0            set(deflection(i),'string',0);        end    end    cam2('deflections');       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'rotation_cw'    if get(rot_cw,'value') == 1        set(rot_ccw,'value',0);    elseif get(rot_cw,'value') == 0        set(rot_ccw,'value',1);    end                case 'rotation_ccw'    if get(rot_ccw,'value') == 1        set(rot_cw,'value',0);    elseif get(rot_ccw,'value') == 0        set(rot_cw,'value',1);    end    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    case 'calc_motion'% Calculate angle increment and cam beta_anglen=360*2; % Number of points to calculatedt = 360/n; % Delta theta% Get user data:segments = str2num(get(segs,'string'));for i=1:segments    b(i)=str2num(get(beta(i),'string'));    ts(i)=str2num(get(thetastart(i),'string'));    te(i)=str2num(get(thetaend(i),'string'));    mot(i)=get(motion(i),'value');    d(i)=str2num(get(deflection(i),'string'));    hs(i)=str2num(get(heightstart(i),'string'));    he(i)=str2num(get(heightend(i),'string'));end% Compute cam profile for segments in the following order:%   first dwell sections, second uniform sections, third%   harmonic sections, last polynomial sections.% This is becsause polynomial sections will need the velocity%   and accelerations boundary conditions in addition to position.f(1:n+1)=0;fd(1:n+1)=0;fdd(1:n+1)=0;fddd(1:n+1)=0;camangle(1:n+1)=0;for i=1:segments    for j=1:b(i)/dt+1        num=te(i)/dt-b(i)/dt+j;        camangle(num)=sum(b(1:i))-b(i)+j*dt-dt;        if mot(i)==1.0            f(num)=hs(i);            fd(num)=0;            fdd(num)=0;            fddd(num)=0;        elseif mot(i)==2.0            ff=uniform(camangle(num),hs(i),he(i),ts(i),te(i));            f(num)=ff(1);            fd(num)=ff(2);            fdd(num)=ff(3);            fddd(num)=ff(4);        elseif mot(i)==3.0            ff=harmonic(camangle(num),hs(i),he(i),ts(i),te(i));            f(num)=ff(1);            fd(num)=ff(2);            fdd(num)=ff(3);            fddd(num)=ff(4);        elseif mot(i)==4.0            ff=cycloidal(camangle(num),hs(i),he(i),ts(i),te(i));            f(num)=ff(1);            fd(num)=ff(2);            fdd(num)=ff(3);            fddd(num)=ff(4);        end    endendfor i=1:segments    for j=1:b(i)/dt+1        num=te(i)/dt-b(i)/dt+j;        if mot(i)==5.0%             ff=poly5(camangle(num),hs(i),he(i),fd(ts(i)/dt+1),fd(te(i)/dt+1),...%                 fdd(ts(i)/dt+1),fdd(te(i)/dt+1),fddd(ts(i)/dt+1),fddd(te(i)/dt+1),ts(i),te(i));            ff=poly7(camangle(num),hs(i),he(i),fd(ts(i)/dt+1),fd(te(i)/dt+1),...                fdd(ts(i)/dt+1),fdd(te(i)/dt+1),fddd(ts(i)/dt+1),fddd(te(i)/dt+1),ts(i),te(i));            f(num)=ff(1);            fd(num)=ff(2);            fdd(num)=ff(3);            fddd(num)=ff(4);        end    endend%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'calc_profile'% Clear and reset x1, y1x1=[];y1=[];% Determine follower type and calculate cam profileif get(type,'value') == 4.0            [xf,yf,x1,y1]=orf_analysis(f,camangle,str2num(get(fol_rad,'string')),...        str2num(get(piv_dist,'string')),str2num(get(fol_len,'string')),...        str2num(get(base_rad,'string')));elseif get(type,'value') == 3.0    [xf,yf,x1,y1]=rrf_analysis(f,camangle,str2num(get(fol_rad,'string')),...        str2num(get(base_rad,'string')),str2num(get(offset,'string')));elseif get(type,'value') == 1.0    [x1,y1,len,rb]=rff_analysis(f,fd,fdd,camangle,str2num(get(base_rad,'string')));    xf=x1;    yf=y1;%     set(base_rad,'string',num2str(rb));%     set(fol_len,'string',num2str(len));elseif get(type,'value') == 2.0    [x1,y1,r1,phi0] = off_analysis(f,camangle,str2num(get(base_rad,'string')),...        str2num(get(piv_dist,'string')),str2num(get(offset,'string')));%     set(piv_dist,'string',num2str(r1));    xf=x1;    yf=y1;end% Reorder the prime points in the order of increasing angle% if cam rotation direction is CCW.if get(rot_ccw,'value')==1    angfolli=atan2(yf(1), xf(1));    angcami=atan2(y1(1), x1(1));	for i=1:1:length(x1)		j=length(x1)-i+1;		rfollower=sqrt(xf(j)^2+yf(j)^2);		angfoll=atan2(yf(j), xf(j));		xftmp(i)=rfollower*cos(2*angfolli-angfoll);		yftmp(i)=rfollower*sin(2*angfolli-angfoll);		rcam=sqrt(x1(j)^2+y1(j)^2);		angcam=atan2(y1(j), x1(j));		x1tmp(i)=rcam*cos(2*angcami-angcam);		y1tmp(i)=rcam*sin(2*angcami-angcam);	end	for i=1:1:length(x1)		xf(i)=xftmp(i);		yf(i)=yftmp(i);        x1(i)=x1tmp(i);        y1(i)=y1tmp(i);	end	end    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'draw_cam'    axes(cam_axes);    cam_profile=animatedline('linewidth',2,'color','b');	cam_pin=line('xdata',[],'ydata',[],'linewidth',2,'color','k');	cam_bush=line('xdata',[],'ydata',[],'linewidth',2,'color','k');	follower=animatedline('linewidth',2,'color','g');	fol_bush=line('xdata',[],'ydata',[],'linewidth',2,'color','k');    cam2('calc_motion');    cam2('calc_profile');        % Draw the cam    addpoints(cam_profile,[x1 0],[y1 0]);        % Draw the pin    coords=circle2(str2num(get(base_rad,'string'))/10,0,0,10);    xpin1=coords(:,1);    ypin1=coords(:,2);    set(cam_pin,'xdata',[xpin1],'ydata',[ypin1]);        % Draw the bushing	coords = bushing(str2num(get(base_rad,'string'))/10,0,0,10,0);	xbush1 = coords(:,1);	ybush1 = coords(:,2);	set(cam_bush,'xdata',xbush1,'ydata',ybush1);        % Draw the follower	if get(type,'value') == 1.0        [xfol,yfol]=rff_pos(x1,y1,xf,yf,str2num(get(offset,'string')),camangle);	elseif get(type,'value') == 2.0        [xfol,yfol] = off_pos(f(1),str2num(get(piv_dist,'string')),...            str2num(get(fol_len,'string')),str2num(get(offset,'string')),phi0);	elseif get(type,'value') == 3.0        [xfol,yfol]=rrf_pos(xf(1),yf(1),f(1),str2num(get(fol_rad,'string')),...            str2num(get(offset,'string')),str2num(get(base_rad,'string')));	elseif get(type,'value') == 4.0        [xfol,yfol]=orf_pos(xf(1),yf(1),f(1),str2num(get(fol_rad,'string')),...            str2num(get(piv_dist,'string')),str2num(get(fol_len,'string')),str2num(get(base_rad,'string')));	end	addpoints(follower,xfol,yfol);		% Draw the follower bushing for oscillating followers	if get(type,'value') == 2.0        coords = bushing(str2num(get(base_rad,'string'))/10,str2num(get(piv_dist,'string')),0,10,0);        xbush2 = coords(:,1);        ybush2 = coords(:,2);        set(fol_bush,'xdata',xbush2,'ydata',ybush2);        fol_pin=line('xdata',[str2num(get(piv_dist,'string'))],'ydata',[0],...            'linewidth',2,'marker','o','markerSize',10,'color','k');	elseif get(type,'value') == 4.0        coords = bushing(str2num(get(base_rad,'string'))/10,str2num(get(piv_dist,'string')),0,10,0);        xbush2 = coords(:,1);        ybush2 = coords(:,2);        set(fol_bush,'xdata',xbush2,'ydata',ybush2);        fol_pin=line('xdata',[str2num(get(piv_dist,'string'))],'ydata',[0],...            'linewidth',2,'marker','o','markerSize',10,'color','k');	end    % Draw the follower bushing for translating followers% 	if get(type,'value') == 1.0%         coords = linbush([max(r)+0.05],[-0.1],[max(r)+1.5],[-0.1]);%         xbush2 = coords(:,1);%         ybush2 = coords(:,2);%         set(fol_bush,'xdata',xbush2,'ydata',ybush2);% 	elseif get(type,'value') == 3.0%         coords = linbush([2*str2num(get(fol_rad,'string'))+max(r)+0.05],[-0.1],...%             [2*str2num(get(fol_rad,'string'))+max(r)+1.5],[-0.1]);%         xbush2 = coords(:,1);%         ybush2 = coords(:,2);%         set(fol_bush,'xdata',xbush2,'ydata',ybush2);    % 	end        % Set window limits    xlim=1.1*max([abs(x1),abs(xfol)]);    ylim=1.1*max([abs(y1),abs(yfol)]);    lim=max([xlim ylim]);    set(cam_axes,'xlim',[-lim lim],'ylim',[-lim lim]);        grid;        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'motion_plots'% Clear the  axesaxes(cam_axes); cla;% Change the visible uicontrolsset(cam_axes,'visible','off');set(draw_button,'visible','off');set(cam2_title,'visible','off');set(frame3,'visible','off');set(seg_data_text,'visible','off');set(defl_text,'visible','off');set(seg_column,'visible','off');set(beta_column,'visible','off');set(start_column,'visible','off');set(end_column,'visible','off');set(motion_column,'visible','off');set(deflection_column,'visible','off');set(from_column,'visible','off');set(to_column,'visible','off');set(motion_button,'visible','off');for i = 1:10    set(rownum(i),'visible','off');    set(beta(i),'visible','off');    set(thetastart(i),'visible','off');    set(thetaend(i),'visible','off');    set(motion(i),'visible','off');    set(deflection(i),'visible','off');    set(heightstart(i),'visible','off');    set(heightend(i),'visible','off');             endset(frame2,'visible','off');set(text2,'visible','off');set(text3,'visible','off');set(text4,'visible','off');set(text5,'visible','off');set(text6,'visible','off');set(text16,'visible','off');set(text17,'visible','off');set(text18,'visible','off');set(text19,'visible','off');set(segs,'visible','off');set(base_rad,'visible','off');set(offset,'visible','off');set(fol_rad,'visible','off');set(piv_dist,'visible','off');set(fol_len,'visible','off');set(type,'visible','off');set(rot_text,'visible','off');set(rot_cw,'visible','off');set(rot_ccw,'visible','off');set(close_button, 'visible','off');  %<------------------------------------- this line was not existed ------------------%set(animate_title,'visible','off');%set(ani_axes,'visible','off');%set(animate_button,'visible','off');set(motion_title,'visible','on');set(pos_axes,'visible','on','position',[0.1 0.755 0.5 0.175]);set(vel_axes,'visible','on','position',[0.1 0.52 0.5 0.175]);set(acc_axes,'visible','on','position',[0.1 0.285 0.5 0.175]);set(jerk_axes,'visible','on','position',[0.1 0.05 0.5 0.175]);set(edit_profile_button,'visible','on');set(animation_button,'visible','on');set(output_button,'visible','on');% Callback to calculate the position, velocity, acceleration, and jerkcam2('calc_motion');segnum=1;cam2('plot_curves');cam2('acc_controls');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'motion_plots2'        % For the 'Motion Plots' button in animation window% Clear the animation axes%axes(ani_axes); cla;% Change the visible uicontrolsset(cam2_title,'visible','off');set(frame3,'visible','off');set(seg_data_text,'visible','off');set(defl_text,'visible','off');set(seg_column,'visible','off');set(beta_column,'visible','off');set(start_column,'visible','off');set(end_column,'visible','off');set(motion_column,'visible','off');set(deflection_column,'visible','off');set(from_column,'visible','off');set(to_column,'visible','off');set(motion_button,'visible','off');for i = 1:10    set(rownum(i),'visible','off');    set(beta(i),'visible','off');    set(thetastart(i),'visible','off');    set(thetaend(i),'visible','off');    set(motion(i),'visible','off');    set(deflection(i),'visible','off');    set(heightstart(i),'visible','off');    set(heightend(i),'visible','off');             endset(frame2,'visible','off');set(text2,'visible','off');set(text3,'visible','off');set(text4,'visible','off');set(text5,'visible','off');set(text6,'visible','off');set(text16,'visible','off');set(text17,'visible','off');set(text18,'visible','off');set(text19,'visible','off');set(segs,'visible','off');set(base_rad,'visible','off');set(offset,'visible','off');set(fol_rad,'visible','off');set(piv_dist,'visible','off');set(fol_len,'visible','off');set(type,'visible','off');set(column1,'visible','off');set(column2,'visible','off');set(xval,'visible','off');set(yval,'visible','off');set(next_button,'visible','off');set(animate_title,'visible','off');set(ani_axes,'visible','off');set(animate_button,'visible','off');set(close_button, 'visible','off');  %<------------------------------------- this line was not existed ------------------set(motion_title,'visible','on');set(pos_axes,'visible','on','position',[0.1 0.755 0.5 0.175]);set(vel_axes,'visible','on','position',[0.1 0.52 0.5 0.175]);set(acc_axes,'visible','on','position',[0.1 0.285 0.5 0.175]);set(jerk_axes,'visible','on','position',[0.1 0.05 0.5 0.175]);set(edit_profile_button,'visible','on');set(animation_button,'visible','on');set(output_button,'visible','on');set(speed_text,'visible','off');set(speed_plus,'visible','off');set(speed_minus,'visible','off');set(speed_button,'visible','off');segnum=1;cam2('plot_curves');cam2('acc_controls');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*****************************************************************************************************case 'Curvature and pressure angle'        choice = get(type,'value');    switch choice    case 1        length_data = [str2num(get(base_rad,'string'))  2   0  2.6 1.6  0   0   0   0 ];        direction = '+';        ainc = 5;        %******************************************************************************************        segments = str2num(get(segs,'string'));        for i=1:segments            b(i)=str2num(get(beta(i),'string'));            ts(i)=str2num(get(thetastart(i),'string'));            te(i)=str2num(get(thetaend(i),'string'));            mot(i)=get(motion(i),'value');            deflect(i)=str2num(get(deflection(i),'string'));            hs(i)=str2num(get(heightstart(i),'string'));            he(i)=str2num(get(heightend(i),'string'));        end        user_data = [b; ts; te; mot; deflect; hs; he];        eval('cam2_ff_cam_ana(''initialize'',length_data,direction,ainc,segments,user_data);');        %******************************************************************************************         set(type,'userdata',1);        case 2        length_data = [str2num(get(base_rad,'string'))  0   15   0   0 ...            str2num(get(piv_dist,'string'))   0   str2num(get(fol_len,'string'))  str2num(get(offset,'string'))];        direction = '+';        ainc = 5;        %******************************************************************************************        segments = str2num(get(segs,'string'));        for i=1:segments            b(i)=str2num(get(beta(i),'string'));            ts(i)=str2num(get(thetastart(i),'string'));            te(i)=str2num(get(thetaend(i),'string'));            mot(i)=get(motion(i),'value');            deflect(i)=str2num(get(deflection(i),'string'));            hs(i)=str2num(get(heightstart(i),'string'));            he(i)=str2num(get(heightend(i),'string'));        end        user_data = [b; ts; te; mot; deflect; hs; he];        eval('cam2_off_cam_ana(''initialize'',length_data,direction,ainc,segments,user_data);');        %******************************************************************************************        set(type,'userdata',2);        case 3        length_data = [ str2num(get(base_rad,'string'))  2   0   0   0   0  ...            str2num(get(fol_rad,'string'))  0   str2num(get(offset,'string')) ];        direction = '+';        ainc = 5;        %******************************************************************************************        segments = str2num(get(segs,'string'));        for i=1:segments            b(i)=str2num(get(beta(i),'string'));            ts(i)=str2num(get(thetastart(i),'string'));            te(i)=str2num(get(thetaend(i),'string'));            mot(i)=get(motion(i),'value');            deflect(i)=str2num(get(deflection(i),'string'));            hs(i)=str2num(get(heightstart(i),'string'));            he(i)=str2num(get(heightend(i),'string'));        end        user_data = [b; ts; te; mot; deflect; hs; he];        eval('cam2_rf_cam_ana(''initialize'',length_data,direction,ainc,segments,user_data);');        %******************************************************************************************              set(type,'userdata',3);        case 4        length_data = [str2num(get(base_rad,'string'))  0  30   0   0   str2num(get(piv_dist,'string')) ...            str2num(get(fol_rad,'string'))  str2num(get(fol_len,'string')) 0 ];        direction = '+';        ainc = 5;        %******************************************************************************************        segments = str2num(get(segs,'string'));        for i=1:segments            b(i)=str2num(get(beta(i),'string'));            ts(i)=str2num(get(thetastart(i),'string'));            te(i)=str2num(get(thetaend(i),'string'));            mot(i)=get(motion(i),'value');            deflect(i)=str2num(get(deflection(i),'string'));            hs(i)=str2num(get(heightstart(i),'string'));            he(i)=str2num(get(heightend(i),'string'));        end        user_data = [b; ts; te; mot; deflect; hs; he];        eval('cam2_orf_cam_ana(''initialize'',length_data,direction,ainc,segments,user_data);');        %******************************************************************************************              set(type,'userdata',4);    end  case 'plot_curves'for i=1:length(camangle)    if camangle(i)==str2num(get(thetastart(segnum),'string'))        num(1)=i;    elseif camangle(i)==str2num(get(thetaend(segnum),'string'))        num(2)=i;    endendnum(3)=length(camangle);    % Draw the position, velocity, acceleration and jerk curvesfmax=max(f);fmin=min(f);fdmax=max(fd);fdmin=min(fd);fddmax=max(fdd);fddmin=min(fdd);fdddmax=max(fddd);fdddmin=min(fddd);fn=max([abs(fmax), abs(fmin)]);fdn=max([abs(fdmax), abs(fdmin)]);fddn=max([abs(fddmax), abs(fddmin)]);fdddn=max([abs(fdddmax), abs(fdddmin)]);axes(pos_axes); % Make the position axes activecla; hold on;position1=line('xdata',[camangle(1:num(1))],'ydata',[f(1:num(1))],'linewidth',1,'color','b');position2=line('xdata',[camangle(num(1):num(2))],'ydata',[f(num(1):num(2))],'linewidth',1,'color','r');position3=line('xdata',[camangle(num(2):num(3))],'ydata',[f(num(2):num(3))],'linewidth',1,'color','b');set(gca,'XTick',[0 40 80 120 160 200 240 280 320 360]);set(gca,'xlim',[0 360],'ylim',[fmin*1.01 fmax*1.01]);xlabel('Cam Angle','color', 'k');ylabel('Follower Displacement','color', 'k');axes(vel_axes); % Make the velocity axes activecla;velocity1=line('xdata',[camangle(1:num(1))],'ydata',[fd(1:num(1))],'linewidth',1,'color','b');velocity2=line('xdata',[camangle(num(1):num(2))],'ydata',[fd(num(1):num(2))],'linewidth',1,'color','r');velocity3=line('xdata',[camangle(num(2):num(3))],'ydata',[fd(num(2):num(3))],'linewidth',1,'color','b');set(gca, 'XTick',[0 40 80 120 160 200 240 280 320 360]);set(gca,'xlim',[0 360],'ylim',[fdmin*1.01 fdmax*1.01]);xlabel('Cam Angle','color', 'k');ylabel('Follower Velocity','color', 'k');axes(acc_axes); cla;  % Make the acceleration axes activecla;acceleration1=line('xdata',[camangle(1:num(1))],'ydata',[fdd(1:num(1))],'linewidth',1,'color','b');acceleration2=line('xdata',[camangle(num(1):num(2))],'ydata',[fdd(num(1):num(2))],'linewidth',1,'color','r');acceleration3=line('xdata',[camangle(num(2):num(3))],'ydata',[fdd(num(2):num(3))],'linewidth',1,'color','b');set(gca, 'XTick',[0 40 80 120 160 200 240 280 320 360]);set(gca,'xlim',[0 360],'ylim',[fddmin*1.01 fddmax*1.01]);xlabel('Cam Angle','color', 'k');ylabel('Follower Acceleration','color', 'k');axes(jerk_axes); cla;  % Make the jerk axes activejerk1=line('xdata',[camangle(1:num(1))],'ydata',[fddd(1:num(1))],'linewidth',1,'color','b');jerk2=line('xdata',[camangle(num(1):num(2))],'ydata',[fddd(num(1):num(2))],'linewidth',1,'color','r');jerk3=line('xdata',[camangle(num(2):num(3))],'ydata',[fddd(num(2):num(3))],'linewidth',1,'color','b');set(gca, 'XTick',[0 40 80 120 160 200 240 280 320 360]);set(gca,'xlim',[0 360],'ylim',[fdddmin*1.01 fdddmax*1.01]);xlabel('Cam Angle','color', 'k');ylabel('Follower Jerk','color', 'k');% Acceleration Peak node:axes(acc_axes);i=1;xnode=0; ynode=0;for t=2:length(fdd)-1    if fdd(t)==0        % Skip    elseif fdd(t)>fdd(t-1)        if fdd(t)>fdd(t+1)            nodeindex(i)=t;            xnode(i)=camangle(t);            ynode(i)=fdd(t);            i=i+1;        end    elseif fdd(t)<fdd(t-1)        if fdd(t)<fdd(t+1)            nodeindex(i)=t;            xnode(i)=camangle(t);            ynode(i)=fdd(t);            i=i+1;        end    endendnnum=1; % Node numbernode=line('xdata',[],'ydata',[],'markersize',8,'color','b');set(node,'xdata',xnode(nnum),'ydata',ynode(nnum),'linestyle','none',...    'linewidth',2,'marker','o','markersize',6,'color','k');% % Plot figure for thesis:% figure;% subplot(4,1,1); plot(camangle,f,'k');% set(gca, 'XTick',[0 40 80 120 160 200 240 280 320 360]);% set(gca,'xlim',[0 360],'ylim',[fmin*1.01 fmax*1.01]);% ylabel('Position','color', 'k');% subplot(4,1,2); plot(camangle,fd,'k');% set(gca, 'XTick',[0 40 80 120 160 200 240 280 320 360]);% set(gca,'xlim',[0 360],'ylim',[fdmin*1.01 fdmax*1.01]);% ylabel('Velocity','color', 'k');% subplot(4,1,3); plot(camangle,fdd,'k');% set(gca, 'XTick',[0 40 80 120 160 200 240 280 320 360]);% set(gca,'xlim',[0 360],'ylim',[fddmin*1.01 fddmax*1.01]);% ylabel('Acceleration','color', 'k');% subplot(4,1,4); plot(camangle,fddd,'k');% set(gca, 'XTick',[0 40 80 120 160 200 240 280 320 360]);% set(gca,'xlim',[0 360],'ylim',[fdddmin*1.01 fdddmax*1.01]);% xlabel('Cam Angle','color', 'k');% ylabel('Jerk','color', 'k');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'acc_controls'% Acceleration Minimization Controls:column1=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.65 0.4 0.1 0.04],...    'String','Cam Angle','FontSize',10);column2=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.75 0.4 0.1 0.04],...    'String','Acceleration','FontSize',10);xval=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text',...    'BackgroundColor',[0.8 0.8 0.8],...    'Position',get(column1,'position')-[0 .035 0 0],...    'String',xnode(nnum),'FontSize',8.0);yval=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text',...    'BackgroundColor',[0.8 0.8 0.8],...    'Position',get(column2,'position')-[0 .035 0 0],...    'String',ynode(nnum),'FontSize',8.0,'callback','');next_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',get(column2,'position')-[-.1 .025 .02 0],...    'String','Next Peak','fontsize',10.0,'callback','cam2(''next_node'')');minimize_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',get(column2,'position')-[-.01 .09 .01 0],...    'String','Minimize','fontsize',10.0,'callback','cam2(''acc_minimize'')');seg_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.8 0.8 0.8], 'Position',get(column1,'position')-[0 .09 -.01 0],...    'String','Next Segment','fontsize',10.0,'callback','cam2(''next_seg'')');opt_meth_text=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.675 0.55 0.15 0.04],...    'String','Optimization Method:','FontSize',10);opt_meth_menu=uicontrol('Parent',cam2_fig,'Units','normalized','Style','popupmenu',...    'BackgroundColor',[1 1 1],'value',1.0,'Position',[0.675 0.51 0.15 0.04],...    'String',['Position Polynomial';'Acceleration Spline';],'callback','cam2(''opt_var_chg'')','FontSize',8.0);opt_var_text=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.825 0.55 0.15 0.04],...    'String','Polynomial Order:','FontSize',10);opt_var=uicontrol('Parent',cam2_fig,'Units','normalized','Style','popupmenu',...    'BackgroundColor',[1 1 1],'value',1.0,'Position',[0.85 0.51 0.055 0.04],...    'String',['  7';'  9';' 10';' 11';],'callback','','FontSize',8.0);reset_curves_button = uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'FontSize',10.0,'Callback','cam2(''calc_motion'');cam2(''plot_curves'')','Position',[0.65 0.20 0.1 0.04],...    'backgroundcolor','y','String','Reset Curves');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'opt_var_chg'    if get(opt_meth_menu,'value')==1        set(opt_var_text,'string','Polynomial Order:');        set(opt_var,'style','popupmenu','String',['  7';'  9';' 10';' 11';]);    elseif get(opt_meth_menu,'value')==2        set(opt_var_text,'string','Number of Splines:');        set(opt_var,'style','edit','String','10');    end        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'edit_profile'set(pos_axes,'visible','off');set(vel_axes,'visible','off');set(acc_axes,'visible','off');set(jerk_axes,'visible','off');set(motion_title,'visible','off');set(edit_profile_button,'visible','off');set(animation_button,'visible','off');set(position1,'visible','off');set(position2,'visible','off');set(position3,'visible','off');set(velocity1,'visible','off');set(velocity2,'visible','off');set(velocity3,'visible','off');set(acceleration1,'visible','off');set(acceleration2,'visible','off');set(acceleration3,'visible','off');set(jerk1,'visible','off');set(jerk2,'visible','off');set(jerk3,'visible','off');set(output_button,'visible','off');set(seg_button,'visible','off');%set(column1,'visible','off');%set(column2,'visible','off');set(next_button,'visible','off');set(minimize_button,'visible','off');set(xval,'visible','off');set(yval,'visible','off');set(node,'visible','off');set(opt_meth_text,'visible','off');set(opt_meth_menu,'visible','off');set(opt_var_text,'visible','off');set(opt_var,'visible','off');set(reset_curves_button,'visible','off');set(cam2_title,'visible','on');set(frame2,'visible','on');set(text2,'visible','on');set(text3,'visible','on');set(text4,'visible','on');set(text5,'visible','on');set(text6,'visible','on');set(text16,'visible','on');set(text17,'visible','on');set(text18,'visible','on');set(text19,'visible','on');set(segs,'visible','on');set(base_rad,'visible','on');set(offset,'visible','on');set(fol_rad,'visible','on');set(piv_dist,'visible','on');set(fol_len,'visible','on');set(type,'visible','on');set(cam_axes,'visible','on');set(draw_button,'visible','on');set(rot_text,'visible','on');set(rot_cw,'visible','on');set(rot_ccw,'visible','on');set(frame3,'visible','on');set(seg_data_text,'visible','on');set(defl_text,'visible','on');set(seg_column,'visible','on');set(beta_column,'visible','on');set(start_column,'visible','on');set(end_column,'visible','on');set(motion_column,'visible','on');set(deflection_column,'visible','on');set(from_column,'visible','on');set(to_column,'visible','on');set(motion_button,'visible','on','position',[0.75 0.3 0.15 0.04],...    'callback','cla; cam2(''motion_plots'');');set(close_button,'visible','on');  %<----------------------------------------this line was not existed -----------------for i = 1:str2num(get(segs,'string'))    set(rownum(i),'visible','on');    set(beta(i),'visible','on');    set(thetastart(i),'visible','on');    set(thetaend(i),'visible','on');    set(motion(i),'visible','on');    set(deflection(i),'visible','on');    set(heightstart(i),'visible','on');    set(heightend(i),'visible','on');             endcam2('draw_cam');cam2('fol_params');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'acc_minimize'    	for i=1:length(camangle)        if camangle(i)==str2num(get(thetastart(segnum),'string'))            num(1)=i;        elseif camangle(i)==str2num(get(thetaend(segnum),'string'))            num(2)=i;        end	end	num(3)=length(camangle);    st=num(1);    en=num(2);    len=en+1-st;        % Compute nodes on the acceleration curve    for i=1:length(camangle);        if segnum==1            index(1)=1;        elseif camangle(i)==str2num(get(thetaend(segnum-1),'string'))            index(1)=i;        end        if camangle(i)==str2num(get(thetaend(segnum),'string'))            index(2)=i;        end    end            % Minimize:if get(opt_meth_menu,'value')==1 % Position Polynomial    if get(opt_var,'value')==1 % 7th Order     	const = fminsearch(@check_poly7a,[1,-1],[],len,f(st),f(en),fd(st),fd(en),fdd(st),fdd(en),...             fddd(st),fddd(en),camangle(st),camangle(en));     	[ftemp,fdtemp,fddtemp,fdddtemp] = check_poly7b(const,len,f(st),f(en),fd(st),...            fd(en),fdd(st),fdd(en),fddd(st),fddd(en),camangle(st),camangle(en));    elseif get(opt_var,'value')==2 % 9th Order        C8 = 1; C9 = -1;    	const = fminsearch(@check_poly9a,[C8,C9],[],len,f(st),f(en),fd(st),fd(en),fdd(st),fdd(en),...	        fddd(st),fddd(en),camangle(st),camangle(en));        [ftemp,fdtemp,fddtemp,fdddtemp] = check_poly9b(const,len,f(st),f(en),fd(st),...            fd(en),fdd(st),fdd(en),fddd(st),fddd(en),camangle(st),camangle(en));%         [ftemp,fdtemp,fddtemp,fdddtemp] = check_poly9bb(len,f(st),f(en),fd(st),...%             fd(en),fdd(st),fdd(en),fddd(st),fddd(en),camangle(st),camangle(en));    elseif get(opt_var,'value')==3 % 10th Order        C8 = 1; C9 = -1; C10 = -1;		const = fminsearch(@check_poly10a,[C8,C9,C10],[],len,f(st),f(en),fd(st),fd(en),fdd(st),fdd(en),...	        fddd(st),fddd(en),camangle(st),camangle(en));        [ftemp,fdtemp,fddtemp,fdddtemp] = check_poly10b(const,len,f(st),f(en),fd(st),...            fd(en),fdd(st),fdd(en),fddd(st),fddd(en),camangle(st),camangle(en));    elseif get(opt_var,'value')==4 % 11th Order        C8 = 1; C9 = -1; C10 = 1; C11 = -1;		const = fminsearch(@check_poly11a,[C8,C9,C10,C11],[],len,f(st),f(en),fd(st),fd(en),fdd(st),fdd(en),...            fddd(st),fddd(en),camangle(st),camangle(en));        [ftemp,fdtemp,fddtemp,fdddtemp] = check_poly11b(const,len,f(st),f(en),fd(st),...            fd(en),fdd(st),fdd(en),fddd(st),fddd(en),camangle(st),camangle(en));    endelseif get(opt_meth_menu,'value')==2 % Acceleration Splines    cnum = str2num(get(opt_var,'string'));    	del=floor((index(2)-index(1))/cnum);    ynodes(1)=fdd(index(1));    xnodes(1)=camangle(index(1));    for j=1:cnum-1        ynodes(j+1)=fdd(index(1)+del*j);        xnodes(j+1)=camangle(index(1)+del*j);    end    ynodes(cnum)=fdd(index(2));    xnodes(cnum)=camangle(index(2));        for i=1:cnum        for j=1:length(camangle)            if camangle(j)==xnodes(i)                N(i)=j;            end        end    end    % Compute bounds:    range=max(fdd(index(1):index(2)));    lb(1)=fdd(index(1)); ub(1)=fdd(index(1));    for i=2:cnum-1        lb(i) = fdd(N(i))-range*0.15;        ub(i) = fdd(N(i))+range*0.15;    end    lb(cnum)=fdd(index(2)); ub(cnum)=fdd(index(2));%     ynodes = fminsearch(@acc_check,[ynodes(2:cnum-1)],[],ynodes(1),ynodes(cnum),[xnodes],(N(cnum)+1-N(1)),...%         f(N(1)),f(N(cnum)),fd(N(1)),fd(N(cnum)));    ynodes(2:cnum-1) = fmincon(@acc_check,[ynodes(2:cnum-1)],[],[],[],[],[lb(2:cnum-1)],[ub(2:cnum-1)],...        @area_const,[],ynodes(1),ynodes(cnum),[xnodes],(N(cnum)+1-N(1)),f(N(1)),f(N(cnum)),fd(N(1)),fd(N(cnum)));	[ftemp,fdtemp,fddtemp,fdddtemp,thetatemp] = acc_spline(ynodes,xnodes,(index(2)+1-index(1)),...        f(N(1)),f(N(cnum)),fd(N(1)),fd(N(cnum)));end	for i=index(1):index(2)        df(i)=abs(f(i)-ftemp(i+1-st));		f(i)=ftemp(i+1-st);		fd(i)=fdtemp(i+1-st);		fdd(i)=fddtemp(i+1-st);		fddd(i)=fdddtemp(i+1-st);    end    %     max(df)    % Draw the position, velocity, acceleration and jerk curvesfmax=max([f,ftemp]);fmin=min([f,ftemp]);fdmax=max([fd,fdtemp]);fdmin=min([fd,fdtemp]);fddmax=max([fdd,fddtemp]);fddmin=min([fdd,fddtemp]);fdddmax=max([fddd,fdddtemp]);fdddmin=min([fddd,fdddtemp]);fn=max([abs(fmax), abs(fmin)]);fdn=max([abs(fdmax), abs(fdmin)]);fddn=max([abs(fddmax), abs(fddmin)]);fdddn=max([abs(fdddmax), abs(fdddmin)]);axes(pos_axes); % Make the position axes activeposition1=line('xdata',[camangle(1:num(1))],'ydata',[f(1:num(1))],'linewidth',1,'color','b');position2=line('xdata',[camangle(num(1):num(2))],'ydata',[f(num(1):num(2))],'linewidth',1,'color','b');position3=line('xdata',[camangle(num(2):num(3))],'ydata',[f(num(2):num(3))],'linewidth',1,'color','b');set(gca,'XTick',[0 40 80 120 160 200 240 280 320 360]);set(gca,'xlim',[0 360],'ylim',[fmin*1.01 fmax*1.01]);xlabel('Cam Angle','color', 'k');ylabel('Follower Displacement','color', 'k');axes(vel_axes); % Make the velocity axes activevelocity1=line('xdata',[camangle(1:num(1))],'ydata',[fd(1:num(1))],'linewidth',1,'color','b');velocity2=line('xdata',[camangle(num(1):num(2))],'ydata',[fd(num(1):num(2))],'linewidth',1,'color','b');velocity3=line('xdata',[camangle(num(2):num(3))],'ydata',[fd(num(2):num(3))],'linewidth',1,'color','b');set(gca, 'XTick',[0 40 80 120 160 200 240 280 320 360]);set(gca,'xlim',[0 360],'ylim',[fdmin*1.01 fdmax*1.01]);xlabel('Cam Angle','color', 'k');ylabel('Follower Velocity','color', 'k');axes(acc_axes);  % Make the acceleration axes activeacceleration1=line('xdata',[camangle(1:num(1))],'ydata',[fdd(1:num(1))],'linewidth',1,'color','b');acceleration2=line('xdata',[camangle(num(1):num(2))],'ydata',[fdd(num(1):num(2))],'linewidth',1,'color','b');acceleration3=line('xdata',[camangle(num(2):num(3))],'ydata',[fdd(num(2):num(3))],'linewidth',1,'color','b');set(gca, 'XTick',[0 40 80 120 160 200 240 280 320 360]);set(gca,'xlim',[0 360],'ylim',[fddmin*1.01 fddmax*1.01]);xlabel('Cam Angle','color', 'k');ylabel('Follower Acceleration','color', 'k');axes(jerk_axes);  % Make the jerk axes activejerk1=line('xdata',[camangle(1:num(1))],'ydata',[fddd(1:num(1))],'linewidth',1,'color','b');jerk2=line('xdata',[camangle(num(1):num(2))],'ydata',[fddd(num(1):num(2))],'linewidth',1,'color','b');jerk3=line('xdata',[camangle(num(2):num(3))],'ydata',[fddd(num(2):num(3))],'linewidth',1,'color','b');set(gca, 'XTick',[0 40 80 120 160 200 240 280 320 360]);set(gca,'xlim',[0 360],'ylim',[fdddmin*1.01 fdddmax*1.01]);xlabel('Cam Angle','color', 'k');ylabel('Follower Jerk','color', 'k');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'next_node'    	if nnum==length(xnode)        nnum=1;	else        nnum=nnum+1;	end		set(node,'xdata',xnode(nnum),'ydata',ynode(nnum),'linestyle','none',...        'linewidth',2,'marker','o','markersize',6,'color','k');	set(xval,'string',xnode(nnum));	set(yval,'string',ynode(nnum));    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'next_seg'for j=1:str2num(get(segs,'string'))    if str2num(get(thetastart(j),'string'))~=360        num=j;    endend     if segnum < num    segnum=segnum+1;else    segnum=1;endcam2('plot_curves');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'animation'        Lca=length(camangle);    % Clear the existing axesaxes(pos_axes); cla;axes(vel_axes); cla;axes(acc_axes); cla;    axes(jerk_axes); cla;% Change the visible uicontrolsset(pos_axes,'visible','off');set(vel_axes,'visible','off');set(acc_axes,'visible','off');set(jerk_axes,'visible','off');set(motion_title,'visible','off');set(edit_profile_button,'visible','off');set(animation_button,'visible','off');set(seg_button,'visible','off');%set(column1,'visible','off');%set(column2,'visible','off');set(next_button,'visible','off');set(minimize_button,'visible','off');set(xval,'visible','off');set(yval,'visible','off');set(opt_meth_text,'visible','off');set(opt_meth_menu,'visible','off');set(opt_var_text,'visible','off');set(opt_var,'visible','off');set(reset_curves_button,'visible','off');animate_title=uicontrol('Parent',cam2_fig,'Units','normalized','Style','text', ...    'BackgroundColor',[0.8 0.8 0.8], 'Position',[0.2 0.94 0.7 0.044],...    'String','Cam-Follower System.','FontSize',14.0);ani_axes=axes('Parent',cam2_fig,'Units','normalized','FontSize',8.0,...        'Position',[0.1 0.05 0.58 0.85]);  % <------use to be [0.1 0.05 0.55 0.85]----------------------------------------------------animate_button=uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'backgroundcolor', [0.8 0.8 0.8],'Position',[0.875 0.8 0.1 0.04],...    'String','Animate','fontsize',10.0,'callback','cam2(''animate'')');set(motion_button,'visible','on','position',[0.875 0.75 0.1 0.04],'String','Motion Plots',...    'callback','cla; cam2(''motion_plots2'');');speed_text = uicontrol('Parent',cam2_fig,'Units','normalized','Position',[0.75 0.5 0.1 0.04],...    'FontSize',10.0,'String','Speed','Style','text','backgroundcolor', [0.9 0.9 0.9]);speed_plus = uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'FontSize',10.0,'Callback','cam2(''speedup'')','Position',[0.85 0.5 0.04 0.04],...    'backgroundcolor', [0.8 0.8 0.8],'String','+');speed_minus = uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'FontSize',10.0,'Callback','cam2(''speeddown'')','Position',[0.89 0.5 0.04 0.04],...    'backgroundcolor', [0.8 0.8 0.8],'String','-');speed_button = uicontrol('Parent',cam2_fig,'Units','normalized','Style','pushbutton',...    'FontSize',10.0,'Callback','cam2(''speedreset'')','Position',[0.75 0.45 0.1 0.04],...    'backgroundcolor', [0.8 0.8 0.8],'String','Reset Speed');cam_profile=animatedline('linewidth',2,'color','b');cam_pin=line('xdata',[],'ydata',[],'linewidth',2,'color','k');cam_bush=line('xdata',[],'ydata',[],'linewidth',2,'color','k');follower=animatedline('linewidth',2,'color','g');fol_bush=line('xdata',[],'ydata',[],'linewidth',2,'color','k');% Callback to calculate the cam profilecam2('calc_profile');axes(ani_axes); % Make the animation axes active% Draw the camaddpoints(cam_profile,[x1 0],[y1 0]);% Draw the pincoords=circle(str2num(get(base_rad,'string'))/10,0,0,10);xpin1=coords(:,1);ypin1=coords(:,2);set(cam_pin,'xdata',[xpin1],'ydata',[ypin1]);% Draw the bushingcoords = bushing(str2num(get(base_rad,'string'))/10,0,0,10,0);xbush1 = coords(:,1);ybush1 = coords(:,2);set(cam_bush,'xdata',xbush1,'ydata',ybush1);% Draw the followerif get(type,'value') == 1.0    [xfol,yfol]=rff_pos(x1,y1,xf,yf,str2num(get(offset,'string')),camangle);elseif get(type,'value') == 2.0    [xfol,yfol] = off_pos(f(1),str2num(get(piv_dist,'string')),...        str2num(get(fol_len,'string')),str2num(get(offset,'string')),phi0);elseif get(type,'value') == 3.0    [xfol,yfol]=rrf_pos(xf(1),yf(1),f(1),str2num(get(fol_rad,'string')),...        str2num(get(offset,'string')),str2num(get(base_rad,'string')));elseif get(type,'value') == 4.0    [xfol,yfol]=orf_pos(xf(1),yf(1),f(1),str2num(get(fol_rad,'string')),...        str2num(get(piv_dist,'string')),str2num(get(fol_len,'string')),str2num(get(base_rad,'string')));endaddpoints(follower,xfol,yfol);% Draw the follower bushing for oscillating followersif get(type,'value') == 2.0    coords = bushing(str2num(get(base_rad,'string'))/10,str2num(get(piv_dist,'string')),0,10,0);    xbush2 = coords(:,1);    ybush2 = coords(:,2);    set(fol_bush,'xdata',xbush2,'ydata',ybush2);    fol_pin=line('xdata',[],'ydata',[],'linewidth',2,'color','k');    coords=circle(str2num(get(base_rad,'string'))/10,str2num(get(piv_dist,'string')),0,10);	xpin1=coords(:,1);	ypin1=coords(:,2);	set(fol_pin,'xdata',[xpin1],'ydata',[ypin1]);elseif get(type,'value') == 4.0    coords = bushing(str2num(get(base_rad,'string'))/10,str2num(get(piv_dist,'string')),0,10,0);    xbush2 = coords(:,1);    ybush2 = coords(:,2);    set(fol_bush,'xdata',xbush2,'ydata',ybush2);    fol_pin=line('xdata',[],'ydata',[],'linewidth',2,'color','k');    coords=circle(str2num(get(base_rad,'string'))/10,str2num(get(piv_dist,'string')),0,10);	xpin1=coords(:,1);	ypin1=coords(:,2);	set(fol_pin,'xdata',[xpin1],'ydata',[ypin1]);end% Calculate the cam and follower in all positions, set window limitsfor j=1:1:Lca    r(j)=sqrt(x1(j)^2+y1(j)^2);    angle(j)=atan2(y1(j),x1(j));endset(ani_axes,'xlim',2*[-max(r) max(r)],'ylim',2*[-max(r) max(r)]);% Draw the follower bushing for translating followersif get(type,'value') == 1.0    coords = linbush([max(r)+0.05],[-0.1],[max(r)+1.5],[-0.1]);    xbush2 = coords(:,1);    ybush2 = coords(:,2);    set(fol_bush,'xdata',xbush2,'ydata',ybush2);elseif get(type,'value') == 3.0    coords = linbush([2*str2num(get(fol_rad,'string'))+max(r)+0.05],[-0.1],...        [2*str2num(get(fol_rad,'string'))+max(r)+1.5],[-0.1]);    xbush2 = coords(:,1);    ybush2 = coords(:,2);    set(fol_bush,'xdata',xbush2,'ydata',ybush2);    endif get(rot_cw,'value')==1; f=fliplr(f); endif get(type,'value') == 1.0    for i=1:10:Lca-1        % Calculate cam orientation        for j=1:1:Lca            xcam(i,j)=r(j)*cos(camangle(i)*pi/180+angle(j));            ycam(i,j)=r(j)*sin(camangle(i)*pi/180+angle(j));            xcam(i,j+1)=0;            ycam(i,j+1)=0;        end        [a,b]=rff_pos(xcam(i,:),ycam(i,:),xf,yf,str2num(get(offset,'string')),camangle);        xfol(i,:)=a;        yfol(i,:)=b;    endelseif get(type,'value') == 2.0    for i=1:10:Lca-1        % Calculate cam orientation        for j=1:1:Lca            xcam(i,j)=r(j)*cos(camangle(i)*pi/180+angle(j));            ycam(i,j)=r(j)*sin(camangle(i)*pi/180+angle(j));            xcam(i,j+1)=0;            ycam(i,j+1)=0;        end        [a,b]=off_pos(f(i),str2num(get(piv_dist,'string')),...            str2num(get(fol_len,'string')),str2num(get(offset,'string')),phi0);        xfol(i,:)=a;        yfol(i,:)=b;    endelseif get(type,'value') == 3.0    for i=1:10:Lca-1        % Calculate cam orientation        for j=1:1:Lca            xcam(i,j)=r(j)*cos(camangle(i)*pi/180+angle(j));            ycam(i,j)=r(j)*sin(camangle(i)*pi/180+angle(j));            xcam(i,j+1)=0;            ycam(i,j+1)=0;        end        [a,b]=rrf_pos(xf(1),yf(1),f(i),str2num(get(fol_rad,'string')),...            str2num(get(offset,'string')),str2num(get(base_rad,'string')));        xfol(i,:)=a;        yfol(i,:)=b;    endelseif get(type,'value') == 4.0    for i=1:10:Lca-1        % Calculate cam orientation        for j=1:1:Lca            xcam(i,j)=r(j)*cos(camangle(i)*pi/180+angle(j));            ycam(i,j)=r(j)*sin(camangle(i)*pi/180+angle(j));            xcam(i,j+1)=0;            ycam(i,j+1)=0;        end        [a,b]=orf_pos(xf(1),yf(1),f(i),str2num(get(fol_rad,'string')),...            str2num(get(piv_dist,'string')),str2num(get(fol_len,'string')),str2num(get(base_rad,'string')));        xfol(i,:)=a;        yfol(i,:)=b;    end  endif get(rot_cw,'value')==1; f=fliplr(f); endspeed=0.01;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'animate'    set(animate_button,'string','Stop','callback','cam2(''animation_stop'')');drawnow;ani=1;if get(rot_ccw,'value')==1    i=1;	while ani==1        tic;        clearpoints(cam_profile);        addpoints(cam_profile,xcam(i,:),ycam(i,:));        clearpoints(follower);        addpoints(follower,xfol(i,:),yfol(i,:));        drawnow;        i=i+10;        if i > size(xcam,1)-1            i=1;        end        while toc < speed        end	endelseif get(rot_cw,'value')==1    i=size(xcam,1);	while ani==1        tic;        clearpoints(cam_profile);        addpoints(cam_profile,xcam(i,:),ycam(i,:));        clearpoints(follower);		addpoints(follower,xfol(i,:),yfol(i,:));        drawnow;        i=i-10;        if i <= 1            i=size(xcam,1);        end        while toc < speed        end	endend%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'speedup'    speed=speed*0.9;    case 'speeddown'    speed=speed*1.1;    case 'speedreset'    speed=0.01;    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'animation_stop'ani=0;set(animate_button,'string','Animation','callback','cam2(''animate'')');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'output_profile'    cam2('calc_profile');    fid = fopen('cam_profile','w');    for i=1:length(camangle)        fprintf(fid,'%-5.2f    %-5.2f    0\r',x1(i),y1(i));    end    fclose(fid);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'close'    % if the target window exist then close it    choice = get(type,'value');    if choice==1        if ~isempty(findobj('Tag','FF Cam Analysis Window'))            fprintf('case 1\n')            cam2_ff_cam_ana('Close');        end    elseif choice==2        if ~isempty(findobj('Tag','OFF Cam Analysis Window'))            fprintf('case 2\n')            cam2_off_cam_ana('Return');        end    elseif choice==3        if ~isempty(findobj('Tag','RF Cam Analysis Window'))            fprintf('case 3\n')            cam2_rf_cam_ana('Close');        end    elseif choice==4        if ~isempty(findobj('Tag','ORF Cam Analysis Window'))            fprintf('case 4\n')            cam2_orf_cam_ana('Close');        end    end    	a = findobj('Tag','MainFig');	delete(a);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END OF MAIN PROGRAM%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% FOLLOWER PLOTTING FUNCTIONS:                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [xfol,yfol] = rff_pos(xcam,ycam,xf,yf,d,camangle)% function [xfol,yfol] = rff_pos(xcam,ycam,xf,yf,d,camangle)% Function to draw the Radial Flat-Faced Follower% xcam,ycam = cam point of contact% d = follower offset% camangle = cam angle vector% r0 = follower radius% Calculate maximum and minimum face lengthsfor i=1:length(camangle)    t(i)=yf(i)*cos(camangle(i))-xf(i)*sin(camangle(i));endtmax=max(t); tmin=min(t);% Calculate follower orientationxfol(1)=max(xcam);yfol(1)=tmax;xfol(2)=xfol(1);yfol(2)=tmin;xfol(3)=xfol(1);yfol(3)=d;xfol(4)=xfol(1)+tmax;yfol(4)=yfol(3);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [xfol,yfol] = rrf_pos(xfi,yfi,f,r0,d,len)% function [xfol,yfol] = rrf_pos(xfi,yfi,f,r0,d,len)% Function to draw the Radial Roller Follower% xfi,yfi = initial follower center% f = follower displacement% r0 = follower radius% d = follower offset% len = follower lengthxfol(1)=xfi+f;yfol(1)=yfi;k=2;for t=0:pi/12:2*pi    xfol(k)=xfol(1)+r0*cos(t);    yfol(k)=yfol(1)+r0*sin(t);    k=k+1;endxfol(k)=xfol(2)+len;yfol(k)=yfol(2);        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [xfol,yfol] = orf_pos(xfi,yfi,f,r0,r1,r3,rb)% function [xfol,yfol] = orf_pos(xfi,yfi,f,r0,r1,r3,rb)% Function to draw the Oscillating Roller Follower% xfi,yfi = initial follower point of contact% f = follower displacement (degrees)% r0 = follower radius% r1 = pivot distance% r3 = follower length% rb = base circle radiusf = f*pi/180; % convert to radians% phi0=atan2((yfi-0),(xfi-r1)); % Zero displacement angle (initial)phi0 = pi-acos((r1^2+r3^2-(rb+r0)^2)/(2*r1*r3));angle=phi0-f; % Current angle of followerxfol(1)=r1;yfol(1)=0;xfol(2)=xfol(1)+r3*cos(angle);yfol(2)=yfol(1)+r3*sin(angle);k=3;for t=angle:pi/12:angle+2*pi    xfol(k)=xfol(2)-r0*cos(t);    yfol(k)=yfol(2)-r0*sin(t);    k=k+1;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [xfol,yfol] = off_pos(f,r1,r3,d,phi0)% function [xfol,yfol] = off_pos(f,r1,r3,d,phi0)% Function to draw the Oscillating Flat-Faced Follower% f = follower displacement (degrees)% r1 = pivot distance% r3 = follower length% d = follower offset% phi0 = initial follower angle (radians)f = f*pi/180; % convert to radiansangle = phi0+f; % follower anglexfol(1)=r1;yfol(1)=0;xfol(2)=xfol(1)+d*cos(3*pi/2-angle);yfol(2)=yfol(1)+d*sin(3*pi/2-angle);xfol(3)=xfol(2)+r3*cos(pi-angle);yfol(3)=yfol(2)+r3*sin(pi-angle);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% BUSHING PLOTTING FUNCTIONS:                                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [coords] = bushing(r,x0,y0,ninc,theta)% This function determines the coordinates of a series of points defining % the outside of a bushing.  The radius of the pin is r.  The pin is not % computed.  It should be determined using the function "circle".% The input values are:%r       = radius of circle%x0      = x coordinate of center of circle%y0      = y coordinate of center of circle%ninc    = number of increments into which the semicircle is divided%angle 	 = rotation angle relative to the horizontal x axis (degrees)% The results are returned in the vector "coords".  The answers are % stored in values according to the following:%coords (i,1) = x coordinates of bushing%coords (i,2) = y coordinates of bushing% The number of points stored is npoints where npoints = ninc+16% find the coordinates of the points.npoints=ninc+16;inc=pi/ninc;i=0;tr=3*r;fact=pi/180;thetar=fact*theta;c=cos(fact*45);cr=r*c;p=r*(6-c)/3;tp=2*p;delta=(6*r-cr)/3;% define the base firsti=i+1;xtemp(i)=-tr+cr;ytemp(i)=-tr-cr;i=i+1;xtemp(i)=-tr;ytemp(i)=-tr;% find the dash coordinates starting from the left endfor j=1:1:3	i=i+1;	xtemp(i)=xtemp(i-1)+delta;	ytemp(i)=ytemp(i-1);	i=i+1;	xtemp(i)=xtemp(i-1)+cr;	ytemp(i)=ytemp(i-1)-cr;	i=i+1;	xtemp(i)=xtemp(i-2);	ytemp(i)=ytemp(i-2);end% find the coordinates of the end part	i=i+1;xtemp(i)=tr;ytemp(i)=-tr;% locate the right vertical linei=i+1;xtemp(i)=2*r;ytemp(i)=-tr;i=i+1;xtemp(i)=2*r;ytemp(i)=0;% locate the semicirclefor j=0:inc:pi	i=i+1;	xtemp(i)=2*r*cos(j);	ytemp(i)=2*r*sin(j);end% locate the left vertical linei=i+1;xtemp(i)=-2*r;ytemp(i)=-tr;% rotate coordinates, translate by (x0, y0) and store coordinates in "coords"c=cos(thetar);s=sin(thetar);for j=1:1:npoints	coords(j,1)=x0+xtemp(j)*c-ytemp(j)*s;	coords(j,2)=y0+xtemp(j)*s+ytemp(j)*c;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [coords] = linbush(x1,y1,x2,y2)% Linear bushing for the translating followers% The input values are:% x1      = x start coordinate% y1      = y start coordinate% x2      = x end coordinate% y2      = y end coordinate% theta 	 = rotation angle relative to the horizontal x axis (degrees)% The results are returned in the vector "coords".  The answers are % stored in values according to the following:% coords (i,1) = x coordinates of bushing% coords (i,2) = y coordinates of bushing% find the coordinates of the points.fact=pi/180;delta=abs(x2-x1)/3;c=cos(fact*45);cr=delta*c;i=0;% define the base firsti=i+1;xtemp(i)=x2;ytemp(i)=y2;i=i+1;xtemp(i)=x1;ytemp(i)=y1;% find the dash coordinates starting from the left endfor j=2:1:5	i=i+1;	xtemp(i)=xtemp(i-1)+delta;	ytemp(i)=ytemp(i-1);	i=i+1;	xtemp(i)=xtemp(i-1)-cr;	ytemp(i)=ytemp(i-1)-cr;	i=i+1;	xtemp(i)=xtemp(i-2);	ytemp(i)=ytemp(i-2);endfor j=1:1:length(xtemp)	coords(j,1)=xtemp(j);	coords(j,2)=ytemp(j);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [coords] = circle(r,x0,y0,ninc)% This function determines the coordinates of a series of points defining a% circle of radius r.  The number of points stored is ninc+1. % The input values are:%r       = radius of circle%x0      = x coordinate of center of circle%y0      = y coordinate of center of circle%ninc    = number of increments into which circle is divided% The results are returned in the vector "coords".  The answers are % stored in values according to the following:%coords (i,1) = x coordinate of points on circle%coords (i,2) = y coordinate of points on circle% find the coordinates of the points.inc=2*pi/ninc;npoints = ninc+1;i=0;for j=0:inc:2*pi	i=i+1;	coords(i,1)=x0+r*cos(j);	coords(i,2)=y0+r*sin(j);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MOTION CALCULATION FUNCTIONS:                                           %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [f] = uniform(tt,Hs,He,start,ending)% Function uniform(tt,Hs,He,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   tt  = cam angle (deg.)%   Hs  = start height%   He  = end height%   start = start angle (deg.)%   ending = end angle (deg.)fact=pi/180;beta = ending - start;beta=beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;    f(5) = 0;    f(6) = 0;    f(7) = 0;elseif He-Hs > 0    f(1) = Hs + (rise/beta)*(theta);    f(2) = (rise/beta);    f(3) = 0;    f(4) = 0;    f(5) = 0;    f(6) = 0;    f(7) = 0;    else    f(1) = Hs - (rise/beta)*(theta);    f(2) = -(rise/beta);    f(3) = 0;    f(4) = 0;    f(5) = 0;    f(6) = 0;    f(7) = 0;     end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [f] = harmonic(tt,Hs,He,start,ending)% Function harmonic(tt,Hs,He,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   tt  = cam angle (deg.)%   Hs  = start height%   He  = end height%   start = start angle (deg.)%   ending = end angle (deg.)fact=pi/180;beta = ending - start;beta=beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;else    f(1) = (He+Hs)/2-(He-Hs)/2*cos(pi*theta/beta);    f(2) = ((He-Hs)/2)*(pi/beta)*sin(pi*theta/beta);    f(3) = ((He-Hs)/2)*((pi/beta)^2)*cos(pi*theta/beta);    f(4) = -((He-Hs)/2)*((pi/beta)^3)*sin(pi*theta/beta);end	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [f] = cycloidal(tt,Hs,He,start,ending)% function [f] = cycloidal(tt,Hs,He,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   tt  = cam angle (deg.)%   Hs  = start height%   He  = end height%   start = start angle (deg.)%   ending = end angle (deg.)fact=pi/180;beta = ending - start;beta = beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;elseif Hs < He    f(1) = (He-Hs)*(theta/beta-1/(2*pi)*sin(2*pi*theta/beta));    f(2) = (He-Hs)/beta*(1-cos(2*pi*theta/beta));    f(3) = 2*pi*(He-Hs)/beta^2*(sin(2*pi*theta/beta));    f(4) = (2*pi)^2*(He-Hs)/beta^3*(cos(2*pi*theta/beta));else    f(1) = abs(He-Hs)-abs(He-Hs)*(theta/beta-1/(2*pi)*sin(2*pi*theta/beta));    f(2) = -abs(He-Hs)/beta*(1-cos(2*pi*theta/beta));    f(3) = -2*pi*abs(He-Hs)/beta^2*(sin(2*pi*theta/beta));    f(4) = -(2*pi)^2*abs(He-Hs)/beta^3*(cos(2*pi*theta/beta));end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [f] = poly2(tt,Hs,He,Vs,Ve,As,Ae,start,ending)% Function poly2(tt,Hs,He,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   tt  = cam angle (deg.)%   Hs  = start height%   He  = end height%   Vs  = start velocity%   Ve  = end velocity%   As  = start acceleration%   Ae  = end acceleration%   start = start angle (deg.)%   ending = end angle (deg.)if isempty(Vs); Vs=0; endif isempty(Ve); Ve=0; endif isempty(As); As=0; endif isempty(Ae); Ae=0; endfact=pi/180;beta = ending - start;beta = beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;else    c0 = Hs;    c1 = Vs*beta;    c2 = 0.5*As*beta^2;    c3 = -As*beta^2-4*Ve*beta-6*Vs*beta-10*Hs+10*He;    c4 = -4*Vs*beta-1.5*As*beta^2-2*c3-5*Hs+5*He-Ve*beta;    c5 = -Hs-Vs*beta-0.5*As*beta^2-c3-c4+He;    f(1) = c0+c1*(theta/beta)+c2*(theta/beta)^2+c3*(theta/beta)^3+...            c4*(theta/beta)^4+c5*(theta/beta)^5;    f(2) = (1/beta)*(c1+2*c2*(theta/beta)+3*c3*(theta/beta)^2+...            4*c4*(theta/beta)^3+5*c5*(theta/beta)^4);    f(3) = (1/beta)^2*(2*c2+6*c3*(theta/beta)+12*c4*(theta/beta)^2+...            20*c5*(theta/beta)^3);    f(4) = (1/beta)^3*(6*c3+24*c4*(theta/beta)+60*c5*(theta/beta)^2);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [f] = poly7(tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% Function poly7(tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   tt  = cam angle (deg.)%   Hs  = start height%   He  = end height%   Vs  = start velocity%   Ve  = end velocity%   As  = start acceleration%   Ae  = end acceleration%   Js  = start jerk%   Je  = end jerk%   start = start angle (deg.)%   ending = end angle (deg.)if isempty(Vs); Vs=0; endif isempty(Ve); Ve=0; endif isempty(As); As=0; endif isempty(Ae); Ae=0; endfact=pi/180;beta = ending - start;beta = beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;else    c0 = Hs;    c1 = Vs*beta;    c2 = 1/2*As*beta^2;    c3 = 1/6*Js*beta^3;    c4 = -5*As*beta^2-35*Hs+35*He-20*Vs*beta-2/3*Js*beta^3-15*Ve*beta+5/2*Ae*beta^2-1/6*Je*beta^3;    c5 = -5*As*beta^2-Js*beta^3-3*c4-6*Ve*beta-15*Vs*beta-21*Hs+21*He+1/2*Ae*beta^2;    c6 = -6*Vs*beta-5/2*As*beta^2-2/3*Js*beta^3-3*c4-2*c5-7*Hs+7*He-Ve*beta;    c7 = -Hs-Vs*beta-1/2*As*beta^2-1/6*Js*beta^3-c4-c5-c6+He;    f(1) = c0+c1*theta/beta+c2*theta^2/(beta^2)+c3*theta^3/(beta^3)+...        c4*theta^4/(beta^4)+c5*theta^5/(beta^5)+c6*theta^6/(beta^6)+c7*theta^7/(beta^7);    f(2) = (c1+2*c2*theta/beta+3*c3*theta^2/(beta^2)+4*c4*theta^3/(beta^3)+...        5*c5*theta^4/(beta^4)+6*c6*theta^5/(beta^5)+7*c7*theta^6/(beta^6))/beta;    f(3) = (2*c2+6*c3*theta/beta+12*c4*theta^2/(beta^2)+20*c5*theta^3/(beta^3)+...        30*c6*theta^4/(beta^4)+42*c7*theta^5/(beta^5))/(beta^2);    f(4) = (6*c3+24*c4*theta/beta+60*c5*theta^2/(beta^2)+120*c6*theta^3/(beta^3)+...        210*c7*theta^4/(beta^4))/(beta^3);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [f] = poly5(tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% Function poly7(tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   tt  = cam angle (deg.)%   Hs  = start height%   He  = end height%   Vs  = start velocity%   Ve  = end velocity%   As  = start acceleration%   Ae  = end acceleration%   Js  = start jerk%   Je  = end jerk%   start = start angle (deg.)%   ending = end angle (deg.)if isempty(Vs); Vs=0; endif isempty(Ve); Ve=0; endif isempty(As); As=0; endif isempty(Ae); Ae=0; endJs=0; Je=0;fact=pi/180;beta = ending - start;beta=beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;else    c0 = Hs;    c1 = Vs*beta;    c2 = 1/2*As*beta^2;    c3 = -3/2*As*beta^2-6*Vs*beta-10*Hs+10*He-4*Ve*beta+1/2*Ae*beta^2;    c4 = -4*Vs*beta-3/2*As*beta^2-2*c3-5*Hs+5*He-Ve*beta;    c5 = -Hs-Vs*beta-1/2*As*beta^2-c3-c4+He;    f(1) = c0+c1*theta/beta+c2*theta^2/beta^2+c3*theta^3/beta^3+c4*theta^4/beta^4+c5*theta^5/beta^5;    f(2) = c1/beta+2*c2*theta/beta^2+3*c3*theta^2/beta^3+4*c4*theta^3/beta^4+5*c5*theta^4/beta^5;    f(3) = 2*c2/beta^2+6*c3*theta/beta^3+12*c4*theta^2/beta^4+20*c5*theta^3/beta^5;    f(4) = 6*c3/beta^3+24*c4*theta/beta^4+60*c5*theta^2/beta^5;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% CAM PROFILE CALCULATION FUNCTIONS:                                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [x1,y1,r1,phi0] = off_analysis(f,theta,rb,r1,off)% Function off_analysis(f,theta,r0,rb,off)% inputs:% f = follower displacement% theta = cam angle corresponding to displacement f% rb = base circle radius% r1 = distance from follower pivot to cam center% off = follower offset% returns:% x1,y1 = cam profile coordstheta = theta*pi/180; % convert to radiansf = f*pi/180; % convert to radiansn = length(f); % number of points% Calculate phi0AE = r1/(1+off/rb);if AE <= rb % if AE is too small increment the pivot distance by 10%    r1 = r1*1.1;    AE = r1/(1+off/rb);endBE = sqrt(AE^2-rb^2);phi0 = atan(rb/BE); % radians% Test theta before computing cam profileif theta(1) == 0if theta(n) == 2*pi        for j=1:n        xc(j) = r1*cos(theta(j));        yc(j) = r1*sin(theta(j));        xd(j) = xc(j)+off*cos(3*pi/2-f(j)-phi0+theta(j));        yd(j) = yc(j)+off*sin(3*pi/2-f(j)-phi0+theta(j));        rho(j) = theta(j)-f(j)-phi0;    end        for j=2:n        J = [-cos(rho(j)) cos(rho(j-1)); -sin(rho(j)) sin(rho(j-1))];        K = [xd(j)-xd(j-1); yd(j)-yd(j-1)];        temp = inv(J)*K;        tau(j-1:j) = temp;    end    tau(1)=tau(n);        for j=2:n        xg(j) = xd(j)+tau(j)*cos(rho(j));        yg(j) = yd(j)+tau(j)*sin(rho(j));        gamma(j) = (rho(j)+rho(j-1))/2+3*pi/2;    end    gamma(1) = gamma(n);    xg(1)=xg(n);    yg(1)=yg(n);        for j=1:n-1        L = [-cos(gamma(j)) cos(gamma(j+1)); -sin(gamma(j)) sin(gamma(j+1))];        M = [xg(j)-xg(j+1); yg(j)-yg(j+1)];        nu(j:j+1) = inv(L)*M;    end    nu(n)=nu(1);        for j=1:n        xm(j) = xg(j)+nu(j)*cos(gamma(j));        ym(j) = yg(j)+nu(j)*sin(gamma(j));        N = [-cos(rho(j)+pi/2) cos(rho(j)); -sin(rho(j)+pi/2) sin(rho(j))];        P = [xm(j)-xg(j); ym(j)-yg(j)];        Q = inv(N)*P;        rc(j) = Q(1);        ita(j) = Q(2);        x1(j) = xg(j)+ita(j)*cos(rho(j));        y1(j) = yg(j)+ita(j)*sin(rho(j));    endelse    errordlg('theta does not span 0 to 360 degrees (1)','''off_analysis'' Error');endelse    errordlg('theta does not span 0 to 360 degrees (2)','''off_analysis'' Error');end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [xf,yf,x1,y1] = orf_analysis(f,theta,r0,r1,r3,rb)% Function orf_analysis(f,theta,r0,r1,r3,rb)% inputs:% f = follower displacement% theta = cam angle corresponding to displacement f% r0 = follower radius% r1 = distance from follower pivot to cam center% r3 = distance from follower pivot to follower center% rb = base circle radius% returns:% xf,yf = follower coords% x1,y1 = cam profile coordstheta = theta*pi/180; % convert to radiansf = f*pi/180; % convert to radiansn = length(f); % number of pointsphi0 = acos((r1^2+r3^2-(rb+r0)^2)/(2*r1*r3)); % phi0% Follower coordsfor i=1:n    mu=pi+theta(i)-f(i)-phi0;    psi(i)=mu-pi/2;    xf(i)=r1*cos(theta(i))+r3*cos(mu);    yf(i)=r1*sin(theta(i))+r3*sin(mu);endif theta(1) == 0if theta(n) == 2*pifor j=2:1:n-1    a=[xf(j-1), yf(j-1)];    b=[xf(j), yf(j)];    c=[xf(j+1), yf(j+1)];    d1=2*(a-b);    d2=2*(b-c);    e(1)=(a(1)^2+a(2)^2)-(b(1)^2+b(2)^2);    e(2)=(b(1)^2+b(2)^2)-(c(1)^2+c(2)^2);    A=[d1(1) d1(2); d2(1) d2(2)];    B=[e(1); e(2)];    s=A\B;    xc(j)=s(1);    yc(j)=s(2);enda=[xf(n-1), yf(n-1)];b=[xf(n), yf(n)];c=[xf(2), yf(2)];d1=2*(a-b);d2=2*(b-c);e(1)=(a(1)^2+a(2)^2)-(b(1)^2+b(2)^2);e(2)=(b(1)^2+b(2)^2)-(c(1)^2+c(2)^2);A=[d1(1) d1(2); d2(1) d2(2)];B=[e(1); e(2)];s=A\B;xc(n)=s(1);yc(n)=s(2);xc(1)=xc(n);yc(1)=yc(n);% Compute cam coordinatesfor j=1:1:n   angle(j)=atan2((yf(j)-yc(j)),(xf(j)-xc(j)));     x1(j)=xf(j)-r0*cos(angle(j));   y1(j)=yf(j)-r0*sin(angle(j));   rad1(j)=sqrt((x1(j)-xc(j))^2+(y1(j)-yc(j))^2);end% Fix points on concave parts of the profilefor j=2:1:n-1    test(j)=((xf(j)-(xf(j-1)))*(yf(j+1)-yf(j))-(xf(j+1)-xf(j))*(yf(j)-yf(j-1)));    if test(j) < 0;        x1(j)=xf(j)+r0*cos(angle(j));        y1(j)=yf(j)+r0*sin(angle(j));    end;endtest(n)=((xf(n)-(xf(n-1)))*(yf(2)-yf(n))-(xf(2)-xf(n))*(yf(n)-yf(n-1)));if test(n) < 0;    x1(n)=xf(n)+r0*cos(angle(n));    y1(n)=yf(n)+r0*sin(angle(n));end;x1(1)=x1(n);y1(1)=y1(n);    else    errordlg('theta does not span 0 to 360 degrees (1)','''orf_analysis'' Error');endelse    errordlg('theta does not span 0 to 360 degrees (2)','''orf_analysis'' Error');end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [x1,y1,len,rb] = rff_analysis(f,fd,fdd,theta,rb)% Function rff_analysis(f,fd,fdd,theta,rb,off)% inputs:% f = follower displacement% fd = follower velocity% fdd = follower acceleration% theta = cam angle corresponding to displacement f% rb = base circle radius% off = follower offset% returns:% x1,y1 = cam profile coords% len = follower face length% rb = base circle radiustheta = theta*pi/180; % convert to radiansn = length(f); % number of points% Test theta before computing cam profileif theta(1) == 0if theta(n) == 2*pi        % Check the base circle, and compute the minimun if the user's in too small%     for j=1:n%         rb=max(rb,-f(j)-fdd(j));%     end        % Compute cam profile coordinates    for j=1:n        x1(j)=(rb+f(j))*cos(theta(j))-fd(j)*sin(theta(j));        y1(j)=(rb+f(j))*sin(theta(j))+fd(j)*cos(theta(j));        t(j) = y1(j)*cos(theta(j))-x1(j)*sin(theta(j));    end    len=max(t)-min(t);    else    errordlg('theta does not span 0 to 360 degrees (1)','''rff_analysis'' Error');endelse    errordlg('theta does not span 0 to 360 degrees (2)','''rff_analysis'' Error');end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [xf,yf,x1,y1] = rrf_analysis(f,theta,r0,rb,off)% Function rrf_analysis(f,theta,r0,rb,off)% inputs:% f = follower displacement% theta = cam angle corresponding to displacement f% r0 = follower radius% rb = base circle radius% off = follower offset% returns:% xf,yf = follower coords% x1,y1 = cam profile coordstheta = theta*pi/180; % convert to radiansn = length(f); % number of points% Follower coordsfor i=1:n    xf(i)=(r0+rb+f(i))*cos(theta(i))-off*sin(theta(i));    yf(i)=(r0+rb+f(i))*sin(theta(i))+off*cos(theta(i));end% Test theta before computing cam profileif theta(1) == 0if theta(n) == 2*pifor j=2:1:n-1    a=[xf(j-1), yf(j-1)];    b=[xf(j), yf(j)];    c=[xf(j+1), yf(j+1)];    d1=2*(a-b);    d2=2*(b-c);    e(1)=(a(1)^2+a(2)^2)-(b(1)^2+b(2)^2);    e(2)=(b(1)^2+b(2)^2)-(c(1)^2+c(2)^2);    A=[d1(1) d1(2); d2(1) d2(2)];    B=[e(1); e(2)];    s=A\B;    xc(j)=s(1);    yc(j)=s(2);enda=[xf(n-1), yf(n-1)];b=[xf(n), yf(n)];c=[xf(2), yf(2)];d1=2*(a-b);d2=2*(b-c);e(1)=(a(1)^2+a(2)^2)-(b(1)^2+b(2)^2);e(2)=(b(1)^2+b(2)^2)-(c(1)^2+c(2)^2);A=[d1(1) d1(2); d2(1) d2(2)];B=[e(1); e(2)];s=A\B;xc(n)=s(1);yc(n)=s(2);xc(1)=xc(n);yc(1)=yc(n);% Compute cam coordinatesfor j=1:1:n   angle(j)=atan2((yf(j)-yc(j)),(xf(j)-xc(j)));     x1(j)=xf(j)-r0*cos(angle(j));   y1(j)=yf(j)-r0*sin(angle(j));   rad1(j)=sqrt((x1(j)-xc(j))^2+(y1(j)-yc(j))^2);end% Fix points on concave parts of the profilefor j=2:1:n-1    test(j)=((xf(j)-(xf(j-1)))*(yf(j+1)-yf(j))-(xf(j+1)-xf(j))*(yf(j)-yf(j-1)));    if test(j) < 0;        x1(j)=xf(j)+r0*cos(angle(j));        y1(j)=yf(j)+r0*sin(angle(j));    end;endtest(n)=((xf(n)-(xf(n-1)))*(yf(2)-yf(n))-(xf(2)-xf(n))*(yf(n)-yf(n-1)));if test(n) < 0;    x1(n)=xf(n)+r0*cos(angle(n));    y1(n)=yf(n)+r0*sin(angle(n));end;x1(1)=x1(n);y1(1)=y1(n);    else    errordlg('theta does not span 0 to 360 degrees (1)','''rrf_analysis'' Error');endelse    errordlg('theta does not span 0 to 360 degrees (2)','''rrf_analysis'' Error');end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% OPTIMIZATION SUBFUNCTIONS:                                           %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [fddmax] = check_poly9a(const,n,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)for i=1:n    theta = start+(ending-start)*(i-1)/(n-1);    [coords] = poly9(const,theta,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending);    f(i) = coords(1);    fd(i) = coords(2);    fdd(i) = coords(3);    fddd(i) = coords(4);endfddmax=max(abs(fdd));%%%%%%%%function [f,fd,fdd,fddd] = check_poly9b(const,n,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)for i=1:n    theta = start+(ending-start)*(i-1)/(n-1);    [coords] = poly9(const,theta,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending);    f(i) = coords(1);    fd(i) = coords(2);    fdd(i) = coords(3);    fddd(i) = coords(4);end%%%%%%%%function [f] = poly9(const,tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% function [f(1),f(2),f(3),f(4)] = poly9(const,tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   const(1)  = coefficient C8%   const(2)  = coefficient C9%   tt  = camangle (deg.)%   Hs  = start height%   He  = end height%   Vs  = start velocity%   Ve  = end velocity%   As  = start acceleration%   Ae  = end acceleration%   Js  = start jerk%   Je  = end jerk%   start = start angle (deg.)%   ending = end angle (deg.)if isempty(Vs); Vs=0; endif isempty(Ve); Ve=0; endif isempty(As); As=0; endif isempty(Ae); Ae=0; endif isempty(Js); Js=0; endif isempty(Je); Je=0; endc8 = const(1);c9 = const(2);fact=pi/180;beta = ending - start;beta=beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;else    c0 = Hs;    c1 = Vs*beta;    c2 = 1/2*As*beta^2;    c3 = 1/6*Js*beta^3;    c4 = c8+4*c9-35*Hs-20*Vs*beta-5*As*beta^2-2/3*Js*beta^3+35*He-15*Ve*beta+5/2*Ae*beta^2-1/6*Je*beta^3;    c5 = -5*As*beta^2-Js*beta^3-3*c4-15*Vs*beta+21*He-3*c9-21*Hs-c8-6*Ve*beta+1/2*Ae*beta^2;    c6 = -6*Vs*beta-5/2*As*beta^2-2/3*Js*beta^3-3*c4-2*c5+2*c9-7*Hs+c8+7*He-Ve*beta;    c7 = -Hs-Vs*beta-1/2*As*beta^2-1/6*Js*beta^3-c4-c5-c6-c8-c9+He;    f(1) = c0+c1*theta/beta+c2*theta^2/beta^2+c3*theta^3/beta^3+c4*theta^4/beta^4+c5*theta^5/beta^5+c6*theta^6/beta^6+c7*theta^7/beta^7+c8*theta^8/beta^8+c9*theta^9/beta^9;    f(2) = c1/beta+2*c2*theta/beta^2+3*c3*theta^2/beta^3+4*c4*theta^3/beta^4+5*c5*theta^4/beta^5+6*c6*theta^5/beta^6+7*c7*theta^6/beta^7+8*c8*theta^7/beta^8+9*c9*theta^8/beta^9;    f(3) = 2*c2/beta^2+6*c3*theta/beta^3+12*c4*theta^2/beta^4+20*c5*theta^3/beta^5+30*c6*theta^4/beta^6+42*c7*theta^5/beta^7+56*c8*theta^6/beta^8+72*c9*theta^7/beta^9;    f(4) = 6*c3/beta^3+24*c4*theta/beta^4+60*c5*theta^2/beta^5+120*c6*theta^3/beta^6+210*c7*theta^4/beta^7+336*c8*theta^5/beta^8+504*c9*theta^6/beta^9;end%%%%%%%%function [f,fd,fdd,fddd] = check_poly9bb(n,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)for i=1:n    theta = start+(ending-start)*(i-1)/(n-1);    [coords] = poly9b(theta,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending);    f(i) = coords(1);    fd(i) = coords(2);    fdd(i) = coords(3);    fddd(i) = coords(4);end%%%%%%%%function [f] = poly9b(tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% function [f(1),f(2),f(3),f(4)] = poly9(tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   tt  = camangle (deg.)%   Hs  = start height%   He  = end height%   Vs  = start velocity%   Ve  = end velocity%   As  = start acceleration%   Ae  = end acceleration%   Js  = start jerk%   Je  = end jerk%   start = start angle (deg.)%   ending = end angle (deg.)if isempty(Vs); Vs=0; endif isempty(Ve); Ve=0; endif isempty(As); As=0; endif isempty(Ae); Ae=0; endif isempty(Js); Js=0; endif isempty(Je); Je=0; end% Js=0;Je=0;dJs = 0;dJe = 0;fact=pi/180;beta = ending - start;beta=beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;else    c0 = Hs;    c1 = Vs*beta;    c2 = 1/2*As*beta^2;    c3 = 1/6*Js*beta^3;    c4 = 1/24*dJs*beta^4;    c5 = -70*Vs*beta-35/2*As*beta^2-126*Hs-5/24*dJs*beta^4+126*He-5/2*Js*beta^3+21/2*Ae*beta^2-Je*beta^3+1/24*dJe*beta^4-56*Ve*beta;    c6 = -56*Vs*beta-35/2*As*beta^2-84*Hs-4*c5-5/12*dJs*beta^4+84*He-10/3*Js*beta^3+7/2*Ae*beta^2-1/6*Je*beta^3-28*Ve*beta;    c7 = -21/2*As*beta^2-5/2*Js*beta^3-5/12*dJs*beta^4-6*c5-3*c6-28*Vs*beta-36*Hs+36*He-8*Ve*beta+1/2*Ae*beta^2;    c8 = -8*Vs*beta-7/2*As*beta^2-Js*beta^3-5/24*dJs*beta^4-4*c5-3*c6-2*c7-9*Hs+9*He-Ve*beta;    c9 = -Hs-Vs*beta-1/2*As*beta^2-1/6*Js*beta^3-1/24*dJs*beta^4-c5-c6-c7-c8+He;    f(1) = c0+c1*theta/beta+c2*theta^2/beta^2+c3*theta^3/beta^3+c4*theta^4/beta^4+c5*theta^5/beta^5+c6*theta^6/beta^6+c7*theta^7/beta^7+c8*theta^8/beta^8+c9*theta^9/beta^9;    f(2) = c1/beta+2*c2*theta/beta^2+3*c3*theta^2/beta^3+4*c4*theta^3/beta^4+5*c5*theta^4/beta^5+6*c6*theta^5/beta^6+7*c7*theta^6/beta^7+8*c8*theta^7/beta^8+9*c9*theta^8/beta^9;    f(3) = 2*c2/beta^2+6*c3*theta/beta^3+12*c4*theta^2/beta^4+20*c5*theta^3/beta^5+30*c6*theta^4/beta^6+42*c7*theta^5/beta^7+56*c8*theta^6/beta^8+72*c9*theta^7/beta^9;    f(4) = 6*c3/beta^3+24*c4*theta/beta^4+60*c5*theta^2/beta^5+120*c6*theta^3/beta^6+210*c7*theta^4/beta^7+336*c8*theta^5/beta^8+504*c9*theta^6/beta^9;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [fddmax] = check_poly10a(const,n,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)for i=1:n    theta = start+(ending-start)*(i-1)/(n-1);    [coords] = poly10(const,theta,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending);    f(i) = coords(1);    fd(i) = coords(2);    fdd(i) = coords(3);    fddd(i) = coords(4);endfddmax=max(abs(fdd));%%%%%%%%function [f,fd,fdd,fddd] = check_poly10b(const,n,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)for i=1:n    theta = start+(ending-start)*(i-1)/(n-1);    [coords] = poly10(const,theta,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending);    f(i) = coords(1);    fd(i) = coords(2);    fdd(i) = coords(3);    fddd(i) = coords(4);end%%%%%%%%function [f] = poly10(const,tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% function [f(1),f(2),f(3),f(4)] = poly10(const,tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   const(1)  = coefficient c8%   const(2)  = coefficient c9%   const(3)  = coefficient c10%   tt  = camangle (deg.)%   Hs  = start height%   He  = end height%   Vs  = start velocity%   Ve  = end velocity%   As  = start acceleration%   Ae  = end acceleration%   Js  = start jerk%   Je  = end jerk%   start = start angle (deg.)%   ending = end angle (deg.)if isempty(Vs); Vs=0; endif isempty(Ve); Ve=0; endif isempty(As); As=0; endif isempty(Ae); Ae=0; endif isempty(Js); Js=0; endif isempty(Je); Je=0; endc8 = const(1);c9 = const(2);c10 = const(3);fact=pi/180;beta = ending - start;beta=beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;else    c0 = Hs;    c1 = Vs*beta;    c2 = 1/2*As*beta^2;    c3 = 1/6*Js*beta^3;    c4 = c8+4*c9+10*c10-35*Hs-20*Vs*beta-5*As*beta^2-2/3*Js*beta^3+35*He-15*Ve*beta+5/2*Ae*beta^2-1/6*Je*beta^3;    c5 = -3*c4-c8-3*c9-6*c10-21*Hs-15*Vs*beta-5*As*beta^2-Js*beta^3+21*He-6*Ve*beta+1/2*Ae*beta^2;    c6 = -6*Vs*beta-5/2*As*beta^2-2/3*Js*beta^3-3*c4-2*c5+2*c9-7*Hs+3*c10+7*He+c8-Ve*beta;    c7 = -Hs-Vs*beta-1/2*As*beta^2-1/6*Js*beta^3-c4-c5-c6+He-c8-c9-c10;    f(1) = c0+c1*theta/beta+c2*theta^2/beta^2+c3*theta^3/beta^3+c4*theta^4/beta^4+c5*theta^5/beta^5+c6*theta^6/beta^6+c7*theta^7/beta^7+c8*theta^8/beta^8+c9*theta^9/beta^9+c10*theta^10/beta^10;    f(2) = c1/beta+2*c2*theta/beta^2+3*c3*theta^2/beta^3+4*c4*theta^3/beta^4+5*c5*theta^4/beta^5+6*c6*theta^5/beta^6+7*c7*theta^6/beta^7+8*c8*theta^7/beta^8+9*c9*theta^8/beta^9+10*c10*theta^9/beta^10;    f(3) = 2*c2/beta^2+6*c3*theta/beta^3+12*c4*theta^2/beta^4+20*c5*theta^3/beta^5+30*c6*theta^4/beta^6+42*c7*theta^5/beta^7+56*c8*theta^6/beta^8+72*c9*theta^7/beta^9+90*c10*theta^8/beta^10;    f(4) = 6*c3/beta^3+24*c4*theta/beta^4+60*c5*theta^2/beta^5+120*c6*theta^3/beta^6+210*c7*theta^4/beta^7+336*c8*theta^5/beta^8+504*c9*theta^6/beta^9+720*c10*theta^7/beta^10;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [fddmax] = check_poly7a(const,n,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)for i=1:n    theta = start+(ending-start)*(i-1)/(n-1);    [coords] = poly7b(const,theta,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending);    f(i) = coords(1);    fd(i) = coords(2);    fdd(i) = coords(3);    fddd(i) = coords(4);endfddmax=max(abs(fdd));%%%%%%%%function [f,fd,fdd,fddd] = check_poly7b(const,n,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)for i=1:n    theta = start+(ending-start)*(i-1)/(n-1);    [coords] = poly7b(const,theta,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending);    f(i) = coords(1);    fd(i) = coords(2);    fdd(i) = coords(3);    fddd(i) = coords(4);end%%%%%%%%function [f] = poly7b(const,tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% function [f(1),f(2),f(3),f(4)] = poly7(const,tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   const(1)  = coefficient c6%   const(2)  = coefficient c7%   tt  = camangle (deg.)%   Hs  = start height%   He  = end height%   Vs  = start velocity%   Ve  = end velocity%   As  = start acceleration%   Ae  = end acceleration%   Js  = start jerk%   Je  = end jerk%   start = start angle (deg.)%   ending = end angle (deg.)if isempty(Vs); Vs=0; endif isempty(Ve); Ve=0; endif isempty(As); As=0; endif isempty(Ae); Ae=0; endif isempty(Js); Js=0; endif isempty(Je); Je=0; endc6 = const(1);c7 = const(2);fact=pi/180;beta = ending - start;beta=beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;else    c0 = Hs;    c1 = Vs*beta;    c2 = 1/2*As*beta^2;    c3 = -3/2*As*beta^2-6*Vs*beta+10*He-3*c7-10*Hs-c6-4*Ve*beta+1/2*Ae*beta^2;    c4 = -4*Vs*beta-3/2*As*beta^2-2*c3+2*c7-5*Hs+c6+5*He-Ve*beta;    c5 = -Hs-Vs*beta-1/2*As*beta^2-c3-c4-c6-c7+He;    f(1) = c0+c1*theta/beta+c2*theta^2/beta^2+c3*theta^3/beta^3+c4*theta^4/beta^4+c5*theta^5/beta^5+c6*theta^6/beta^6+c7*theta^7/beta^7;    f(2) = c1/beta+2*c2*theta/beta^2+3*c3*theta^2/beta^3+4*c4*theta^3/beta^4+5*c5*theta^4/beta^5+6*c6*theta^5/beta^6+7*c7*theta^6/beta^7;    f(3) = 2*c2/beta^2+6*c3*theta/beta^3+12*c4*theta^2/beta^4+20*c5*theta^3/beta^5+30*c6*theta^4/beta^6+42*c7*theta^5/beta^7;    f(4) = 6*c3/beta^3+24*c4*theta/beta^4+60*c5*theta^2/beta^5+120*c6*theta^3/beta^6+210*c7*theta^4/beta^7;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [fddmax] = check_poly11a(const,n,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)for i=1:n    theta = start+(ending-start)*(i-1)/(n-1);    [coords] = poly11(const,theta,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending);    f(i) = coords(1);    fd(i) = coords(2);    fdd(i) = coords(3);    fddd(i) = coords(4);endfddmax=max(abs(fdd));%%%%%%%%function [f,fd,fdd,fddd] = check_poly11b(const,n,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)for i=1:n    theta = start+(ending-start)*(i-1)/(n-1);    [coords] = poly11(const,theta,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending);    f(i) = coords(1);    fd(i) = coords(2);    fdd(i) = coords(3);    fddd(i) = coords(4);end%%%%%%%%function [f] = poly11(const,tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% function [f(1),f(2),f(3),f(4)] = poly10(const,tt,Hs,He,Vs,Ve,As,Ae,Js,Je,start,ending)% Determines the follower displacement, velocity, acceleration, and jerk.% Inputs are:%   const(1)  = coefficient c8%   const(2)  = coefficient c9%   const(3)  = coefficient c10%   const(4)  = coefficient c11%   tt  = camangle (deg.)%   Hs  = start height%   He  = end height%   Vs  = start velocity%   Ve  = end velocity%   As  = start acceleration%   Ae  = end acceleration%   Js  = start jerk%   Je  = end jerk%   start = start angle (deg.)%   ending = end angle (deg.)if isempty(Vs); Vs=0; endif isempty(Ve); Ve=0; endif isempty(As); As=0; endif isempty(Ae); Ae=0; endif isempty(Js); Js=0; endif isempty(Je); Je=0; endc8 = const(1);c9 = const(2);c10 = const(3);c11 = const(4);fact = pi/180;beta = ending - start;beta = beta*fact;rise = abs(He-Hs);theta=tt-start;theta=theta*fact;if He-Hs == 0    f(1) = Hs;    f(2) = 0;    f(3) = 0;    f(4) = 0;else    c0 = Hs;    c1 = Vs*beta;    c2 = 1/2*As*beta^2;    c3 = 1/6*Js*beta^3;    c4 = c8+4*c9+10*c10+20*c11-35*Hs-20*Vs*beta-5*As*beta^2-2/3*Js*beta^3+35*He-15*Ve*beta+5/2*Ae*beta^2-1/6*Je*beta^3;    c5 = -3*c4-c8-3*c9-6*c10-10*c11-21*Hs-15*Vs*beta-5*As*beta^2-Js*beta^3+21*He-6*Ve*beta+1/2*Ae*beta^2;    c6 = -6*Vs*beta-5/2*As*beta^2-2/3*Js*beta^3-3*c4-2*c5+2*c9-7*Hs+3*c10+4*c11+c8+7*He-Ve*beta;    c7 = -Hs-Vs*beta-1/2*As*beta^2-1/6*Js*beta^3-c4-c5-c6-c11-c8-c9-c10+He;    f(1) = c0+c1*theta/beta+c2*theta^2/beta^2+c3*theta^3/beta^3+c4*theta^4/beta^4+c5*theta^5/beta^5+...        c6*theta^6/beta^6+c7*theta^7/beta^7+c8*theta^8/beta^8+c9*theta^9/beta^9+c10*theta^10/beta^10+c11*theta^11/beta^11;    f(2) = c1/beta+2*c2*theta/beta^2+3*c3*theta^2/beta^3+4*c4*theta^3/beta^4+5*c5*theta^4/beta^5+...        6*c6*theta^5/beta^6+7*c7*theta^6/beta^7+8*c8*theta^7/beta^8+9*c9*theta^8/beta^9+10*c10*theta^9/beta^10+11*c11*theta^10/beta^11;    f(3) = 2*c2/beta^2+6*c3*theta/beta^3+12*c4*theta^2/beta^4+20*c5*theta^3/beta^5+30*c6*theta^4/beta^6+...        42*c7*theta^5/beta^7+56*c8*theta^6/beta^8+72*c9*theta^7/beta^9+90*c10*theta^8/beta^10+110*c11*theta^9/beta^11;    f(4) = 6*c3/beta^3+24*c4*theta/beta^4+60*c5*theta^2/beta^5+120*c6*theta^3/beta^6+210*c7*theta^4/beta^7+...        336*c8*theta^5/beta^8+504*c9*theta^6/beta^9+720*c10*theta^7/beta^10+990*c11*theta^8/beta^11;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [fddmax] = acc_check(yvals,y1,y2,xvals,N,Fi,Fe,Fdi,Fde)% function [fddmax] = acc_check(yvals,xvals,N)% Checks the maximum acceleration from function 'acc_spline'% y1,y2 = initial and final y-values, not part of optimization% xvals = acceleration vector for x-nodes% yvals = acceleration vector for y-nodes% dt = division between points to compute on the x-axis% f,fd,fdd,fddd = position and its derivatives for the spline% N = number of points to calculate% sp=spline(xvals(1:(length(xvals)-1)),[0 yvals(1:(length(yvals)-1)) 0]);yvals=[y1 yvals y2];sp=spline(xvals,[0 yvals 0]);[breaks,coefs,pieces,order]=unmkpp(sp);dt=(xvals(length(xvals))-xvals(1))/(N-1);t=[xvals(1):dt:xvals(length(xvals))];fdd=spline(xvals,[0 yvals 0],t);fddmax=max(abs(fdd));%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [f,fd,fdd,fddd,t] = acc_spline(yvals,xvals,N,Fi,Fe,Fdi,Fde)% function [f,fd,fdd,fddd,theta] = acc_spline(xvals,yvals,N)% Fits a cubic spline through the acceleration points (xvals,yvals)% xvals = acceleration vector for x-nodes% yvals = acceleration vector for y-nodes% dt = division between points to compute on the x-axis% f,fd,fdd,fddd = position and its derivatives for the spline% N = number of points to calculate% Convert to radians% fact=pi/180; xvals=xvals*fact;fact=pi/180;xvals=xvals*fact;Fddp=spline(xvals,[0 yvals 0]);[breaks,coefs,pieces,order]=unmkpp(Fddp);dt=(xvals(length(xvals))-xvals(1))/(N-1);t=[breaks(1):dt:breaks(pieces+1)];j=0;theta=0;f=Fi; fd=Fdi; fdd=0; fddd=0;for i=1:pieces    Fdd=coefs(i,:);    Fd=polyint(Fdd,fd(length(fd)));    F=polyint(Fd,f(length(f)));    Fddd=polyder(Fdd);    while theta < breaks(i+1)        j=j+1;        theta=t(j);        f(j)=polyval(F,theta-breaks(i));        fd(j)=polyval(Fd,theta-breaks(i));        fdd(j)=polyval(Fdd,theta-breaks(i));        fddd(j)=polyval(Fddd,theta-breaks(i));    endend% Fp=mkpp(breaks,F);% Fdp=mkpp(breaks,Fd);% Fdddp=mkpp(breaks,Fddd);% % fdd=ppval(Fddp,t);% fd=ppval(Fdp,t);% f=ppval(Fp,t);% fddd=ppval(Fdddp,t);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [c,ceq] = area_const(yvals,y1,y2,xvals,N,Fi,Fe,Fdi,Fde)% function [c,ceq] = area_const(yvals,xvals,N,pos,vel)% Checks the area under the acceleration and velocity curves% y1,y2 = initial and final y-values, not part of optimization% xvals = acceleration vector for x-nodes% yvals = acceleration vector for y-nodes% dt = division between points to compute on the x-axis% f,fd,fdd,fddd = position and its derivatives for the spline% N = number of points to calculate% pos,vel = Position and Velocity final values% ceq = equality constraintyvals=[y1 yvals y2];fact=pi/180;xvals=xvals*fact;Fddp=spline(xvals,[0 yvals 0]);[breaks,coefs,pieces,order]=unmkpp(Fddp);dt=(xvals(length(xvals))-xvals(1))/(N-1);t=[breaks(1):dt:breaks(pieces+1)];j=0;theta=0;f=Fi; fd=Fdi;for i=1:pieces    Fdd=coefs(i,:);    Fd=polyint(Fdd,fd(length(fd)));    F=polyint(Fd,f(length(f)));    while theta < breaks(i+1)        j=j+1;        theta=t(j);        f(j)=polyval(F,theta-breaks(i));        fd(j)=polyval(Fd,theta-breaks(i));        fdd(j)=polyval(Fdd,theta-breaks(i));    endendf1=f(length(f));f2=fd(length(fd));ceq(1) = (Fde-f2)^2;ceq(2) = (Fe-f1)^2;c=[];
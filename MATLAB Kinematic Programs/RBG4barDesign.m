function []=rbg_4bar_dsgn(Action, Argument2)% MATLAB program for analyzing four-bar mechanisms for ridig body guidance  %Variables%ax1     = x coordinate of coupler coordinate system in position 1%ay1     = y coordinate of coupler coordinate system in position 1%ax2     = x coordinate of coupler coordinate system in position 2%ay2     = y coordinate of coupler coordinate system in position 2%ax3     = x coordinate of coupler coordinate system in position 3%ay3     = y coordinate of coupler coordinate system in position 3%bx1     = x coordinate of coupler line in position 1%by1     = y coordinate of coupler line in position 1%bx2     = x coordinate of coupler line in position 2%by2     = y coordinate of coupler line in position 2%bx3     = x coordinate of coupler line in position 3%by3     = y coordinate of coupler line in position 3%theta1  = angle from frame x axis to coupler x axis in position 1 (degrees)%theta2  = angle from frame x axis to coupler x axis in position 2 (degrees)%theta3  = angle from frame x axis to coupler x axis in position 3 (degrees)%acx(i)  = x coordinate of circle point relative to fixed system for position i%acy(i)  = y coordinate of circle point relative to fixed system for position i%XC1     = x coordinate of first circle point relative to coupler coordinate system%YC1     = y coordinate of first circle point relative to coupler coordinate system%XC2     = x coordinate of second circle point relative to coupler coordinate system%YC2     = y coordinate of second circle point relative to coupler coordinate system%Astar   = coordinates of center point corresponding to [XC1, YC1]%Bstar   = coordinates of center point corresponding to [XC2, YC2]%p12     = coordinates of pole between positions 1 and 2%p13     = coordinates of pole between positions 1 and 3%p23     = coordinates of pole between positions 2 and 3%p23prime= coordinates of image pole corresponding to p23%pflagij = pole ij flag.  If pflagij = 1, the pole ij is at infinity; if %          pflagij = 0, pole ij is finite.% This program uses the following m.files.  These must be located in the same directory% or the path to the routines must be clearly defined:%	centerpoint.m - Routine for finding center point given circle point%	circlepoint.m - Routine for finding circle point given center point%	assemblymode.m - Routine to find assembly mode%	fourbar.m - Routine to analyze four-bar linkage%	circle.m - Routine to determine the coordinates of a circle%	ipole.m - Routine to find image pole given displacement poles%	pole.m - Routine to find displacement poles%	bushing.m - Routine to find coordinates of a bushing%   show_me_logo.m%   me_logo.m%   pole2.m%   axisadjust.m%   rbg_4Bar_ana.m%Program  global g_AnaResglobal nCheckCenter1global nCheckCenter2d2r=pi/180;r2d=180/pi;if nargin == 0 && isempty(findobj('Tag','rbg_4bar_dsgn'))% RBG4barDesign is being initialized	Action = 'initialize';   elseif nargin == 0 && ~isempty(findobj('Tag','rbg_4bar_dsgn'))	  % RBG4barDesign is already open   Action = 'None';endif ~strcmp(Action,'initialize')&& ~strcmp(Action,'Help')		% retrieve the previous data from the   a = findobj('Tag','rbg_4bar_dsgn');		% userdata of some objects   UD=a.UserData;   handles = UD.hand;   h_astarx = handles(1);   h_astary = handles(2);   Astarx = get(h_astarx,'userdata');   Astary = get(h_astary,'userdata');   h_bstarx = handles(3);   h_bstary = handles(4);   Bstarx = get(h_bstarx,'userdata');   Bstary = get(h_bstary,'userdata');      h_ax = handles(5);   h_ay = handles(6);   fx1 = get(h_ax,'userdata');   fy1 = get(h_ay,'userdata');   h_bx = handles(7);   h_by = handles(8);   fx2 = get(h_bx,'userdata');   fy2 = get(h_by,'userdata');%###########################################################################################################      h_cx1 = handles(24);   h_cy1 = handles(25);   px1 = get(h_cx1,'userdata');   py1 = get(h_cy1,'userdata');   h_cx2 = handles(26);   h_cy2 = handles(27);   px2 = get(h_cx2,'userdata');   py2 = get(h_cy2,'userdata');   h_cx3 = handles(28);   h_cy3 = handles(29);   px3 = get(h_cx3,'userdata');   py3 = get(h_cy3,'userdata');   h_cx4 = handles(30);   h_cy4 = handles(31);   px4 = get(h_cx4,'userdata');   py4 = get(h_cy4,'userdata');   h_cx5 = handles(32);   h_cy5 = handles(33);   px5 = get(h_cx5,'userdata');   py5 = get(h_cy5,'userdata');   h_cx6 = handles(34);   h_cy6 = handles(35);   px6 = get(h_cx6,'userdata');   py6 = get(h_cy6,'userdata');%###########################################################################################################        h_posx = handles(9:11);   h_posy = handles(12:14);   h_theta = handles(15:17);   for n = 1:3      ax(n) = get(h_posx(n),'userdata');      ay(n) = get(h_posy(n),'userdata');      theta(n) = get(h_theta(n),'userdata');  end    % Compensation with 0.1 degree when 2 positions are parallel ************      if theta(1) == theta(2)          theta(1) = theta(1)+.1;      elseif theta(1) == theta(3)          theta(1) = theta(1)+.1;      elseif theta(2) == theta(3)          theta(2) = theta(2)+.1;      end  %************************************************************************         ax1 = ax(1);   ay1 = ay(1);   theta1 = theta(1);   ax2 = ax(2);   ay2 = ay(2);   theta2 = theta(2);   ax3 = ax(3);   ay3 = ay(3);   theta3 = theta(3);      h_r1txt =  handles(18);   h_r2txt =  handles(19);   h_r3txt =  handles(20);   h_r4txt =  handles(21);   h_status = handles(22);   Grashof_Type = handles(23);         % Grashof Type       b = findobj('Tag','rbg_4bar_axes');   handles = get(b,'userdata');   position1 = handles(1);   position2 = handles(2);   position3 = handles(3);   a1 = handles(4);   a2 = handles(5);   a3 = handles(6);   pole12 = handles(7);   pole13 = handles(8);   pole23 = handles(9);   ipole23 = handles(10);   scircle = handles(11);   icircle23 = handles(12);   icircle12 = handles(13);   icircle13 = handles(14);   joint1 = handles(15);   joint2 = handles(16);   joint3 = handles(17);   joint4 = handles(18);   crank1 = handles(19);   crank2 = handles(20);     coupler1 = handles(21);   %########################################################################################################   boxline = handles(28);   %########################################################################################################   coupler2 = handles(22);   hinge1 = handles(23);   hinge2 = handles(24);   patch_1 = handles(25);   patch_2 = handles(26);   Grashof_Type = handles(27);         % Grashof Type        set(h_status,'String','');end  switch Action   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	Initialize the User Interface%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case  'initialize'   if nargin >= 2 || ~isempty(findobj('tag','menu_page'))   	nBetaflag = 1;   	nCheckCenter1 = 1;   	nCheckCenter2 = 1;   	LocalOpenFig;   	RBG4barDesign('Draw Axes');   else   	show_me_logo('initialize','RBG4barDesign');   end   case 'Draw Axes'   % Identify vectors giving the three components of a and b on the coupler.   drawfact=20;   height=0.8;   width=0.8;   fact=pi/180;   theta1r=theta1*fact;   theta2r=theta2*fact;   theta3r=theta3*fact;   ax=[ax1 ax2 ax3];   ay=[ay1 ay2 ay3];   bx=[ax1+cos(theta1r) ax2+cos(theta2r) ax3+cos(theta3r)];   by=[ay1+sin(theta1r) ay2+sin(theta2r) ay3+sin(theta3r)];   drawlim1=max([max(ax); max(ay); max(bx); max(by)]);   drawlim2=min([max(ax); min(ay); min(bx); min(by)]);   drawlim=drawfact*max([abs(drawlim1); abs(drawlim2)]);% Identify poles using pole.m function.% the original equations to calculate the pole locations   p12=pole([ax(1);ay(1)],[ax(2);ay(2)],[bx(1);by(1)],[bx(2);by(2)]);   p13=pole([ax(1);ay(1)],[ax(3);ay(3)],[bx(1);by(1)],[bx(3);by(3)]);   p23=pole([ax(2);ay(2)],[ax(3);ay(3)],[bx(2);by(2)],[bx(3);by(3)]);   % another equations to calculate the pole locations by calling pole2 function   Newp12=pole2([ax(1);ay(1)],[ax(2);ay(2)],theta1,theta2);   Newp13=pole2([ax(1);ay(1)],[ax(3);ay(3)],theta1,theta3);   Newp23=pole2([ax(2);ay(2)],[ax(3);ay(3)],theta2,theta3);   pflag12=p12(3);   pflag13=p13(3);   pflag23=p23(3);   pflagtot=pflag12+pflag13+pflag23;% Identify the image pole p'23   p23prime=ipole(p12,p13,p23);   p12prime=ipole(p23,p13,p12);   p13prime=ipole(p12,p23,p13);   % find the coordinates of those three circles for assembly feasibility   x23 = (p12(1) + p13(1))/2;   y23 = (p12(2) + p13(2))/2;   r23 = sqrt((p12(1)-x23)^2+(p12(2)-y23)^2);   x12 = (p13(1) + p23prime(1))/2;   y12 = (p13(2) + p23prime(2))/2;   r12 = sqrt((p13(1)-x12)^2+(p23prime(2)-y12)^2);   x13 = (p12(1) + p23prime(1))/2;   y13 = (p12(2) + p23prime(2))/2;   r13 = sqrt((p12(1)-x13)^2+(p23prime(2)-y13)^2);   i23 = circle2(r23,x23,y23,30);   i12 = circle2(r12,x12,y12,30);   i13 = circle2(r13,x13,y13,30);	prime23circle = [x23 y23 r23];	prime12circle = [x12 y12 r12];	prime13circle = [x13 y13 r13];     % Find the circle of sliders relative to the coupler if the poles are finite.   center(1)=drawfact;   center(2)=drawfact;   center(3)=1;   if pflagtot==0;	  center=pole([p12(1);p12(2)],[p13(1);p13(2)],[p13(1);p13(2)],...           [p23prime(1);p23prime(2)]);   end   x0=center(1);   y0=center(2);   dflag=center(3);   rc=sqrt((p12(1)-x0)^2+(p12(2)-y0)^2);% Draw the circle relative to the frame when the poles are all finite.   if pflagtot==0;      dalpha=2*pi/30;      for j=1:1:31         sx(j)=ax1;		   sy(j)=ay1;		   alpha=(j-1)*dalpha;		   if dflag==0			   sx(j)=x0+rc*cos(alpha);			   sy(j)=y0+rc*sin(alpha);		   end	   end   end% Draw straight line relative to the frame a pole lies at infinity	   if pflagtot>0      stline=cosline(p12,p13,p23,p23prime);      for j=1:1:31         sx(j)=stline(j,1);         sy(j)=stline(j,2);      end   end% If a pole is far from the positions, do not draw it   p12x=p12(1);   if abs(p12x) > drawlim; p12x=ax; end   p12y=p12(2);   if abs(p12y) > drawlim; p12y=ay; end   p13x=p13(1);   if abs(p13x) > drawlim; p13x=ax; end   p13y=p13(2);  if abs(p13y) > drawlim; p13y=ay; end   p23x=p23(1);   if abs(p23x) > drawlim; p23x=ax; end   p23y=p23(2);   if abs(p23y) > drawlim; p23y=ay; end% Find axis limits   cx=[ax, bx, p12x, p13x, p23x, sx, i23(:,1)', i12(:,1)', i13(:,1)', ...       px1,px2, px3, px4, px5, px6];   cy=[ay, by, p12y, p13y, p23y, sy, i23(:,2)', i12(:,2)', i13(:,2)', ...       py1,py2, py3, py4, py5, py6];      minx=min(cx);   maxx=max(cx);   miny=min(cy);   maxy=max(cy);   rangex=maxx-minx;   rangey=maxy-miny;   xmin=minx-0.2*rangex;   xmax=maxx+0.2*rangex;   ymin=miny-0.2*rangey;   ymax=maxy+0.2*rangey;%    xmin=minx;%    xmax=maxx;%    ymin=miny;%    ymax=maxy;      values=axisadjust(xmin, xmax, ymin, ymax, width, height);   xmin=values(1);   xmax=values(2);   ymin=values(3);   ymax=values(4);   axis([xmin xmax ymin ymax]);% Plot the positions% To scale the length of the position line base on the axis size% make it one tenth of the axis x length.   f = (xmax-xmin)/10;   bx=[ax1+f*cos(theta1r) ax2+f*cos(theta2r) ax3+f*cos(theta3r)];   by=[ay1+f*sin(theta1r) ay2+f*sin(theta2r) ay3+f*sin(theta3r)];   set(position1, 'xdata', [ax(1) bx(1)], 'ydata', [ay(1) by(1)]);   set(position2, 'xdata', [ax(2) bx(2)], 'ydata', [ay(2) by(2)]);   set(position3, 'xdata', [ax(3) bx(3)], 'ydata', [ay(3) by(3)]);   set(a1, 'xdata',ax(1), 'ydata', ay(1));   set(a2, 'xdata',ax(2), 'ydata', ay(2));   set(a3, 'xdata',ax(3), 'ydata', ay(3));         a = findobj('Tag','rbg_4bar_dsgn');   UD=a.UserData;   handles = UD.hand;%    handles(23:26) = [xmin xmax ymin ymax];%    handles(27:29) = bx;%    handles(30:32) = by;%###########################################################################################################   lim = [xmin xmax ymin ymax];   %handles(40:42) = bx;   %handles(43:45) = by;%###########################################################################################################      set(a,'userdata',struct('hand',handles,'wlim',lim,'Bx',bx,'By',by));   b = findobj('Tag','rbg_4bar_axes');   handles = get(b,'userdata');% Plot the poles   set(pole12, 'xdata',p12(1), 'ydata', p12(2));   set(pole13, 'xdata',p13(1), 'ydata', p13(2));   set(pole23, 'xdata',p23(1), 'ydata', p23(2));   set(ipole23, 'xdata',p23prime(1), 'ydata', p23prime(2));% Plot the slider circle and image pole circles   set(scircle, 'xdata',sx, 'ydata', sy);   set(icircle23, 'xdata',i23(:,1), 'ydata', i23(:,2));   set(icircle12, 'xdata',i12(:,1), 'ydata', i12(:,2));   set(icircle13, 'xdata',i13(:,1), 'ydata', i13(:,2));   scale=sqrt((max(ax)-min(ax))^2+(max(ay)-min(ay))^2);   rpivot=0.02*scale;   % The point selected is in the frame coordinate system.  Transform% the point to the coupler coordinate system.    st1=sin(theta1r);   ct1=cos(theta1r);   if nCheckCenter1 == 1      Astar(1)=Astarx;      Astar(2)=Astary;      Values = circlepoint (ax1,ay1,theta1,ax2,ay2,theta2,ax3,ay3,...            theta3, Astarx,Astary);      acx(1)=Values(1);      acy(1)=Values(2);      set(h_ax,'string',num2str(acx(1)),'userdata',acx(1));      set(h_ay,'string',num2str(acy(1)),'userdata',acy(1));   else % circle input	  XC1= (fx1-ax1)*ct1+(fy1-ay1)*st1;	  YC1= -(fx1-ax1)*st1+(fy1-ay1)*ct1;	% Compute first center point.      Values=centerpoint(ax1,ay1,theta1,ax2,ay2,theta2,...	       ax3,ay3,theta3,XC1,YC1);      Astar(1) = Values(1);      Astar(2) = Values(2);      for ii=1:1:3         acx(ii)=Values(2*ii+1);		   acy(ii)=Values(2*ii+2);      end      set(h_astarx,'string',num2str(Astar(1)),'userdata',Astar(1));      set(h_astary,'string',num2str(Astar(2)),'userdata',Astar(2));   end                  if nCheckCenter2 == 1      Bstar(1)=Bstarx;      Bstar(2)=Bstary;      Values = circlepoint (ax1,ay1,theta1,ax2,ay2,theta2,ax3,ay3,...            theta3, Bstarx,Bstary);      bcx(1)=Values(1);      bcy(1)=Values(2);      set(h_bx,'string',num2str(bcx(1)),'userdata',bcx(1));      set(h_by,'string',num2str(bcy(1)),'userdata',bcy(1));   else % circle input	   XC2= (fx2-ax1)*ct1+(fy2-ay1)*st1;	   YC2= -(fx2-ax1)*st1+(fy2-ay1)*ct1;%	% Compute second center point.%   	Values=centerpoint(ax1,ay1,theta1,ax2,ay2,theta2,ax3,ay3,...		     theta3,XC2,YC2);      Bstar(1) = Values(1);      Bstar(2) = Values(2);      for ii=1:1:3		   bcx(ii)=Values(2*ii+1);		   bcy(ii)=Values(2*ii+2);	   end         set(h_bstarx,'string',num2str(Bstar(1)),'userdata',Bstar(1));      set(h_bstary,'string',num2str(Bstar(2)),'userdata',Bstar(2));   end               % Find coordinates of first bushing and pin joint.				   ninc=20;     npoints=ninc+1;   centerptx=Astar(1);   centerpty=Astar(2);   coord=circle2(rpivot,centerptx,centerpty,ninc);% find coordinates of first pin   for i=1:1:npoints      xcoord1(i)=coord(i,1);      ycoord1(i)=coord(i,2);   end% find coordinates of first bushing   binc=ninc/2;   coord1=bushing(rpivot,centerptx,centerpty,binc,0);   bpoints=ninc/2+16;   for i=1:1:bpoints		xbush1(i)=coord1(i,1);		ybush1(i)=coord1(i,2);	end% draw the first bushing	set(joint1,'xdata', acx(1), 'ydata',acy(1));	set(joint2,'xdata', xcoord1, 'ydata',ycoord1);	set(hinge1,'xdata', xbush1,'ydata', ybush1);	set(crank1,'xdata', [acx(1) Astar(1)], 'ydata',[acy(1) Astar(2)]);% Find coordinates of second bushing and pin joint.					centerptx=Bstar(1);	centerpty=Bstar(2);	coord=circle2(rpivot,centerptx,centerpty,ninc);% find coordinates of second pin	for i=1:1:npoints		xcoord2(i)=coord(i,1);		ycoord2(i)=coord(i,2);	end% find coordinates of second bushing	coord2=bushing(rpivot,centerptx,centerpty,binc,0);	bpoints=ninc/2+16;	for i=1:1:bpoints		xbush2(i)=coord2(i,1);		ybush2(i)=coord2(i,2);	end  % draw the second bushing	set(joint3,'xdata', bcx(1), 'ydata',bcy(1));	set(joint4,'xdata', xcoord2, 'ydata',ycoord2);	set(hinge2,'xdata', xbush2,'ydata', ybush2);	set(crank2,'xdata', [bcx(1) Bstar(1)], 'ydata',[bcy(1) Bstar(2)]);	set(coupler1,'xdata',[acx(1),bcx(1)], 'ydata',[acy(1), bcy(1)]);    %#######################################################################################################    set(boxline, 'xdata',[px1, px2, px3, px4, px5, px6, px1], ...                 'ydata',[py1, py2, py3, py4, py5, py6, py1]);    %#######################################################################################################   % ***************************************************************% The linkage is defined. Now proceed with the analysis% ***************************************************************   temp=atan2((ay(1)-acy(1)), (ax(1)-acx(1)));   phi=atan2((bcy(1)-acy(1)), (bcx(1)-acx(1)));   beta1=temp-phi;   length1=sqrt((ay(1)-acy(1))^2 + (ax(1)-acx(1))^2);   temp=atan2((by(1)-acy(1)), (bx(1)-acx(1)));   beta2=temp-phi;   length2=sqrt((by(1)-acy(1))^2 + (bx(1)-acx(1))^2);   rc2=sqrt((ay(1)-bcy(1))^2+ (ax(1)-bcx(1))^2);   rc1=sqrt((ay(1)-acy(1))^2+ (ax(1)-acx(1))^2);   r2=sqrt((acx(1)-Astar(1))^2+ (acy(1)-Astar(2))^2);   r4=sqrt((bcx(1)-Bstar(1))^2+ (bcy(1)-Bstar(2))^2);   r1=sqrt((Bstar(1)-Astar(1))^2+ (Bstar(2)-Astar(2))^2);   r3=sqrt((bcx(1)-acx(1))^2+ (bcy(1)-acy(1))^2);   % display the link lengths on the screen   set(h_r1txt,'string',num2str(r1));   set(h_r2txt,'string',num2str(r2));   set(h_r3txt,'string',num2str(r3));   set(h_r4txt,'string',num2str(r4));   % display the Grashof Type on the screen	r(1) = str2num(get(h_r1txt,'string'));   	r(2) = str2num(get(h_r2txt,'string'));   	r(3) = str2num(get(h_r3txt,'string'));       r(4) = str2num(get(h_r4txt,'string')); 	[rnew,Inew]=sort(r);    if (rnew(1)+rnew(4)<rnew(2)+rnew(3))    		gType = 1;   else      gType = 2;   end   set(Grashof_Type,'string',num2str(gType));   % Determine the linkage mode by checking the first position.Q1=atan2((Bstar(2)-Astar(2)), (Bstar(1)-Astar(1)));Q2=atan2((acy(1)-Astar(2)), (acx(1)-Astar(1)));phi=atan2((bcy(1)-Bstar(2)), (bcx(1)-Bstar(1)));mode=assemblymode(r1,r2,r3,r4,Q1,Q2,phi);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Filemon Construction Part 1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    delta = atan((Bstar(2)-bcy(1))/(Bstar(1)-bcx(1)));      % angle is in radian    if ((Bstar(1) > bcx(1)) && (Bstar(2) > bcy(1)))            % alpha is in the 1st quarter area        alpha = delta;    end    if ((Bstar(1) < bcx(1)) && (Bstar(2) > bcy(1)))            % alpha is in the 2nd quarter area        alpha = pi+delta;    end    if ((Bstar(1) < bcx(1)) && (Bstar(2) < bcy(1)))            % alpha is in the 3rd quarter area        alpha = pi+delta;    end    if ((Bstar(1) > bcx(1)) && (Bstar(2) < bcy(1)))            % alpha is in the 4th quarter area        alpha = 2*pi+delta;    end        % Calculation of -phi_12 and -phi_13    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Coordinate of the three positions    a_xy=[ax1 ax2 ax3; ay1 ay2 ay3];    theta = (pi/180)*[theta1 theta2 theta3];        % angles are in radian        % Coordinate of the driven crank pivot    x1 = bcx(1);    y1 = bcy(1);        x_star=Bstar(1);    y_star=Bstar(2);        % Transformation Matrix    for i = 1;    R = [cos(theta(i)) -sin(theta(i)) a_xy(1,i); ...     sin(theta(i))  cos(theta(i)) a_xy(2,i); 0 0 1];    end    % Location of the driven crank pivot in the coupler coordi.    B = [x1 y1 1]';         % (x1, y1)    A = inv(R)*B;            % (X, Y)        % Calculation of x2, x3 and y2, y3    for i = 2:3    R = [cos(theta(i)) -sin(theta(i)) a_xy(1,i); ...     sin(theta(i))  cos(theta(i)) a_xy(2,i); 0 0 1];    C(:,i-1) = R*A;    i = i+1;    end        x2=C(1,1);    y2=C(2,1);    x3=C(1,2);    y3=C(2,2);        xy_i=[x1 x2 x3; y1 y2 y3];    pq_i=a_xy;        for i = 1:3    cos_phi = ((xy_i(1,i)-x_star)*(pq_i(1,i)-xy_i(1,i)) + (xy_i(2,i)-y_star)*(pq_i(2,i)-xy_i(2,i)))/ ...             sqrt(((xy_i(1,i)-x_star)^2+(xy_i(2,i)-y_star)^2)*((pq_i(1,i)-xy_i(1,i))^2+(pq_i(2,i)-xy_i(2,i))^2));    sin_phi = ((xy_i(1,i)-x_star)*(pq_i(2,i)-xy_i(2,i)) - (xy_i(2,i)-y_star)*(pq_i(1,i)-xy_i(1,i)))/ ...             sqrt(((xy_i(1,i)-x_star)^2+(xy_i(2,i)-y_star)^2)*((pq_i(1,i)-xy_i(1,i))^2+(pq_i(2,i)-xy_i(2,i))^2));            phi_i(1,i) = 2*atan(sin_phi/(1+cos_phi));    i=i+1;    end        phi_12 = (phi_i(2)-phi_i(1));    phi_13 = (phi_i(3)-phi_i(1));    minus_phi12 = -phi_12;       % the angle is in radian    minus_phi13 = -phi_13;       % the angle is in radian        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%            x = xmin:0.01:xmax;% Calculation of the length(L) of Filemon lines   L = sqrt(xmax^2 + ymax^2)*12;   % coordinates for the patch_1(for minus_phi_12) and patch_2(for minus_phi_13)    % define assistant point for patch_1   if abs(L*cos(alpha)) > abs(L*cos(alpha+minus_phi12))       P_patch_1(1,1) = bcx(1)+L*cos(alpha);       P_patch_1(2,1) = bcx(1)-L*cos(alpha);   else       P_patch_1(1,1) = bcx(1)+L*cos(alpha+minus_phi12);       P_patch_1(2,1) = bcx(1)-L*cos(alpha+minus_phi12);   end      if abs(L*sin(alpha)) > abs(L*sin(alpha+minus_phi12))       P_patch_1(1,2) = bcy(1)+L*sin(alpha);       P_patch_1(2,2) = bcy(1)-L*sin(alpha);   else       P_patch_1(1,2) = bcy(1)+L*sin(alpha+minus_phi12);       P_patch_1(2,2) = bcy(1)-L*sin(alpha+minus_phi12);   end               x_patch_1 = [bcx(1) bcx(1)+L*cos(alpha) P_patch_1(1,1) bcx(1)+L*cos(alpha+minus_phi12) bcx(1) ...                 bcx(1)-L*cos(alpha+minus_phi12) P_patch_1(2,1) bcx(1)-L*cos(alpha)];   y_patch_1 = [bcy(1) bcy(1)+L*sin(alpha) P_patch_1(1,2) bcy(1)+L*sin(alpha+minus_phi12) bcy(1) ...                 bcy(1)-L*sin(alpha+minus_phi12) P_patch_1(2,2) bcy(1)-L*sin(alpha)];        % define assistant point for patch_2    if abs(L*cos(alpha)) > abs(L*cos(alpha+minus_phi13))       P_patch_2(1,1) = bcx(1)+L*cos(alpha);       P_patch_2(2,1) = bcx(1)-L*cos(alpha);   else       P_patch_2(1,1) = bcx(1)+L*cos(alpha+minus_phi13);       P_patch_2(2,1) = bcx(1)-L*cos(alpha+minus_phi13);   end      if abs(L*sin(alpha)) > abs(L*sin(alpha+minus_phi13))       P_patch_2(1,2) = bcy(1)+L*sin(alpha);       P_patch_2(2,2) = bcy(1)-L*sin(alpha);   else       P_patch_2(1,2) = bcy(1)+L*sin(alpha+minus_phi13);       P_patch_2(2,2) = bcy(1)-L*sin(alpha+minus_phi13);   end   x_patch_2 = [bcx(1) bcx(1)+L*cos(alpha) P_patch_2(1,1) bcx(1)+L*cos(alpha+minus_phi13) bcx(1) ...                 bcx(1)-L*cos(alpha+minus_phi13) P_patch_2(2,1) bcx(1)-L*cos(alpha)];   y_patch_2 = [bcy(1) bcy(1)+L*sin(alpha) P_patch_2(1,2) bcy(1)+L*sin(alpha+minus_phi13) bcy(1) ...                 bcy(1)-L*sin(alpha+minus_phi13) P_patch_2(2,2) bcy(1)-L*sin(alpha)];    set(patch_1,'xdata',x_patch_1,'ydata',y_patch_1);    set(patch_2,'xdata',x_patch_2,'ydata',y_patch_2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   % To be able to move objects (including the circle points, center points, and the% three positions and their angles) by mouse, individual object buttondownfcn need to% be definied.    set([joint1],...  'buttondownfcn','RBG4barDesign(''Set Calls'',1);RBG4barDesign(''Move'',1)');set([joint3],...  'buttondownfcn','RBG4barDesign(''Set Calls'',2);RBG4barDesign(''Move'',2)');set([hinge1 joint2],...  'buttondownfcn','RBG4barDesign(''Set Calls'',3);RBG4barDesign(''Move'',3)');set([hinge2 joint4],...  'buttondownfcn','RBG4barDesign(''Set Calls'',4);RBG4barDesign(''Move'',4)');set([a1],...  'buttondownfcn','RBG4barDesign(''Set Calls'',5);RBG4barDesign(''Move Pos'',1)');set([a2],...  'buttondownfcn','RBG4barDesign(''Set Calls'',6);RBG4barDesign(''Move Pos'',2)');set([a3],...  'buttondownfcn','RBG4barDesign(''Set Calls'',7);RBG4barDesign(''Move Pos'',3)');set([position1],...  'buttondownfcn','RBG4barDesign(''Set Calls'',8);RBG4barDesign(''Move Ang'',1)');set([position2],...  'buttondownfcn','RBG4barDesign(''Set Calls'',9);RBG4barDesign(''Move Ang'',2)');set([position3],...  'buttondownfcn','RBG4barDesign(''Set Calls'',10);RBG4barDesign(''Move Ang'',3)');   case 'Set Calls' % get the handle of the objects used to control% the mouse input    a = findobj('Tag','rbg_4bar_dsgn');   % Assign different function calls to windowbuttonmotionfcn when users try to move different point      if Argument2 == 1      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_4bar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBG4barDesign(''Move'',1)');   elseif  Argument2 == 2      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_4bar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBG4barDesign(''Move'',2)');   elseif  Argument2 == 3      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_4bar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBG4barDesign(''Move'',3)');   elseif  Argument2 == 4      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_4bar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBG4barDesign(''Move'',4)');   elseif  Argument2 == 5      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_4bar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBG4barDesign(''Move Pos'',1)');   elseif  Argument2 == 6      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_4bar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBG4barDesign(''Move Pos'',2)');   elseif  Argument2 == 7      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_4bar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBG4barDesign(''Move Pos'',3)');   elseif  Argument2 == 8      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_4bar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBG4barDesign(''Move Ang'',1)');   elseif  Argument2 == 9      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_4bar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBG4barDesign(''Move Ang'',2)');   elseif  Argument2 == 10      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_4bar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBG4barDesign(''Move Ang'',3)');   end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The Callbacks When The User Moves the Mouse Button.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'Move'% Find out where the mouse pointer is located.   set(h_status,'string','');   a = findobj('Tag','rbg_4bar_dsgn');   UD=a.UserData;%    bx = hdls(27:29);%    by = hdls(30:32);%###########################################################################################################   bx = UD.Bx;   by = UD.By;%###########################################################################################################   b = findobj('Tag','rbg_4bar_axes');   hdls = get(b,'userdata');   fact=pi/180;   theta1r=theta1*fact;   theta2r=theta2*fact;   theta3r=theta3*fact;   ax=[ax1 ax2 ax3];   ay=[ay1 ay2 ay3];   bx=[ax1+cos(theta1r) ax2+cos(theta2r) ax3+cos(theta3r)];   by=[ay1+sin(theta1r) ay2+sin(theta2r) ay3+sin(theta3r)];   scale=sqrt((max(ax)-min(ax))^2+(max(ay)-min(ay))^2);   rpivot=0.02*scale; 	pt = get(b,'currentpoint');   pt = pt(1,1:2);   % First set both nCheckCenter1 and nCheckCenter2 1, so that% this program will read in two center points as default% While Argument2 = 1 or 2 ( users try to move circle points% around), nCheckCenter1 or nCheckCenter2 will become false (0) % and circle points are received as inputs and are calculated.      nCheckCenter1 = 1;   nCheckCenter2 = 1;      if Argument2 == 1      nCheckCenter1 = 0;   elseif Argument2 == 2      nCheckCenter2 = 0;   end      st1=sin(theta1r);   ct1=cos(theta1r);          if nCheckCenter1 == 1 % center point input      if Argument2 == 3% Astar read in the mouse current cursor         Astar(1)=pt(1);          Astar(2)=pt(2);      else            Astar(1)=Astarx;         Astar(2)=Astary;      end% Compute the first circle point.      Values = circlepoint (ax1,ay1,theta1,ax2,ay2,theta2,ax3,ay3,...            theta3, Astarx,Astary);      acx(1)=Values(1);      acy(1)=Values(2);   else % circle input% fx1, fy1 read in the mouse current cursor      if Argument2 == 1         fx1=pt(1);          fy1=pt(2);      end	   XC1= (fx1-ax1)*ct1+(fy1-ay1)*st1;	   YC1= -(fx1-ax1)*st1+(fy1-ay1)*ct1;	% Compute first center point.      Values=centerpoint(ax1,ay1,theta1,ax2,ay2,theta2,...	       ax3,ay3,theta3,XC1,YC1);      Astar(1) = Values(1);      Astar(2) = Values(2);      for ii=1:1:3         acx(ii)=Values(2*ii+1);		   acy(ii)=Values(2*ii+2);      end   end                  if nCheckCenter2 == 1 % center point input      if Argument2 == 4% Bstar read in the mouse current cursor         Bstar(1)=pt(1);          Bstar(2)=pt(2);      else            Bstar(1)=Bstarx;         Bstar(2)=Bstary;      end% Compute the second circle point.      Values = circlepoint (ax1,ay1,theta1,ax2,ay2,theta2,ax3,ay3,...            theta3, Bstarx,Bstary);      bcx(1)=Values(1);      bcy(1)=Values(2);   else % circle input% fx2, fy2 read in the mouse current cursor      if Argument2 == 2         fx2=pt(1);          fy2=pt(2);      end	   XC2= (fx2-ax1)*ct1+(fy2-ay1)*st1;	   YC2= -(fx2-ax1)*st1+(fy2-ay1)*ct1;	% Compute the second center point.   	Values=centerpoint(ax1,ay1,theta1,ax2,ay2,theta2,ax3,ay3,...		     theta3,XC2,YC2);      Bstar(1) = Values(1);      Bstar(2) = Values(2);      for ii=1:1:3		   bcx(ii)=Values(2*ii+1);		   bcy(ii)=Values(2*ii+2);	   end      end                     set(h_ax,'string',num2str(acx(1)),'userdata',acx(1));      set(h_ay,'string',num2str(acy(1)),'userdata',acy(1));      set(h_bx,'string',num2str(bcx(1)),'userdata',bcx(1));      set(h_by,'string',num2str(bcy(1)),'userdata',bcy(1));      set(h_astarx,'string',num2str(Astar(1)),'userdata',Astar(1));      set(h_astary,'string',num2str(Astar(2)),'userdata',Astar(2));      set(h_bstarx,'string',num2str(Bstar(1)),'userdata',Bstar(1));      set(h_bstary,'string',num2str(Bstar(2)),'userdata',Bstar(2));% Find coordinates of first bushing and pin joint.				   ninc=20;     npoints=ninc+1;   centerptx=Astar(1);   centerpty=Astar(2);   coord=circle2(rpivot,centerptx,centerpty,ninc);% find coordinates of first pin   for i=1:1:npoints      xcoord1(i)=coord(i,1);      ycoord1(i)=coord(i,2);   end% find coordinates of first bushing   binc=ninc/2;   coord1=bushing(rpivot,centerptx,centerpty,binc,0);   bpoints=ninc/2+16;   for i=1:1:bpoints		xbush1(i)=coord1(i,1);		ybush1(i)=coord1(i,2);	end% draw the first bushing	set(joint1,'xdata', acx(1), 'ydata',acy(1));	set(joint2,'xdata', xcoord1, 'ydata',ycoord1);	set(hinge1,'xdata', xbush1,'ydata', ybush1);	set(crank1,'xdata', [acx(1) Astar(1)], 'ydata',[acy(1) Astar(2)]);% Find coordinates of second bushing and pin joint.					centerptx=Bstar(1);	centerpty=Bstar(2);	coord=circle2(rpivot,centerptx,centerpty,ninc);% find coordinates of second pin	for i=1:1:npoints		xcoord2(i)=coord(i,1);		ycoord2(i)=coord(i,2);	end% find coordinates of second bushing	coord2=bushing(rpivot,centerptx,centerpty,binc,0);	bpoints=ninc/2+16;	for i=1:1:bpoints		xbush2(i)=coord2(i,1);		ybush2(i)=coord2(i,2);	end   % draw the second bushing	set(joint3,'xdata', bcx(1), 'ydata',bcy(1));	set(joint4,'xdata', xcoord2, 'ydata',ycoord2);	set(hinge2,'xdata', xbush2,'ydata', ybush2);	set(crank2,'xdata', [bcx(1) Bstar(1)], 'ydata',[bcy(1) Bstar(2)]);	set(coupler1,'xdata',[acx(1),bcx(1)], 'ydata',[acy(1), bcy(1)]);    %#######################################################################################################    set(boxline, 'xdata',[px1, px2, px3, px4, px5, px6, px1], ...                 'ydata',[py1, py2, py3, py4, py5, py6, py1]);    %#######################################################################################################          % ***************************************************************% The linkage is defined. Now proceed with the analysis% ***************************************************************   temp=atan2((ay(1)-acy(1)), (ax(1)-acx(1)));   phi=atan2((bcy(1)-acy(1)), (bcx(1)-acx(1)));   beta1=temp-phi;   length1=sqrt((ay(1)-acy(1))^2 + (ax(1)-acx(1))^2);   temp=atan2((by(1)-acy(1)), (bx(1)-acx(1)));   beta2=temp-phi;   length2=sqrt((by(1)-acy(1))^2 + (bx(1)-acx(1))^2);   rc2=sqrt((ay(1)-bcy(1))^2+ (ax(1)-bcx(1))^2);   rc1=sqrt((ay(1)-acy(1))^2+ (ax(1)-acx(1))^2);   r2=sqrt((acx(1)-Astar(1))^2+ (acy(1)-Astar(2))^2);   r4=sqrt((bcx(1)-Bstar(1))^2+ (bcy(1)-Bstar(2))^2);   r1=sqrt((Bstar(1)-Astar(1))^2+ (Bstar(2)-Astar(2))^2);   r3=sqrt((bcx(1)-acx(1))^2+ (bcy(1)-acy(1))^2);   % display the link lengths on the screen   set(h_r1txt,'string',num2str(r1));   set(h_r2txt,'string',num2str(r2));   set(h_r3txt,'string',num2str(r3));   set(h_r4txt,'string',num2str(r4));   % display the Grashof Type on the screen	r(1) = str2num(get(h_r1txt,'string'));   	r(2) = str2num(get(h_r2txt,'string'));   	r(3) = str2num(get(h_r3txt,'string'));      r(4) = str2num(get(h_r4txt,'string')); 	[rnew,Inew]=sort(r);	if (rnew(1)+rnew(4)<rnew(2)+rnew(3))    		gType = 1;   else      gType = 2;   end   set(Grashof_Type,'string',num2str(gType));   % Determine the linkage mode by checking the first position.   Q1=atan2((Bstar(2)-Astar(2)), (Bstar(1)-Astar(1)));   Q2=atan2((acy(1)-Astar(2)), (acx(1)-Astar(1)));   phi=atan2((bcy(1)-Bstar(2)), (bcx(1)-Bstar(1)));   mode=assemblymode(r1,r2,r3,r4,Q1,Q2,phi);   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Filemon Construction Part 2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    delta = atan((Bstar(2)-bcy(1))/(Bstar(1)-bcx(1)));      % angle is in radian    if ((Bstar(1) > bcx(1)) && (Bstar(2) > bcy(1)))            % alpha is in the 1st quarter area        alpha = delta;    end    if ((Bstar(1) < bcx(1)) && (Bstar(2) > bcy(1)))            % alpha is in the 2nd quarter area        alpha = pi+delta;    end    if ((Bstar(1) < bcx(1)) && (Bstar(2) < bcy(1)))            % alpha is in the 3rd quarter area        alpha = pi+delta;    end    if ((Bstar(1) > bcx(1)) && (Bstar(2) < bcy(1)))            % alpha is in the 4th quarter area        alpha = 2*pi+delta;    end        % Calculation of -phi_12 and -phi_13    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Coordinate of the three positions    a_xy=[ax1 ax2 ax3; ay1 ay2 ay3];    theta = (pi/180)*[theta1 theta2 theta3];        % Coordinate of the driven crank pivot    x1 = bcx(1);    y1 = bcy(1);        x_star=Bstar(1);    y_star=Bstar(2);        % Transformation Matrix    for i = 1;    R = [cos(theta(i)) -sin(theta(i)) a_xy(1,i); ...     sin(theta(i))  cos(theta(i)) a_xy(2,i); 0 0 1];    end    % Location of the driven crank pivot in the coupler coordi.    B = [x1 y1 1]';         % (x1, y1)    A = inv(R)*B;            % (X, Y)            % Calculation of x2, x3 and y2, y3    for i = 2:3    R = [cos(theta(i)) -sin(theta(i)) a_xy(1,i); ...     sin(theta(i))  cos(theta(i)) a_xy(2,i); 0 0 1];    C(:,i-1) = R*A;    i = i+1;    end        x2=C(1,1);    y2=C(2,1);    x3=C(1,2);    y3=C(2,2);        xy_i=[x1 x2 x3; y1 y2 y3];    pq_i=a_xy;        for i = 1:3    cos_phi = ((xy_i(1,i)-x_star)*(pq_i(1,i)-xy_i(1,i)) + (xy_i(2,i)-y_star)*(pq_i(2,i)-xy_i(2,i)))/ ...             sqrt(((xy_i(1,i)-x_star)^2+(xy_i(2,i)-y_star)^2)*((pq_i(1,i)-xy_i(1,i))^2+(pq_i(2,i)-xy_i(2,i))^2));    sin_phi = ((xy_i(1,i)-x_star)*(pq_i(2,i)-xy_i(2,i)) - (xy_i(2,i)-y_star)*(pq_i(1,i)-xy_i(1,i)))/ ...             sqrt(((xy_i(1,i)-x_star)^2+(xy_i(2,i)-y_star)^2)*((pq_i(1,i)-xy_i(1,i))^2+(pq_i(2,i)-xy_i(2,i))^2));            phi_i(1,i) = 2*atan(sin_phi/(1+cos_phi));    i=i+1;    end        phi_12 = (phi_i(2)-phi_i(1));    phi_13 = (phi_i(3)-phi_i(1));    minus_phi12 = -phi_12;      % angle is in radian    minus_phi13 = -phi_13;      % angle is in radian    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    CHECK THE ANGLE VALUES IN DEGREE%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      minus_phi12_deg = minus_phi12*(180/pi)      % the angle is in degree%      minus_phi13_deg = minus_phi13*(180/pi)      % the angle is in degree    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%           a = findobj('Tag','rbg_4bar_dsgn');   UD.a.UserData;%###########################################################################################################   xmin = UD.wlim(1);   xmax = UD.wlim(2);   ymin = UD.wlim(3);   ymax = UD.wlim(4);%###########################################################################################################     x = xmin:0.01:xmax;% Calculation of the length(L) of Filemon lines   L = sqrt(xmax^2 + ymax^2)*12;   % coordinates for the patch_1(for minus_phi_12) and patch_2(for minus_phi_13)    % define assistant point for patch_1   if abs(L*cos(alpha)) > abs(L*cos(alpha+minus_phi12))       P_patch_1(1,1) = bcx(1)+L*cos(alpha);       P_patch_1(2,1) = bcx(1)-L*cos(alpha);   else       P_patch_1(1,1) = bcx(1)+L*cos(alpha+minus_phi12);       P_patch_1(2,1) = bcx(1)-L*cos(alpha+minus_phi12);   end      if abs(L*sin(alpha)) > abs(L*sin(alpha+minus_phi12))       P_patch_1(1,2) = bcy(1)+L*sin(alpha);       P_patch_1(2,2) = bcy(1)-L*sin(alpha);   else       P_patch_1(1,2) = bcy(1)+L*sin(alpha+minus_phi12);       P_patch_1(2,2) = bcy(1)-L*sin(alpha+minus_phi12);   end               x_patch_1 = [bcx(1) bcx(1)+L*cos(alpha) P_patch_1(1,1) bcx(1)+L*cos(alpha+minus_phi12) bcx(1) ...                 bcx(1)-L*cos(alpha+minus_phi12) P_patch_1(2,1) bcx(1)-L*cos(alpha)];   y_patch_1 = [bcy(1) bcy(1)+L*sin(alpha) P_patch_1(1,2) bcy(1)+L*sin(alpha+minus_phi12) bcy(1) ...                 bcy(1)-L*sin(alpha+minus_phi12) P_patch_1(2,2) bcy(1)-L*sin(alpha)];        % define assistant point for patch_2    if abs(L*cos(alpha)) > abs(L*cos(alpha+minus_phi13))       P_patch_2(1,1) = bcx(1)+L*cos(alpha);       P_patch_2(2,1) = bcx(1)-L*cos(alpha);   else       P_patch_2(1,1) = bcx(1)+L*cos(alpha+minus_phi13);       P_patch_2(2,1) = bcx(1)-L*cos(alpha+minus_phi13);   end      if abs(L*sin(alpha)) > abs(L*sin(alpha+minus_phi13))       P_patch_2(1,2) = bcy(1)+L*sin(alpha);       P_patch_2(2,2) = bcy(1)-L*sin(alpha);   else       P_patch_2(1,2) = bcy(1)+L*sin(alpha+minus_phi13);       P_patch_2(2,2) = bcy(1)-L*sin(alpha+minus_phi13);   end   x_patch_2 = [bcx(1) bcx(1)+L*cos(alpha) P_patch_2(1,1) bcx(1)+L*cos(alpha+minus_phi13) bcx(1) ...                 bcx(1)-L*cos(alpha+minus_phi13) P_patch_2(2,1) bcx(1)-L*cos(alpha)];   y_patch_2 = [bcy(1) bcy(1)+L*sin(alpha) P_patch_2(1,2) bcy(1)+L*sin(alpha+minus_phi13) bcy(1) ...                 bcy(1)-L*sin(alpha+minus_phi13) P_patch_2(2,2) bcy(1)-L*sin(alpha)];    set(patch_1,'xdata',x_patch_1,'ydata',y_patch_1);    set(patch_2,'xdata',x_patch_2,'ydata',y_patch_2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%       case 'Move Pos'   nCheckCenter1 = 1;   nCheckCenter2 = 1;   a = findobj('Tag','rbg_4bar_dsgn');   UD=a.UserData;%###########################################################################################################   axislimit = UD.wlim;%###########################################################################################################   b = findobj('Tag','rbg_4bar_axes');   pt = get(b,'currentpoint');   pt = pt(1,1:2);   n = Argument2;   ax(n)=pt(1);   ay(n)=pt(2);   set(h_posx(n),'UserData',ax(n),'string',num2str(ax(n)));   set(h_posy(n),'UserData',ay(n),'string',num2str(ay(n)));         RBG4barDesign('Draw Axes');    set(a,'userdata',UD);   axis(axislimit);case 'Move Ang'   nCheckCenter1 = 1;   nCheckCenter2 = 1;   a = findobj('Tag','rbg_4bar_dsgn');   UD=a.UserData;%###########################################################################################################   axislimit = UD.wlim;%###########################################################################################################   b = findobj('Tag','rbg_4bar_axes');   pt = get(b,'currentpoint');   pt = pt(1,1:2);   n = Argument2;   a1=pt(1);   a2=pt(2);   ang = atan2(pt(2)-ay(n),pt(1)-ax(n))*180/pi;   set(h_theta(n),'UserData',ang,'string',num2str(ang));         RBG4barDesign('Draw Axes');    set(a,'userdata',UD);   axis(axislimit);case 'Change Pos'% Set nCheckCenter1 and nCheckCenter2 1 so that the program% will read in Astar and Bstar in the userdata as default.     nCheckCenter1 = 1;   nCheckCenter2 = 1;% Update a set of three values posx, posy and theta every time   n = Argument2;   newvalx=get(h_posx(n),'string');   newvaly=get(h_posy(n),'string');   newval=get(h_theta(n),'string');   ax(n)=check_val(ax(n),newvalx);   ay(n)=check_val(ax(n),newvaly);   theta(n)=check_val(theta(n),newval);   set(h_posx(n),'UserData',ax(n),'string',num2str(ax(n)));   set(h_posy(n),'UserData',ay(n),'string',num2str(ay(n)));   set(h_theta(n),'UserData',theta(n),'string',num2str(theta(n)));      RBG4barDesign('Draw Axes'); case 'Change Center'% Change the center point using the keyboard input   n = Argument2;   if n == 1 % change Astar      nCheckCenter1 = 1;      newvalx = get(h_astarx,'string');      newvaly = get(h_astary,'string');      Astarx = check_val(Astarx,newvalx);      Astary = check_val(Astary,newvaly);      set(h_astarx,'userdata',Astarx,'string',num2str(Astarx));      set(h_astary,'userdata',Astary,'string',num2str(Astary));   else % change Bstar      nCheckCenter2 = 1;      newvalx = get(h_bstarx,'string');      newvaly = get(h_bstary,'string');      Bstarx = check_val(Bstarx,newvalx);      Bstary = check_val(Bstary,newvaly);      set(h_bstarx,'userdata',Bstarx,'string',num2str(Bstarx));      set(h_bstary,'userdata',Bstary,'string',num2str(Bstary));   end   RBG4barDesign('Draw Axes');    case 'Change Circle'% Change the circle point using the keyboard input   n = Argument2;   if n == 1 % change A      nCheckCenter1 = 0;      newvalx = get(h_ax,'string');      newvaly = get(h_ay,'string');      fx1 = check_val(fx1,newvalx);      fy1 = check_val(fy1,newvaly);      set(h_ax,'userdata',fx1,'string',num2str(fx1));      set(h_ay,'userdata',fy1,'string',num2str(fy1));           else % change B      nCheckCenter2 = 0;      newvalx = get(h_bx,'string');      newvaly = get(h_by,'string');      fx2 = check_val(fx2,newvalx);      fy2 = check_val(fy2,newvaly);      set(h_bx,'userdata',fx2,'string',num2str(fx2));      set(h_by,'userdata',fy2,'string',num2str(fy2));   end   RBG4barDesign('Draw Axes');case 'Show Definitions'   Show_definition('initialize','RBG4barDesign.jpg');   case 'Resize'   n = Argument2;% To retrieve current axis limits      a = findobj('Tag','rbg_4bar_dsgn');   UD=a.UserData;   hdls = get(a,'userdata');%###########################################################################################################% If 'Zoom out' button is pressed, downsize the figure by increasing x any y axis limits% If 'Zoom In' button is pressed, enlarge the figure by decreasing x any y axis limits   if n ==1      factor = 1.05;   else      factor = 0.95;   end   UD.wlim=factor*UD.wlim;   a.UserData=UD;   axis(UD.wlim);   case 'None'      % the following command will bring the existing figure % to foreground   a = findobj('Tag','rbg_4bar_dsgn');   figure(a);   case 'Close'   % if the target window exist then close itif ~isempty(findobj('Tag','RBG Fourbar Analysis Window'))   rbg_4bar_ana('Stop');   a = findobj('Tag','RBG Fourbar Analysis Window');     	close(a);end   a = findobj('Tag','rbg_4bar_dsgn');close(a);   case 'Analysis'   Astar = [Astarx Astary];   Bstar = [Bstarx Bstary];      b = findobj('Tag','rbg_4bar_axes');   hdls = get(b,'userdata');   fact=pi/180;   theta1r=theta1*fact;   theta2r=theta2*fact;   theta3r=theta3*fact;   ax=[ax1 ax2 ax3];   ay=[ay1 ay2 ay3];   bx=[ax1+cos(theta1r) ax2+cos(theta2r) ax3+cos(theta3r)];   by=[ay1+sin(theta1r) ay2+sin(theta2r) ay3+sin(theta3r)];      rbg_4bar_ana('initialize',Astar,Bstar,ax,ay,bx,by,theta);case 'Help'%-------On-line help     HelpStr={'RBG Four Bar Analysis';    '';    '    "RBG4barDesign" is  a program to design  a four bar mechanism for';    'rigid body guidance and to analyze the result.   The program contains';    'two windows: a design window and an analysis window. The nomenclature';    'used by  the  program  is that  given  in  the  textbook, Kinematics,';    'Dynamics, and Design of Mechanisms by Kenneth Waldron and Gary Kinzel.';    '';    '    In the design window, the  variables  are  three   coupler  point';    'positions and angles. Users can decide to input either  center points';    'or circle points for the four bar linkage.   However, only two points';    'can be fixed by the users.   As for another two  points, the  program';    'automatically calculate and update the vales. In addition, "Zoom Out"';    'and "Zoom In" buttons are available to  scale  the  graphs.    One of';    'the  program  features is  the convenience use of the mouse  to  move';    'points. Users can drag the mouse to move joints  and bushings of  the';    'linkage in a continuous fashion.   Similarly, users can drag mouse to';    'to change the angles and the positions of all three coupler points.';    '';    '    In the analysis window, users can control the number of plots (up';    'to four) and the  contents of  each plot (four options) are provided.';    'Furthermore, the animation speed can be easily  adjusted  by clicking';    'on the speed buttons.';    '';    '    Two buttons connect the two windows.   The "Return" button in the';    'analysis window closes the analysis window and brings back the design';    'window, while the "Analysis"  button in  the  design  window open the';    'analysis  window  and  start the  linkage  animation  and  associated';    'shaking force animation.  Every time the "analysis"button is pressed,';    'all of the design parameters are updated to start a new animation. ';    '';    '    There is a status bar at the bottom of the design window.  If the';    'chosen  values  for the  variables  cannot  be  used to create a rbg-';    'fourbar mechanism, an error message will be shown in the status box.';     ' '};   helpwin(HelpStr,'RBG Four Bar Analysis'); %########################################################################################################   case 'CenterPoints Box' % Change the center point limit box using the keyboard input   n = Argument2;   if n == 1 % point 1%       nCheckCenter1 = 0;      newvalx = get(h_cx1,'string');      newvaly = get(h_cy1,'string');      px1 = check_val(px1,newvalx);      py1 = check_val(py1,newvaly);      set(h_cx1,'userdata',px1,'string',num2str(px1));      set(h_cy1,'userdata',py1,'string',num2str(py1));          elseif n == 2 % point 2%       nCheckCenter2 = 0;      newvalx = get(h_cx2,'string');      newvaly = get(h_cy2,'string');      px2 = check_val(px2,newvalx);      py2 = check_val(py2,newvaly);      set(h_cx2,'userdata',px2,'string',num2str(px2));      set(h_cy2,'userdata',py2,'string',num2str(py2));        elseif n == 3 % point 3%       nCheckCenter2 = 0;      newvalx = get(h_cx3,'string');      newvaly = get(h_cy3,'string');      px3 = check_val(px3,newvalx);      py3 = check_val(py3,newvaly);      set(h_cx3,'userdata',px3,'string',num2str(px3));      set(h_cy3,'userdata',py3,'string',num2str(py3));        elseif n == 4 % point 4%       nCheckCenter2 = 0;      newvalx = get(h_cx4,'string');      newvaly = get(h_cy4,'string');      px4 = check_val(px4,newvalx);      py4 = check_val(py4,newvaly);      set(h_cx4,'userdata',px4,'string',num2str(px4));      set(h_cy4,'userdata',py4,'string',num2str(py4));        elseif n == 5 % point 5%       nCheckCenter2 = 0;      newvalx = get(h_cx5,'string');      newvaly = get(h_cy5,'string');      px5 = check_val(px5,newvalx);      py5 = check_val(py5,newvaly);      set(h_cx5,'userdata',px5,'string',num2str(px5));      set(h_cy5,'userdata',py5,'string',num2str(py5));        elseif n == 6 % point 6%       nCheckCenter2 = 0;      newvalx = get(h_cx6,'string');      newvaly = get(h_cy6,'string');      px6 = check_val(px6,newvalx);      py6 = check_val(py6,newvaly);      set(h_cx6,'userdata',px6,'string',num2str(px6));      set(h_cy6,'userdata',py6,'string',num2str(py6));                     end      RBG4barDesign('Draw Axes');%########################################################################################################         case 'Grashof Type'    	r(1) = str2num(get(h_r1txt,'string'));   	r(2) = str2num(get(h_r2txt,'string'));   	r(3) = str2num(get(h_r3txt,'string'));      r(4) = str2num(get(h_r4txt,'string')); 	[rnew,Inew]=sort(r);	if (rnew(1)+rnew(4)<rnew(2)+rnew(3))    		gType = 1;   else      gType = 2;   endcase 'Get File'% Get the file name using the UIGETFILE   [sFileName sFilePath] = uigetfile('*.dat','Load File');     if sFileName == 0 && sFilePath == 0      return;   end      % Combine the path and file name together   sTemp = strcat( sFilePath, sFileName );% get the size to erase the '.dat' extension      sz  = size(sFileName);% load the data file     load(sTemp);% assign the parameter to a variable   Parameter = eval(sFileName(1:(sz(2)-4)));   if length(Parameter) == 9      ax = Parameter(1:3);      ay = Parameter(4:6);      theta = Parameter(7:9);   else      set(h_status,'string','invalid file format');        return;   end   for n = 1:3      set(h_posx(n),'UserData',ax(n),'string',num2str(ax(n)));      set(h_posy(n),'UserData',ay(n),'string',num2str(ay(n)));      set(h_theta(n),'UserData',theta(n),'string',num2str(theta(n)));   end      RBG4barDesign('Draw Axes');   refresh;   case 'Put File'   [sFileName sFilePath] = uiputfile('*.dat','Save As');	ParameterData = [ax1;ax2;ax3;ay1;ay2;ay3;theta1;theta2;theta3];   [sTemp , errMsg] = sprintf('%s%s', sFilePath, sFileName);   [strCmd, errMsg] = sprintf('%s %s %s', 'save', sTemp, ' -ascii ParameterData');   eval(strCmd);        end   function LocalOpenFig()hdls = zeros(1,36);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Control the color of the UI%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%StdColor = get(0,'DefaultUIcontrolBackgroundColor');bgframe = StdColor;bgedit = [1 1 1];bgtext = bgframe;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The Main Figure of Crank Rocker Design%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ScreenSize = get(0,'ScreenSize');sx = 480*2;sy = 400*2;FigPos = [ 10 ScreenSize(4)-sy-95 sx sy ] ;a = figure('Units','pixels', ...	'Color',[0.8 0.8 0.8], ...	'Name','Fourbar Design Window for Rigid Body Guidance'' ', ...	'NumberTitle','off', ...	'Position',FigPos, ...  	'Tag','rbg_4bar_dsgn');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Draw Frame First% This will prevent the frames from been drawn on top of% other UICONTROLS. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.00625 0.01 0.9833 0.1025], ...	'Style','frame'	, ...  	'Tag','Frame1');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.8075 0.3896 0.18], ...	'Style','frame', ...	'Tag','Frame_link');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.00625 0.12 0.58125 0.08], ...	'Style','frame', ...	'Tag','Frame_angle');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.12 0.3896 0.08], ...	'Style','frame', ...	'Tag','Frame_pushbutton');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.6525 0.3896 0.15], ...	'Style','frame', ...	'Tag','Frame_R');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.495 0.3896 0.1525], ...	'Style','frame', ...  	'Tag','Frame6');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.2125 0.3896 0.275], ...	'Style','frame', ...	'Tag','Frame_assemode');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% menu uicontrols%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uimenu('Parent',a, ...	'Label','Parameter', ...	'Tag','menu_parameter');  c = uimenu('Parent',b, ...	'Callback','RBG4barDesign(''Get File'')', ...	'Label','Load Parameters', ...	'Tag','submenu_load');   c = uimenu('Parent',b, ...	'Callback','RBG4barDesign(''Put File'')', ...	'Label','Save Parameters', ...	'Tag','submenu_save1');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Create graphics window for design input%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-------Reference axisb = axes('Parent',a, ...  	'Box','on', ...  	'Color',[1 1 1], ...	'Position',[0.00625 0.2125 0.58125 0.77], ...  	'XColor',[0 0 0], ...  	'XGrid','off', ...  	'XTick',[],...  	'YColor',[0 0 0], ...  	'YGrid','off', ...  	'YTick',[], ...  	'ZColor',[0 0 0], ...  	'ZGrid','off', ...  	'ZTick',[]);  b = axes('Parent',a, ...   'Box','off', ...  	'DataAspectRatio',[1 1 1],...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Position',[0.025 0.2 0.56 0.8], ...	'Tag','rbg_4bar_axes');grid;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% edit related uicontrols%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Because we can not update the text in the axes, we don't write the text A1 A2% and A3 on the axes. Instead, we use the same color of the line in the axes and% the and the color of the number in the editable box to indicate which line % represents which line. Speifying the foregroundcolor of the editable box.h_posx(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[1 0 0], ...	'Callback','RBG4barDesign(''Change Pos'',1)', ...	'Position',[0.6706 0.365 0.105 0.0425], ...	'String','0', ...	'Style','edit', ...	'UserData',0);  h_posx(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 0 1], ...	'Callback','RBG4barDesign(''Change Pos'',2)', ...	'Position',[0.6706 0.2925 0.105 0.0425], ...	'String','3', ...	'Style','edit', ...	'UserData',3);   h_posx(3) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 1 0], ...	'Callback','RBG4barDesign(''Change Pos'',3)', ...	'Position',[0.6706 0.2275 0.105 0.0425], ...	'String','4', ...	'Style','edit', ...	'Tag','R_edit(3)', ...	'UserData',4);   h_posy(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[1 0 0], ...	'Callback','RBG4barDesign(''Change Pos'',1)', ...	'Position',[0.7730 0.365 0.105 0.0425], ...	'String','0', ...	'Style','edit', ...	'UserData',0);   h_posy(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 0 1], ...	'Callback','RBG4barDesign(''Change Pos'',2)', ...	'Position',[0.7730 0.2925 0.105 0.0425], ...	'String','0', ...	'Style','edit', ...	'UserData',0);   h_posy(3) = uicontrol('Parent',a, ...	'Units','normalized', ...   'BackgroundColor',bgedit, ...   'ForegroundColor',[0 1 0], ...	'Callback','RBG4barDesign(''Change Pos'',3)', ...	'Position',[0.7730 0.2275 0.105 0.0425], ...	'String','2', ...	'Style','edit', ...	'UserData',2);   h_theta(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[1 0 0], ...	'Callback','RBG4barDesign(''Change Pos'',1)', ...	'Position',[0.8754 0.365 0.105 0.0425], ...	'String','41.5', ...	'Style','edit', ...	'UserData',41.5);   h_theta(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 0 1], ...	'Callback','RBG4barDesign(''Change Pos'',2)', ...	'Position',[0.8754 0.2925 0.105 0.0425], ...	'String','137.4', ...	'Style','edit', ...	'UserData',137.4);   h_theta(3) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 1 0], ...	'Callback','RBG4barDesign(''Change Pos'',3)', ...	'Position',[0.8754 0.2275 0.105 0.0425], ...	'String','10.8', ...	'Style','edit', ...	'UserData',10.8);   h_astarx = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''Change Center'',1)', ...	'Position',[0.7308 0.7 0.105 0.0425], ...	'String','1.59', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',1.59);   h_astary = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''Change Center'',1)', ...	'Position',[0.8725 0.7 0.105 0.0425], ...	'String','3.66', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',3.66);   h_bstarx = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''Change Center'',2)', ...	'Position',[0.7308 0.66 0.105 0.0425], ...	'String','6.98', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',6.98);   h_bstary = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''Change Center'',2)', ...	'Position',[0.8725 0.66 0.105 0.0425], ...	'String','2.41', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',2.41);   h_ax = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''Change Circle'',1)', ...	'Position',[0.7308 0.5525 0.105 0.0425], ...	'String','0.38', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',0.38);   h_ay = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''Change Circle'',1)', ...	'Position',[0.8725 0.5525 0.105 0.0425], ...	'String','0.47', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',0.47);   h_bx = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''Change Circle'',2)', ...	'Position',[0.7308 0.505 0.105 0.0425], ...	'String','4.41', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',4.41);   h_by = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''Change Circle'',2)', ...	'Position',[0.8725 0.505 0.105 0.0425], ...	'String','-0.58', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',-0.58);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% push button controls%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBG4barDesign(''Analysis'')', ...	'Position',[0.6125 0.13 0.11875 0.06], ...	'String','Analysis', ...	'Tag','AnalysisButton');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBG4barDesign(''Close'')', ...	'Position',[0.8583 0.13 0.11875 0.06], ...	'String','Close', ...	'Tag','CloseButon');   b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBG4barDesign(''Help'')', ...	'Position',[0.7354 0.13 0.11875 0.06], ...	'String','Info', ...	'Tag','InfoButton');    b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBG4barDesign(''Resize'',1)', ...   'Position',[0.209 0.1325 0.178 0.055], ...   'userdata',1, ...	'String','Zoom Out');  b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBG4barDesign(''Resize'',2)', ...	'Position',[0.3875 0.1325 0.178 0.055], ...   'String','Zoom In');   b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBG4barDesign(''Show Definitions'')', ...	'Position',[0.02917 0.1325 0.178 0.055], ...   'String','Definitions');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% text controls%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%h_status = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'HorizontalAlignment','left', ...	'Position',[0.05625 0.0275 0.9083 0.0475], ...	'String',' ', ...	'Style','text', ...	'Tag','status_txt');    b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.88458 0.4125 0.0875 0.0375], ...	'String','angle', ...	'Style','text', ...	'Tag','StaticText1');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.61875 0.945 0.1729 0.037], ...	'String','frame length', ...	'Style','text', ...	'Tag','StaticText4');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.6208 0.913 0.1708 0.037], ...	'String','crank length', ...	'Style','text', ...	'Tag','StaticText2');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.61875 0.881 0.1833 0.037], ...	'String','coupler length', ...	'Style','text', ...	'Tag','StaticText2');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.6208 0.849 0.18125 0.037], ...	'String','rocker length', ...	'Style','text', ...	'Tag','StaticText3');b = uicontrol('Parent',a, ...                      % word "Grashof Type"	'Units','normalized', ...	'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.6208 0.81 0.18125 0.04], ...	'String','Grashof Type', ...	'Style','text', ...	'Tag','StaticText3');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.365 0.05808 0.05], ...	'String','pos1', ...    'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.2925 0.05808 0.05], ...	'String','pos2', ...	'Style','text', ...	'Tag','StaticText4');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.2275 0.05808 0.05], ...	'String','pos3', ...	'Style','text', ...	'Tag','StaticText4');%###########################################################################################################b = uicontrol('Parent',a, ...                       % Center Points Limit	'Units','normalized', ...    'ForegroundColor','k', ... 	'BackgroundColor',bgtext, ...	'Position',[0.02 0.078 0.15 0.03], ...	'String','Center Point Limit', ...    'Style','text');b = uicontrol('Parent',a, ...                       % point 1	'Units','normalized', ...    'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.05 0.07 0.04 0.02], ...	'String','pt1', ...    'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...                       % point 2	'Units','normalized', ...    'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.1 0.07 0.04 0.02], ...	'String','pt2', ...    'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...                       % point 3	'Units','normalized', ...    'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.15 0.07 0.04 0.02], ...	'String','pt3', ...    'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...                       % point 4	'Units','normalized', ...    'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.2 0.07 0.04 0.02], ...	'String','pt4', ...    'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...                       % point 5	'Units','normalized', ...    'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.25 0.07 0.04 0.02], ...	'String','pt5', ...    'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...                       % point 6	'Units','normalized', ...    'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.3 0.07 0.04 0.02], ...	'String','pt6', ...    'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...                       % Center Points Limit(x)	'Units','normalized', ...    'ForegroundColor','k', ... 	'BackgroundColor',bgtext, ...	'Position',[0.03 0.045 0.01 0.02], ...	'String','x:', ...    'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...                       % Center Points Limit(y)	'Units','normalized', ...    'ForegroundColor','k', ... 	'BackgroundColor',bgtext, ...	'Position',[0.03 0.02 0.01 0.02], ...	'String','y:', ...    'Style','text', ...   	'Tag','StaticText4');%###########################################################################################################b = uicontrol('Parent',a, ...                       % Case Description	'Units','normalized', ...    'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.55 0.02 0.2 0.05], ...	'String','Case Description :', ...    'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...                       % editable box for "Case Description"	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Position',[0.71 0.04 0.25 0.04], ...	'String','', ...	'Style','edit');     h_r1txt = uicontrol('Parent',a, ...                 % length of frame	'Units','normalized', ...	'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.8083 0.945 0.17292 0.037], ...	'String','5.53', ...	'Style','text', ...	'Tag','StaticText4');   h_r2txt = uicontrol('Parent',a, ...                 % length of frame	'Units','normalized', ...	'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.8083 0.913 0.17292 0.037], ...	'String','3.41', ...	'Style','text', ...	'Tag','StaticText4');   h_r3txt = uicontrol('Parent',a, ...                 % length of frame	'Units','normalized', ...	'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.8083 0.881 0.17292 0.037], ...	'String','4.16', ...	'Style','text', ...	'Tag','StaticText4');   h_r4txt = uicontrol('Parent',a, ...                 % length of frame	'Units','normalized', ...	'ForegroundColor',[0.3 0.3 0.6], ... 	'BackgroundColor',bgtext, ...	'Position',[0.8083 0.849 0.17292 0.037], ...	'String','3.94', ...	'Style','text', ...	'Tag','StaticText4');Grashof_Type = uicontrol('Parent',a, ...             % Grashof Type "1" or "2"	'Units','normalized', ...	'ForegroundColor',[0.7 0.2 0.2], ... 	'BackgroundColor',bgtext, ...	'Position',[0.8083 0.81 0.17292 0.037], ...	'String','2', ...	'Style','text', ...	'Tag','StaticText4');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.6417 0.5525 0.04792 0.04], ...	'String','A', ...	'Style','text', ...	'Tag','StaticText4');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.6417 0.505 0.04792 0.04], ...	'String','B', ...	'Style','text', ...	'Tag','StaticText4');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.6025 0.1333 0.0425], ...	'String','circle point', ...	'Style','text', ...	'Tag','StaticText4');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.7575 0.1688 0.0425], ...	'String','center point', ...	'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.435 0.175 0.0425], ...	'String','coupler point', ...	'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.64375 0.7025 0.065 0.04], ...	'String','Astar', ...	'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.64375 0.66 0.065 0.04], ...	'String','Bstar', ...	'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.7646 0.7425 0.04167 0.04], ...	'String','x', ...	'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.9083 0.745 0.0375 0.0425], ...	'String','y', ...	'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.7646 0.595 0.0187 0.0375], ...	'String','x', ...	'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.9083 0.595 0.0375 0.0425], ...	'String','y', ...	'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.7146 0.4125 0.02708 0.0375], ...	'String','x', ...	'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.80417 0.41 0.02917 0.0425], ...	'String','y', ...	'Style','text', ...   	'Tag','StaticText4');%###########################################################################################################% x coordinates of the center limit boxh_cx1 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',1)', ...	'Position',[0.05 0.045 0.04 0.025], ...	'String','1.5', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',1.5);   h_cx2 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',2)', ...	'Position',[0.1 0.045 0.04 0.025], ...	'String','1.5', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',1.5);h_cx3 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',3)', ...	'Position',[0.15 0.045 0.04 0.025], ...	'String','2.5', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',2.5);h_cx4 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',4)', ...	'Position',[0.2 0.045 0.04 0.025], ...	'String','2.5', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',2.5);h_cx5 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',5)', ...	'Position',[0.25 0.045 0.04 0.025], ...	'String','4.5', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',4.5);h_cx6 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',6)', ...	'Position',[0.3 0.045 0.04 0.025], ...	'String','4.5', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',4.5);% y coordinates of the center limit boxh_cy1 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',1)', ...	'Position',[0.05 0.02 0.04 0.025], ...	'String','-3.2', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',-3.2);   h_cy2 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',2)', ...	'Position',[0.1 0.02 0.04 0.025], ...	'String','-1.5', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',-1.5);h_cy3 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',3)', ...	'Position',[0.15 0.02 0.04 0.025], ...	'String','-1.5', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',-1.5);h_cy4 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',4)', ...	'Position',[0.2 0.02 0.04 0.025], ...	'String','-2.3', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',-2.3);h_cy5 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',5)', ...	'Position',[0.25 0.02 0.04 0.025], ...	'String','-2.3', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',-2.3);h_cy6 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBG4barDesign(''CenterPoints Box'',6)', ...	'Position',[0.3 0.02 0.04 0.025], ...	'String','-3.2', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',-3.2);%###########################################################################################################drawnow;   hdls=[ h_astarx h_astary h_bstarx h_bstary ...      h_ax h_ay h_bx h_by h_posx h_posy h_theta ...      h_r1txt h_r2txt h_r3txt h_r4txt h_status Grashof_Type ...      h_cx1 h_cy1 h_cx2 h_cy2 h_cx3 h_cy3 h_cx4 h_cy4 h_cx5 h_cy5 h_cx6 h_cy6];      %###########################################################################################a = findobj('Tag','rbg_4bar_dsgn');set(a,'userdata',struct('hand',hdls));	% Set up the vectors needed to draw the linkage%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Filemon Construction Part 2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Area color %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     % patch_1(-phi_12) : light green pastel tone [.9 1 .9]     % patch_2(-phi_13) : light red pastel tone [1 .9 .9]     % overlap(-phi_12 & -phi_13) : light blue pastel tone     patch_1=patch('xdata', [], 'ydata', [],'FaceColor', [.8 1 .8], 'EdgeColor', [.9 1 .9]);patch_2=patch('xdata', [], 'ydata', [],'FaceColor', [1 .8 .8], 'EdgeColor', [1 .9 .9]);          % paint all 3 circles with patch function to express the forbidden regions          icircle23=patch('xdata', [], 'ydata',[], 'linewidth',1.2,'FaceColor', 'y','EdgeColor','r');icircle12=patch('xdata', [], 'ydata',[], 'linewidth',1.2,'FaceColor', 'y','EdgeColor','r');icircle13=patch('xdata', [], 'ydata',[], 'linewidth',1.2,'FaceColor', 'y','EdgeColor','r');        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%position1=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'r');position2=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'b');position3=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'g');    a1=line('xdata', [], 'ydata', [], 'marker', '+','markersize',10,'color', 'r');a2=line('xdata', [], 'ydata', [], 'marker', '+','markersize',10,'color', 'b');a3=line('xdata', [], 'ydata', [], 'marker', '+','markersize',10,'color', 'g');pole12=line('xdata', [], 'ydata',[], 'marker', '+', 'markersize', 8,'color', 'k');pole13=line('xdata', [], 'ydata',[], 'marker', '+', 'markersize', 8,'color', 'k');pole23=line('xdata', [], 'ydata',[], 'marker', '+', 'markersize', 8,'color', 'k');ipole23=line('xdata', [], 'ydata',[], 'marker', '+', 'markersize', 8,'color', 'r');scircle=line('xdata', [], 'ydata',[], 'linewidth',1,'color', 'k');crank1=line('xdata', [], 'ydata', [],'linewidth',2,'color', 'g');crank2=line('xdata', [], 'ydata', [],'linewidth',2,'color', 'k');coupler1=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'k');%########################################################################################################boxline=line('xdata', [], 'ydata' ,[], 'linewidth' ,2, 'linestyle', '--','color', 'r');%########################################################################################################coupler2=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'k');		hinge1=line('xdata', [], 'ydata',[],'color', 'r');hinge2=line('xdata', [], 'ydata',[],'color', 'r');joint1=line('xdata', [], 'ydata',[], 'marker', 'o', 'markersize', 8,'color', 'k');joint2=line('xdata', [], 'ydata', [], 'color', 'r');joint3=line('xdata', [], 'ydata',[], 'marker', 'o', 'markersize', 8,'color', 'g');joint4=line('xdata', [], 'ydata', [], 'color', 'r');hdls=[ position1 position2 position3 a1 a2 a3 ...    pole12 pole13 pole23 ipole23 ...    scircle icircle23 icircle12 icircle13 ...    joint1 joint2 joint3 joint4 crank1 crank2 ...    coupler1 coupler2 hinge1 hinge2 ...    patch_1, patch_2, Grashof_Type boxline];    %#####################################################################################################a = findobj('Tag','rbg_4bar_axes');set(a,'userdata',hdls );	function val=check_val(oldval,newval)% Check if the user input is number input% if not, retrieve the previous value in userdataval=zeros(1);if ~isequal(length(oldval),length(str2num(newval))),  	val=oldval;else  	val=str2num(newval);end
function slidercrank_ana(Action,r,beta,Q1,vel,driver,times,mode)% the contents of the userdata of Analysis Window % handles(1) = handle of fig number% handles(2) = handle of fig1 popupmenu% handles(3) = handle of fig2 popupmenu% handles(4) = handle of fig3 popupmenu% handles(5) = handle of fig4 popupmenu% handles(6) = handle of axe1% handles(7) = handle of axe2% handles(8) = handle of axe3% handles(9) = handle of axe4% handles(10) = flag for deciding to start or stop animation% handles(11) = handle of bead(1)% handles(12) = handle of bead(2)% handles(13) = handle of bead(3)% handles(14) = handle of bead(4)% handles(15) = Previous Start Index% handles(16) = timesink% handles(17) = handle of reference axe for axe1% handles(18) = handle of reference axe for axe2% handles(19) = handle of reference axe for axe3% handles(20) = handle of reference axe for axe4% handles(21) = handle of submenu 'Load'% handles(22) = handle of submenu 'Save'% handles(23) = handle of return button;% handles(24) = handle of speed plus button;% each mechanism axes has the its own userdata storing its % unique graphic handle [joint1 joint2 crank coupler rocker];      global strFigType global nAnimationFlagglobal g_AnaResglobal nChangeSpeed% Define the axes for the first graph (input/output angle graph)if nargin==0 && isempty(findobj('Tag','Slider Crank Analysis Window')),  % cogana is being initialized   Action='initialize';elseif nargin== 0 && ~isempty(findobj('Tag','Slider Crank Analysis Window'))      % cogana is already open   Action='None';elseif nargin== 1 && ~isempty(findobj('Tag','Slider Crank Analysis Window')) && strcmp( Action, 'initialize'), % cogana is already open	% Recalculate the value, and then redraw	Action='None';endswitch Actioncase 'initialize'   if  isempty(findobj('Tag','Slider Crank Analysis Window'))         LocalOpenFig;      nAnimationFlag = 0;   else  		slidercrank_ana('None');   end      if nargin < 8            r = [ 3 8 1 6 ];      beta = 20;      Q1 = 30;      vel = 5;      driver = 1;      times = 2;      mode = 1;   end      if exist('nAnimationFlag')       if nAnimationFlag == 1      	slidercrank_ana('Stop');         return;      end   end      Q11=Q1*pi/180;      g_AnaRes = CalcResult( r, beta, Q1, vel, driver, times, mode );   DrawAnalysisWindow;   slidercrank_ana('ShowFigure');   slidercrank_ana('Start');    	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	%	Change Figure Call Back Function	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'ChangeFigure'   DrawAnalysisWindow;   slidercrank_ana('ShowFigure');   slidercrank_ana('Start');   case 'SetSpeed'   nChangeSpeed = r(1);   case 'ChangeFigureNo'   DrawAnalysisWindow;   slidercrank_ana('ShowFigure');   slidercrank_ana('Start');   case 'Animation'   a = findobj('Tag','Slider Crank Analysis Window');      handles = get(a,'userdata');   Q1 = 0;      [ m, n ] = size( g_AnaRes);   itotal = n;   timesink = handles(16);   i = handles(15);   dt = 5;      nFigNum  = get( handles(1),'value');   nType(1) = get( handles(2),'value');   nType(2) = get( handles(3),'value');   nType(3) = get( handles(4),'value');   nType(4) = get( handles(5),'value');      bead  = zeros(1,4);   links = zeros(4,7);   bead(1) = handles(11);   bead(2) = handles(12);   bead(3) = handles(13);   bead(4) = handles(14);      h_plus = handles(24);   Bx = g_AnaRes(19,:);   By = g_AnaRes(20,:);   Cx = g_AnaRes(21,:);   Cy = g_AnaRes(22,:);   xblock= g_AnaRes(25:29,:);   yblock= g_AnaRes(30:34,:);   xblocka = xblock';   yblocka = yblock';   Dx1= g_AnaRes(35,:);   Dy1= g_AnaRes(36,:);	driver = g_AnaRes(41,1);         for j = 1:nFigNum      if nType(j) == 4      	links(j,:) = get(handles(j+5),'userdata');   	end   end         % set timer   tic;   	while nAnimationFlag                      cycle=fix((i-0.0000001)/(360/dt)); %determine the cycle as an integer      if i ==1         drawnow;      end            if nFigNum > 0         if nType(1) == 4				SetMechanismPosition( links(1,:),i,Bx,By,Cx,Cy,Dx1,Dy1,xblocka,yblocka);         else         		if driver == 1            	j = nType(1) * 2 - 1;         	elseif driver == 2            	j = nType(1) * 2 + 5;         	else            	j = nType(1) * 2+ 11;         	end   				set(bead(1), 'xdata', g_AnaRes(j,i), 'ydata', g_AnaRes(j+1,i));        			end      end         		if nFigNum > 1         if nType(2) == 4				SetMechanismPosition( links(2,:),i,Bx,By,Cx,Cy,Dx1,Dy1,xblocka,yblocka);         else         		if driver == 1            	j = nType(2) * 2 - 1;         	elseif driver == 2               j = nType(2) * 2 + 5;            else            	j = nType(2) * 2 + 11;         	end            	set(bead(2), 'xdata', g_AnaRes(j,i), 'ydata', g_AnaRes(j+1,i));         end        end      		if nFigNum > 2        if nType(3) == 4				SetMechanismPosition( links(3,:),i,Bx,By,Cx,Cy,Dx1,Dy1,xblocka,yblocka);         else         		if driver == 1            	j = nType(3) * 2 - 1;         	elseif driver == 2            	j = nType(3) * 2 + 5;         	else            	j = nType(3) * 2 + 11;         	end      	   	set(bead(3), 'xdata', g_AnaRes(j,i), 'ydata', g_AnaRes(j+1,i));         end      end               if nFigNum > 3        if nType(4) == 4				SetMechanismPosition( links(4,:),i,Bx,By,Cx,Cy,Dx1,Dy1,xblocka,yblocka);        else         		if driver == 1            	j = nType(4) * 2 - 1;         	elseif driver == 2            	j = nType(4) * 2 + 5;         	else            	j = nType(4) * 2 + 11;         	end   	     		set(bead(4), 'xdata', g_AnaRes(j,i), 'ydata', g_AnaRes(j+1,i));         end        end        		drawnow;   %flush the draw buffer      i= i+1;      if i == itotal         i = 1;      end      if nChangeSpeed ~= 0         timesink = timesink * nChangeSpeed;         nChangeSpeed = 0;      end      while toc < timesink      end         tic;   end   nAnimationFlag = 0;   handles(15) = i;   handles(16) = timesink;   set(a,'Userdata',handles);   case 'ShowFigure'   a = findobj('Tag','Slider Crank Analysis Window');   handles = get( a,'userdata');   nFigNum = get(handles(1),'value');   [ m, n ] = size( g_AnaRes);   npoints1 = g_AnaRes(41,12);   xsl1= g_AnaRes(23,1:npoints1);   ysl1= g_AnaRes(24,1:npoints1);	times = g_AnaRes(41,2);      if times == 2      n1 = n/2;   else      n1 = n;   end   Dx2 = g_AnaRes(37,1:n1);   Dy2 = g_AnaRes(38,1:n1);   Dx3 = g_AnaRes(39,1:n1);   Dy3 = g_AnaRes(40,1:n1);   driver = g_AnaRes(41,1);    times = g_AnaRes(41,2);    xmin = g_AnaRes(41,4);    xmax = g_AnaRes(41,5);    ymin = g_AnaRes(41,6);    ymax = g_AnaRes(41,7);    r2 = g_AnaRes(41,9);   if nFigNum > 0      nType = get(handles(2),'value');      axes(handles(6));      if nType == 4         CreateMechanismHandles( handles(6),r2,Dx2,Dy2,Dx3,Dy3,xsl1,ysl1,times,xmin,xmax,ymin,ymax);      else         	if driver == 1            i = nType * 2 - 1;         elseif driver == 2            i = nType * 2 + 5;         else            i = nType *2 + 11;         end         	line1 = line( 'xdata', g_AnaRes(i,:), 'ydata', g_AnaRes(i+1,:),'tag','line1','color', 'r');			b1 = line('xdata', [], 'ydata', [],'marker','o','markersize', 6,'tag','b1');      	handles(11) = b1;        	if driver == 1            j = nType;         elseif driver == 2            j = nType + 3;         else            j = nType + 6;         end       		labels = GetFigLabel( j );      	xlabel(labels(1));         ylabel(labels(2));         axis([ min(g_AnaRes(i,:)) max(g_AnaRes(i,:)) min(g_AnaRes(i+1,:)) max(g_AnaRes(i+1,:)) ]);      end   end         if nFigNum > 1      nType = get(handles(3),'value');      axes(handles(7));      if nType == 4         CreateMechanismHandles( handles(7),r2,Dx2,Dy2,Dx3,Dy3,xsl1,ysl1,times,xmin,xmax,ymin,ymax);      else         	if driver == 1            i = nType * 2 - 1;         elseif driver == 2            i = nType * 2 + 5;         else            i = nType *2+ 11;         end         	line2 = line( 'xdata', g_AnaRes(i,:), 'ydata', g_AnaRes(i+1,:),'tag','line2','color', 'r');			b2 = line('xdata', [], 'ydata', [],'marker','o','markersize', 6,'tag','b2');      	handles(12) = b2;        	if driver == 1            j = nType;         elseif driver == 2            j = nType + 3;         else            j = nType + 6;         end       		labels = GetFigLabel( j );      	xlabel(labels(1));         ylabel(labels(2));         axis([ min(g_AnaRes(i,:)) max(g_AnaRes(i,:)) min(g_AnaRes(i+1,:)) max(g_AnaRes(i+1,:)) ]);      end	end            if nFigNum > 2      nType = get(handles(4),'value');      axes(handles(8));      if nType == 4         CreateMechanismHandles( handles(8),r2,Dx2,Dy2,Dx3,Dy3,xsl1,ysl1,times,xmin,xmax,ymin,ymax);      else         	if driver == 1            i = nType * 2 - 1;         elseif driver == 2            i = nType * 2 + 5;         else            i = nType *2+ 11;         end         	line3 = line( 'xdata', g_AnaRes(i,:), 'ydata', g_AnaRes(i+1,:),'tag','line3','color', 'r');			b3 = line('xdata', [], 'ydata', [],'marker','o','markersize', 6,'tag','b3');      	handles(13) = b3;        	if driver == 1            j = nType;         elseif driver == 2            j = nType + 3;         else            j = nType + 6;         end       		labels = GetFigLabel( j );      	xlabel(labels(1));         ylabel(labels(2));         axis([ min(g_AnaRes(i,:)) max(g_AnaRes(i,:)) min(g_AnaRes(i+1,:)) max(g_AnaRes(i+1,:)) ]);      end	end            if nFigNum > 3      nType = get(handles(5),'value');      axes(handles(9));      if nType == 4         CreateMechanismHandles( handles(9),r2,Dx2,Dy2,Dx3,Dy3,xsl1,ysl1,times,xmin,xmax,ymin,ymax);   	else        	if driver == 1            i = nType * 2 - 1;         elseif driver == 2            i = nType * 2 + 5;         else            i = nType *2+ 11;         end         	line4 = line( 'xdata', g_AnaRes(i,:), 'ydata', g_AnaRes(i+1,:),'tag','line4','color', 'r');			b4 = line('xdata', [], 'ydata', [],'marker','o','markersize', 6,'tag','b4');      	handles(14) = b4;        	if driver == 1            j = nType;         elseif driver == 2            j = nType + 3;         else            j = nType + 6;         end       		labels = GetFigLabel( j );      	xlabel(labels(1));         ylabel(labels(2));         axis([ min(g_AnaRes(i,:)) max(g_AnaRes(i,:)) min(g_AnaRes(i+1,:)) max(g_AnaRes(i+1,:)) ]);      end   end   drawnow;   a = findobj('Tag','Slider Crank Analysis Window');      set(a,'Userdata',handles);   case 'None'	figure( findobj('Tag','Slider Crank Analysis Window'));	% Bring the figure to front, if it already existscase 'Close'   slidercrank_ana('Stop');   a = findobj('Tag','Slider Crank Analysis Window');      close(a);case 'Start'   if exist('nAnimationFlag')      if nAnimationFlag == 1         return;      end   end      a = findobj('Tag','Slider Crank Analysis Window');      handles = get(a,'userdata');   set(handles(1),'Enable','off');   set(handles(2),'Enable','off');   set(handles(3),'Enable','off');   set(handles(4),'Enable','off');   set(handles(5),'Enable','off');   set(handles(21),'Enable','off');   set(handles(22),'Enable','off');   set(handles(23),'Enable','off');      nAnimationFlag = 1;   nChangeSpeed = 0;   handles(10) = nAnimationFlag;   set(a,'userdata',handles);   slidercrank_ana('Animation');   case 'Stop'   if  isempty(findobj('Tag','Slider Crank Analysis Window'))   	return;      end   a = findobj('Tag','Slider Crank Analysis Window');      handles = get(a,'userdata');   nAnimationFlag = 0;   handles(10) = nAnimationFlag;   set(a,'userdata',handles);   set(handles(1),'Enable','on');   set(handles(21),'Enable','on');   set(handles(22),'Enable','on');   set(handles(23),'Enable','on');   nFigNum = get(handles(1),'value');   for i = 1:nFigNum,   	set(handles(i+1),'Enable','on');   end   case 'Return'   slidercrank_ana('Stop');   if ~isempty(findobj('Tag','slidercrank_dsgn'))     		b = findobj('Tag','slidercrank_dsgn');      figure(b);   	b = findobj('Tag','Slider Crank Analysis Window');   	  	close(b);   else   	return;         endcase 'GetFile'   % Get the file name using the UIGETFILE   [sFileName sFilePath] = uigetfile('*.dat','Load File');      if sFileName == 0 && sFilePath == 0      return;   end         % Combine the path and file name together   sTemp = strcat( sFilePath, sFileName );	% get the size to erase the '.dat' extension      sz  = size(sFileName);	% load the data file      load(sTemp);	% assign the parameter to a variable   Parameter = eval(sFileName(1:(sz(2)-4)));      a = findobj('Tag','Slider Crank Analysis Window');      handles = get(a,'userdata');      if length(Parameter) == 5	   nFigNum  = Parameter(1);   	nType1 = Parameter(2);	   nType2 = Parameter(3);   	nType3 = Parameter(4);      nType4 = Parameter(5);         	set(handles(1),'Value',nFigNum);   	set(handles(2),'Value',nType1);   	set(handles(3),'Value',nType2);   	set(handles(4),'Value',nType3);      set(handles(5),'Value',nType4);            set(a,'userdata',handles);   	DrawAnalysisWindow;      slidercrank_ana('ShowFigure');      slidercrank_ana('Start');   else      return;   end             case 'PutFile'   [sFileName sFilePath] = uiputfile('*.dat','Save As');      a = findobj('Tag','Slider Crank Analysis Window');      handles = get(a,'userdata');      nFigNum  = get(handles(1),'Value');   nType1 = get(handles(2),'Value');	nType2 = get(handles(3),'Value');   nType3 = get(handles(4),'Value');   nType4 = get(handles(5),'Value');   ParameterData = [nFigNum; nType1; nType2; nType3; nType4];   %   sTemp = strcat( sFilePath, sFileName)   [sTemp , errMsg] = sprintf('%s%s', sFilePath, sFileName);   [strCmd, errMsg] = sprintf('%s %s %s', 'save', sTemp, ' -ascii ParameterData');   eval(strCmd);      end % switch%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	Show UI%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function DrawAnalysisWindow();a = findobj('Tag','Slider Crank Analysis Window');handles = get(a,'userdata');h_fignum = handles(1);h_fig1 = handles(2);h_fig2 = handles(3);h_fig3 = handles(4);h_fig4 = handles(5);nFigNum=get(h_fignum,'Value');position = zeros( 4, 4, 4);position(1,1,:) = [0.08 0.25 0.87 0.73];position(2,1,:) = [0.25 0.63 0.5 0.36];position(2,2,:) = [0.25 0.198 0.5 0.36];position(3,1,:) = [0.1 0.42 0.38 0.31];position(3,2,:) = [0.58 0.65 0.38 0.31];position(3,3,:) = [0.58 0.22 0.38 0.31];position(4,1,:) = [0.1 0.65 0.38 0.31];position(4,2,:) = [0.58 0.65 0.38 0.31];position(4,3,:) = [0.1 0.22 0.38 0.31];position(4,4,:) = [0.58 0.22 0.38 0.31]; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Clearup previous axes first%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%for i = 6:9,	if handles(i) ~= 0		delete(handles(i));		handles(i) = 0;	endendfor i = 17:20,	if handles(i) ~= 0		delete(handles(i));		handles(i) = 0;	endendfor i = 1:nFigNum,	set(handles(i+1),'Enable','on');end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Axis 1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% if nFigNum == 1	b = axes('Parent',a, ...	'Box','on', ...	'Color',[1 1 1], ...	'Position',position(1,1,:), ...	'XColor',[0 0 0], ...	'XGrid','off', ...	'XTick',[],...	'YColor',[0 0 0], ...	'YGrid','off', ...	'YTick',[], ...	'ZColor',[0 0 0], ...	'ZGrid','off', ...	'ZTick',[]);handles(17) = b;h_1 = axes('Parent',a, ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'Position',position(1,1,:), ...	'Tag','Axes1', ...	'XColor',[0 0 0], ...	'YColor',[0 0 0], ...	'ZColor',[0 0 0]);handles(6) = h_1;end	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Axis 2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if nFigNum == 2	b = axes('Parent',a, ...	'Box','on', ...	'Color',[1 1 1], ...	'Position',position(2,1,:), ...	'XColor',[0 0 0], ...	'XGrid','off', ...	'XTick',[],...	'YColor',[0 0 0], ...	'YGrid','off', ...	'YTick',[], ...	'ZColor',[0 0 0], ...	'ZGrid','off', ...	'ZTick',[]);handles(17) = b;h_1 = axes('Parent',a, ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'Position',position(2,1,:), ...	'Tag','Axes1', ...	'XColor',[0 0 0], ...	'YColor',[0 0 0], ...   'ZColor',[0 0 0]);b = axes('Parent',a, ...	'Box','on', ...	'Color',[1 1 1], ...	'Position',position(2,2,:), ...	'XColor',[0 0 0], ...	'XGrid','off', ...	'XTick',[],...	'YColor',[0 0 0], ...	'YGrid','off', ...	'YTick',[], ...	'ZColor',[0 0 0], ...	'ZGrid','off', ...	'ZTick',[]);handles(18) = b;h_2 = axes('Parent',a, ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'Position',position(2,2,:), ...	'Tag','Axes2', ...	'XColor',[0 0 0], ...	'YColor',[0 0 0], ...	'ZColor',[0 0 0]);handles(6) = h_1;handles(7) = h_2;end	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Axis 3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if nFigNum == 3	b = axes('Parent',a, ...	'Box','on', ...	'Color',[1 1 1], ...	'Position',position(3,1,:), ...	'XColor',[0 0 0], ...	'XGrid','off', ...	'XTick',[],...	'YColor',[0 0 0], ...	'YGrid','off', ...	'YTick',[], ...	'ZColor',[0 0 0], ...	'ZGrid','off', ...	'ZTick',[]);handles(17) = b;h_1 = axes('Parent',a, ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'Position',position(3,1,:), ...	'Tag','Axes1', ...	'XColor',[0 0 0], ...	'YColor',[0 0 0], ...	'ZColor',[0 0 0]);b = axes('Parent',a, ...	'Box','on', ...	'Color',[1 1 1], ...	'Position',position(3,2,:), ...	'XColor',[0 0 0], ...	'XGrid','off', ...	'XTick',[],...	'YColor',[0 0 0], ...	'YGrid','off', ...	'YTick',[], ...	'ZColor',[0 0 0], ...	'ZGrid','off', ...	'ZTick',[]);handles(18) = b;h_2 = axes('Parent',a, ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'Position',position(3,2,:), ...	'Tag','Axes2', ...	'XColor',[0 0 0], ...	'YColor',[0 0 0], ...	'ZColor',[0 0 0]);b = axes('Parent',a, ...	'Box','on', ...	'Color',[1 1 1], ...	'Position',position(3,3,:), ...	'XColor',[0 0 0], ...	'XGrid','off', ...	'XTick',[],...	'YColor',[0 0 0], ...	'YGrid','off', ...	'YTick',[], ...	'ZColor',[0 0 0], ...	'ZGrid','off', ...	'ZTick',[]);handles(19) = b;h_3 = axes('Parent',a, ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'Position',position(3,3,:), ...	'Tag','Axes3', ...	'XColor',[0 0 0], ...	'YColor',[0 0 0], ...	'ZColor',[0 0 0]);handles(6) = h_1;handles(7) = h_2;handles(8) = h_3;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Axis 4%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if nFigNum == 4	b = axes('Parent',a, ...	'Box','on', ...	'Color',[1 1 1], ...	'Position',position(4,1,:), ...	'XColor',[0 0 0], ...	'XGrid','off', ...	'XTick',[],...	'YColor',[0 0 0], ...	'YGrid','off', ...	'YTick',[], ...	'ZColor',[0 0 0], ...	'ZGrid','off', ...	'ZTick',[]);handles(17) = b;h_1 = axes('Parent',a, ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'Position',position(4,1,:), ...	'Tag','Axes1', ...	'XColor',[0 0 0], ...	'YColor',[0 0 0], ...	'ZColor',[0 0 0]);b = axes('Parent',a, ...	'Box','on', ...   'Color',[1 1 1], ...	'Position',position(4,2,:), ...	'XColor',[0 0 0], ...	'XGrid','off', ...	'XTick',[],...	'YColor',[0 0 0], ...	'YGrid','off', ...	'YTick',[], ...	'ZColor',[0 0 0], ...	'ZGrid','off', ...	'ZTick',[]);handles(18) = b;h_2 = axes('Parent',a, ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'Position',position(4,2,:), ...	'Tag','Axes2', ...	'XColor',[0 0 0], ...	'YColor',[0 0 0], ...	'ZColor',[0 0 0]);b = axes('Parent',a, ...	'Box','on', ...	'Color',[1 1 1], ...	'Position',position(4,3,:), ...	'XColor',[0 0 0], ...	'XGrid','off', ...	'XTick',[],...	'YColor',[0 0 0], ...	'YGrid','off', ...	'YTick',[], ...	'ZColor',[0 0 0], ...	'ZGrid','off', ...	'ZTick',[]);handles(19) = b;h_3 = axes('Parent',a, ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'Position',position(4,3,:), ...	'Tag','Axes3', ...	'XColor',[0 0 0], ...	'YColor',[0 0 0], ...	'ZColor',[0 0 0]);b = axes('Parent',a, ...	'Box','on', ...	'Color',[1 1 1], ...	'Position',position(4,4,:), ...	'XColor',[0 0 0], ...	'XGrid','off', ...	'XTick',[],...	'YColor',[0 0 0], ...	'YGrid','off', ...	'YTick',[], ...	'ZColor',[0 0 0], ...	'ZGrid','off', ...	'ZTick',[]);handles(20) = b;h_4 = axes('Parent',a, ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'Position',position(4,4,:), ...	'Tag','Axes4', ...	'XColor',[0 0 0], ...	'YColor',[0 0 0], ...	'ZColor',[0 0 0]);handles(6) = h_1;handles(7) = h_2;handles(8) = h_3;handles(9) = h_4;end	set( a, 'Userdata', handles);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	Show UI%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function LocalOpenFig();strFigType = [ ...      'slider position ';...      'slider velocity ';...      'coupler angle   ';...   	'mechanism       '];%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	Main Figure%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ScreenSize = get(0,'ScreenSize');sx = 520;sy = 440;FigPos = [ ScreenSize(3)-sx-10 ScreenSize(4)-sy-40 sx sy ] ;a = figure('Units','Pixels', ...		'Color',[0.8 0.8 0.8], ...      'Name','Slider Crank Analysis Window', ...       'NumberTitle','off', ...		'Position',FigPos, ...	 	'Tag','Slider Crank Analysis Window');	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Draw the frame for Figure Selection%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...   'BackgroundColor',[0.752941 0.752941 0.752941], ...   'Position',[0.01731 0.020 0.77 0.1117], ...   'Style','frame', ...	'Tag','Frame2');	b = uicontrol('Parent',a, ...	'Units','normalized', ...   'Position',[0.7808 0.020 0.2038 0.1117], ...   'Style','frame', ...   'Tag','Frame1');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Menu uicontrols%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% b = uimenu('Parent',a, ...	'Label','Parameter', ...	'Tag','menu_parameter');h_load = uimenu('Parent',b, ...	'Callback','slidercrank_ana(''GetFile'')', ...	'Label','Load', ...	'Tag','submenu_load');h_save = uimenu('Parent',b, ...	'Callback','slidercrank_ana(''PutFile'')', ...	'Label','Save', ...	'Tag','submenu_save');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Setup number of figures%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...   'Units','normalized', ...	'Position',[0.03 0.07 0.095 0.03911], ... 	'String','No. of figs ', ...	'Style','text', ...	'Tag','StaticText2');h_fignum = uicontrol('Parent',a, ...	'Units','normalized', ...   'Callback','slidercrank_ana(''ChangeFigureNo'');', ...   'Position',[0.135 0.0837 0.10 0.03538], ...   'String',['1';'2';'3';'4'], ...   'Style','popupmenu', ...	'Tag','FigNumber', ... 	'Value',4);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Speed Control%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...   'Position',[0.03 0.02793 0.08 0.03910], ...   'String','Speed ', ...	'Style','text', ... 	'Tag','StaticText2');	h_plus = uicontrol('Parent',a, ...	'Units','normalized', ...   'Callback','slidercrank_ana(''SetSpeed'',0.707);', ...   'Position',[0.1327 0.02955 0.04038 0.03182], ...    'String','+', ...	'Enable','on', ...	'Tag','Plus_button');b = uicontrol('Parent',a, ...	'Units','normalized', ...   'Callback','slidercrank_ana(''SetSpeed'',1.414);', ...   'Position',[0.2 0.02955 0.04038 0.03182], ...   'String','-', ... 	'Tag','Minus_button');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Put label in front of the popup menu item 	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...   'Position',[0.2442 0.07821 0.06262 0.03724], ...   'String','Fig 1', ...	'Style','text', ... 	'Tag','StaticText1'); b = uicontrol('Parent',a, ...	'Units','normalized', ...   'Position',[0.5019 0.08007 0.06262 0.03724], ...   'String','Fig 2', ...	'Style','text', ...	'Tag','StaticText1');b = uicontrol('Parent',a, ...	'Units','normalized', ...   'Position',[0.2442 0.03352 0.06262 0.03724], ...   'String','Fig 3', ...   'Style','text', ...	'Tag','StaticText1');b = uicontrol('Parent',a, ...	'Units','normalized', ...   'Position',[0.5019 0.03724 0.06262 0.03724], ...   'String','Fig 4', ...	'Style','text', ...	'Tag','StaticText1');	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Setup the Popup menu contents for Figure Type Selection 	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%h_fig1 = uicontrol('Parent',a, ...	'Units','normalized', ...   'Callback','slidercrank_ana(''ChangeFigure'',1);', ...   'Position',[0.3077 0.0837 0.19256 0.03538], ...   'String',strFigType, ... 	'Style','popupmenu', ...	'Tag','Fig1', ...	'Value',4);h_fig2 = uicontrol('Parent',a, ...	'Units','normalized', ...   'Callback','slidercrank_ana(''ChangeFigure'',2);', ...   'Position',[0.5692 0.0837 0.19256 0.03538], ...   'String',strFigType, ...	'Style','popupmenu', ...	'Tag','Fig2', ...	'Value',1);h_fig3 = uicontrol('Parent',a, ...	'Units','normalized', ...   'Callback','slidercrank_ana(''ChangeFigure'',3);', ...   'Position',[0.3077 0.04024 0.1926 0.03538], ...   'String',strFigType, ...	'Style','popupmenu', ...	'Tag','Fig3', ...	'Value',2);h_fig4 = uicontrol('Parent',a, ...	'Units','normalized', ...   'Callback','slidercrank_ana(''ChangeFigure'',4);', ...   'Position',[0.5692 0.04024 0.1926 0.03538], ...   'String',strFigType, ...   'Style','popupmenu', ...	'Tag','Fig4', ...	 'Value',3);	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Start/Stop/Return%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%h_start = uicontrol('Parent',a, ...   'Units','normalized', ...	'CallBack','slidercrank_ana(''Start'')', ...   'Position',[0.7942 0.07727 0.08577 0.04318], ...   'String','Start', ...	'Tag','start_button');h_stop = uicontrol('Parent',a, ...	'Units','normalized', ...	'CallBack','slidercrank_ana(''Stop'')', ...	'Position',[0.8854 0.07727 0.08577 0.04318], ...    'String','Stop', ...   'Userdata',1,...	'Tag','stop_button');h_return = uicontrol('Parent',a, ...   'Units','normalized', ...	'CallBack','slidercrank_ana(''Return'')', ...	'Position',[0.7942 0.02891 0.1773 0.04318], ...    'String','Return', ...   'Tag','return_button');drawnow;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Assign Initial value%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nAnimationFlag = 0;handles = zeros( 1, 24);handles(1) = h_fignum;handles(2) = h_fig1;handles(3) = h_fig2;handles(4) = h_fig3;handles(5) = h_fig4;handles(10) = nAnimationFlag;handles(15) = 1;% initial animation starting indexhandles(16) = 0.1;% initial timesink valuehandles(21) = h_load;handles(22) = h_save;handles(23) = h_return;handles(24) = h_plus;set( a, 'Userdata', handles);drawnow;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Assign Initial value%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nAnimationFlag = 0;handles = zeros( 1, 24);handles(1) = h_fignum;handles(2) = h_fig1;handles(3) = h_fig2;handles(4) = h_fig3;handles(5) = h_fig4;handles(10) = nAnimationFlag;handles(15) = 1;% initial animation starting indexhandles(16) = 0.1;% initial timesink valuehandles(21) = h_load;handles(22) = h_save;handles(23) = h_return;handles(24) = h_plus;set( a, 'Userdata', handles);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	String Table%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [ labels ] = GetFigLabel( nFigType )	strTable = cell( 9, 3 );   strTable( 1,:) = {'crank angle (deg)';'slider position ';'slider position graph';};   strTable( 2,:) = {'crank angle (deg)';'slider velocity ';'slider velocity graph';};   strTable( 3,:) = {'crank angle (deg)';'coupler angle (deg)';'coupler angle graph';};   strTable( 4,:) = {'coupler angle (deg)';'slider position ';'slider position graph';};   strTable( 5,:) = {'coupler angle (deg)';'slider velocity ';'slider velocity graph';};   strTable( 6,:) = {'coupler angle (deg)';'coupler angle (deg) ';'slider position graph';};   strTable( 7,:) = {'slider position ';'crank angle (deg)';'crank angle graph';};   strTable( 8,:) = {'slider position ';'crank velocity (deg)';'crank velocity graph';};   strTable( 9,:) = {'slider position ';'coupler angle (deg)';'coupler angle graph';};   labels = strTable( nFigType, : );%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	Calculate the result%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [res] = CalcResult( r, beta, Q1, vel, driver, times, mode );i=0;r2 = r(1);r3 = r(2);r4 = r(3);cr1 = r(4);Q11=Q1*pi/180;i=0;d2r=pi/180;r2d=180/pi;Q11=Q1*d2r;cpad=beta*d2r;qstart=0;qstop=360;if driver==1; [qstart, qstop]=sc_angle_limits_cr(r2,r3,r4,Q1); endif driver==2; [qstart, qstop]=sc_angle_limits_co(r2,r3,r4,Q1); endif driver==3; [qstart, qstop]=sc_angle_limits_sl(r2,r3,r4,Q1); endnpos=73;dq=(qstop-qstart)/(npos-1);Astar=[0;0];rpivot=0.15*r2;delta=0.3*r2;QM1=qstart;	i2=0;if driver ==1; w2 = vel; endif driver ==2; w3 = vel; end	if driver ==3; r1d = vel; end	% Loop to analyze the linkage for tt full cyclesfor mmm=1:1:times% Analyze for two cycles in different modes if driver is 2 or 3	if mmm ==2		mode = -mode;		dq=-dq;	end	for motion=1:1:npos		if motion>1; QM1=QM1+dq; end		i=i+1;		QM = QM1*d2r;% Call function to compute the position		if driver ==1; para = sldcrkc(r2,r3,r4,QM1,w2,0,mode,Q1,3); end		if driver ==2; para = sldcrkco(r2,r3,r4,QM1,w3,0,mode,Q1,3); end			if driver ==3; para = sldcrks(QM1,r2,r3,r4,r1d,0,mode,Q1,3); end				Q2=para(6);		if Q2<0; Q2=Q2+360; end		Q22(i)=Q2;		w22(i)=para(14);		Q3=para(7);		Q33(i)=Q3;		w33(i)=para(15);		r1(i)=para(1);		rd1(i)=para(9);		assem=para(37);		cang1=(Q3+beta)*d2r;% Store position information in matrices.		Bx(i)= para(25);		By(i)= para(26);		Cx(i)= para(27);		Cy(i)= para(28);		Dx1(i)=Bx(i)+cr1*cos(cang1);		Dy1(i)=By(i)+cr1*sin(cang1);			% Determine coordinates for coupler curve for first mode						if mmm==1				Dx2(i)=Dx1(i);				Dy2(i)=Dy1(i);			end			% Determine coordinates for coupler curve for second mode						if mmm==2				i2=i2+1;				Dx3(i2)=Dx1(i);				Dy3(i2)=Dy1(i);			end		% Locate the slider block coordinates		xpin=Cx(i);		ypin=Cy(i);		height=delta;		length=2*height;		coords = rect(length,height,xpin,ypin,Q1,0);		for j=1:1:5			xblocka(i,j)=coords(j,1);			yblocka(i,j)=coords(j,2);		end% Print results in a table	endenditotal=i;% Determine the coordinates of the slider line				smax=max(r1);smin=min(r1);[cmin, index]=min(Cx);cymin=Cy(index);length1=smax-smin+length;ndash=20;csang=cos(Q11);ssang=sin(Q11);	xe = cmin-(0.5*length)*csang;ye = cymin-(0.5*length)*ssang;slflag=1;coord=frameline(length1,xe,ye,ndash,Q1,slflag);					npoints1=3*ndash;					% Offset slider line by half the height of the slider block.					for i=1:1:npoints1	xsl1(i)=coord(i,1)+(0.6*height)*ssang;	ysl1(i)=coord(i,2)-(0.6*height)*csang;end					width=0.95;height=0.95;r2 = r(1);   r3 = r(2);   r4 = r(3);   cr1 = r(4);   % Define the pin and bushing coordinates	bush=bushing(r2/20,0,0,20,0);cir1=circle2(r2/20,0,0,20);% Find the limits for the plotsxmina=min([min(Dx1) min(Bx) min(Cx) min(bush(:,1)) ...      min(xsl1) min(xblocka) min(coord(:,1))]);xmaxa=max([max(Dx1) max(Bx) max(Cx) max(bush(:,1)) ...      max(xsl1) max(xblocka) max(coord(:,1))]);ymina=min([min(Dy1) min(By) min(Cy) min(bush(:,2)) ...      min(ysl1) min(yblocka) min(coord(:,2))]);ymaxa=max([max(Dy1) max(By) max(Cy) max(bush(:,2)) ...      max(ysl1) max(yblocka) max(coord(:,2))]);rangex=xmaxa-xmina;rangey=ymaxa-ymina;xmin=xmina-0.05*rangex;xmax=xmaxa+0.05*rangex;ymin=ymina-0.05*rangey;ymax=ymaxa+0.05*rangey;values=axisadjust(xmin, xmax, ymin, ymax, width, height);xmin=values(1);xmax=values(2);ymin=values(3);ymax=values(4);% The original program has many 'if ... end' function to specify the xdata % and ydata set for different driver. It looks like complicated while applying % the analysis modules here, because a global variable g_Anares stores all the% data required to draw this animation, which does not contain any logical % decision.% However, the old combination of x and y data can be reognized as the following:%                       		driver = 1		driver = 2		driver = 3								%										x		y			x		y			x		y% slider position graph			Q22	r1			Q33	r1			r1		Q22% slider velocity graph			Q22	rd1		Q33	rd1		r1		w22% coupler angle graph			Q22	Q33		Q33	Q33		r1		Q33% Therefore, x and y data are stored in the following order.res = zeros( 41, itotal);i = 0;i = i+1; res( i,: ) = Q22;i = i+1; res( i,: ) = r1;i = i+1; res( i,: ) = Q22;i = i+1; res( i,: ) = rd1;i = i+1; res( i,: ) = Q22;i = i+1; res( i,: ) = Q33;i = i+1; res( i,: ) = Q33;i = i+1; res( i,: ) = r1;i = i+1; res( i,: ) = Q33;i = i+1; res( i,: ) = rd1;i = i+1; res( i,: ) = Q33;i = i+1; res( i,: ) = Q33;i = i+1; res( i,: ) = r1;i = i+1; res( i,: ) = Q22;i = i+1; res( i,: ) = r1;i = i+1; res( i,: ) = w22;i = i+1; res( i,: ) = r1;i = i+1; res( i,: ) = Q33;i = i+1; res( i,: ) = Bx;i = i+1; res( i,: ) = By;i = i+1; res( i,: ) = Cx;i = i+1; res( i,: ) = Cy;% xsl1, ysl1 and xblocka, yblocka have their matrix sizes different from% most of the other data. Therefore, they are taken care of separately.% We just store xsl1 and ysl1 in part of the 'res' matrix. To retrieve% only that part of matrix from the g_Anares variables later when xsl1 and% ysl2 are needed, the variable npoints1 is stored in this global variable% at res(41,12)i = i+1; res( i,1:npoints1 ) = xsl1;i = i+1; res( i,1:npoints1 ) = ysl1;% xblocka and yblocka are matries with size (itotal,5)% Because we need to store them into the 'res' variable, xblock and yblock are% created to transpose these two matries. Then they use five columns of 'res' % to store them xblock = xblocka';yblock = yblocka';i = i+1; res( i:i+4,: ) = xblock;i = i+5; res( i:i+4,: ) = yblock;i = i+5; res( i,: ) = Dx1;i = i+1; res( i,: ) = Dy1;if mmm ==2   k = itotal/2;else   k = itotal;endi = i+1; res( i,1:k ) = Dx2;i = i+1; res( i,1:k) = Dy2;if mmm ==2   i = i+1; res( i,1:k ) = Dx3;   i = i+1; res( i,1:k ) = Dy3;endres( 41,1 ) = driver;res( 41,2 ) = times;res( 41,3 ) = mode;res( 41,4 ) = xmin;res( 41,5 ) = xmax;res( 41,6 ) = ymin;res( 41,7 ) = ymax;res( 41,8:11 ) = r;res( 41,12 ) = npoints1;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Fig Setting for Special Case%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [] = CreateMechanismHandles( handle,r2,Dx2,Dy2,Dx3,Dy3,xsl1,ysl1,times,xmin,xmax,ymin,ymax) axes(handle);%setup the aspect ratio of the mechanism to 1 set(handle, 'DataAspectRatio',[1 1 1],'Color','none','box','off');axis off;axis([xmin xmax ymin ymax]);% Set up coordinates of bushings and pins.bush=bushing(r2/20,0,0,20,0);cir1=circle2(r2/20,0,0,20);[nn mn]=size(Dx2);itotal=mn;	    % Set up the vectors needed to draw the linkagejoint1=line('xdata', [], 'ydata', [], 'marker', 'o','markersize',8,'color', 'k');joint2=line('xdata', [], 'ydata', [], 'marker', 'o','markersize',8,'color', 'k');gridpt=line('xdata', [], 'ydata' ,[], 'linewidth' ,1,'markersize',6,'color', 'k', 'marker', 'o');	block=line('xdata', [], 'ydata', [], 'linewidth' ,1,'color', 'k');crank=line('xdata', [], 'ydata' ,[], 'linewidth' ,1,'color', 'k');coupler=line('xdata', [], 'ydata' ,[], 'linewidth' ,1,'color', 'k');couplerptr=line('xdata', [], 'ydata' ,[], 'linewidth' ,1,'color', 'k');	   couplerpoint1=line('xdata', [], 'ydata' ,[], 'linewidth' ,1,'color', 'r', 'linestyle', '-');	couplerpoint2=line('xdata', [], 'ydata' ,[], 'linewidth' ,1,'color', 'r', 'linestyle', '-');	for ipoints =1:itotal	   	gridline1(ipoints)=line('xdata',[],'ydata',[],'linewidth',1,'color','r','linestyle','-');		gridline2(ipoints)=line('xdata',[],'ydata',[],'linewidth',1,'color','r','linestyle','-');	end	   	   bush1=line('xdata', [], 'ydata',[], 'linestyle', '-', 'markersize', 8,'color', 'r');circ1=line('xdata', [], 'ydata',[], 'linestyle', '-', 'markersize', 8,'color', 'r');sliderline1=line('xdata', [], 'ydata',[], 'linestyle', '-','color', 'r');       set(bush1,'xdata', bush(:,1), 'ydata',bush(:,2));set(circ1,'xdata', cir1(:,1), 'ydata',cir1(:,2)); %draw the coupler curve dashedfor ipoints = 1:itotal	if ipoints <itotal		msdx=Dx2(ipoints);		midx=Dx2(ipoints)+(Dx2(ipoints+1)-Dx2(ipoints))/2;		msdy=Dy2(ipoints);		midy=Dy2(ipoints)+(Dy2(ipoints+1)-Dy2(ipoints))/2;	end	if ipoints ==itotal && itotal==72		msdx=Dx2(ipoints);		midx=Dx2(ipoints)+(Dx2(1)-Dx2(ipoints))/2;		msdy=Dy2(ipoints);		midy=Dy2(ipoints)+(Dy2(1)-Dy2(ipoints))/2;	end					set(gridline1(ipoints),'xdata', [msdx midx],'ydata',[msdy midy]);	if times == 2		if ipoints <itotal			msdx=Dx3(ipoints);			midx=Dx3(ipoints)+(Dx3(ipoints+1)-Dx3(ipoints))/2;			msdy=Dy3(ipoints);			midy=Dy3(ipoints)+(Dy3(ipoints+1)-Dy3(ipoints))/2;		end		if ipoints ==itotal && itotal==72			msdx=Dx3(ipoints);			midx=Dx3(ipoints)+(Dx3(1)-Dx3(ipoints))/2;			msdy=Dy3(ipoints);			midy=Dy3(ipoints)+(Dy3(1)-Dy3(ipoints))/2;		end								set(gridline2(ipoints),'xdata',[msdx midx],'ydata',[msdy midy]);	endend% Draw the frame line.set(sliderline1, 'xdata', xsl1, 'ydata', ysl1);hdls=[ joint1 joint2 crank coupler ...       couplerptr gridpt block ];set( handle,'userdata', hdls);    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Set the mechanism position%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [] = SetMechanismPosition( links,i,Bx,By,Cx,Cy,Dx1,Dy1,xblocka,yblocka)	joint1 = links(1);	joint2 = links(2);	crank = links(3);	coupler = links(4);	couplerptr= links(5);	gridpt = links(6);	block = links(7);      set(joint1,'xdata', Bx(i), 'ydata',By(i));	set(joint2,'xdata', Cx(i), 'ydata',Cy(i));	set(crank,'xdata',[0 Bx(i)],'ydata', [0 By(i)]);	set(coupler,'xdata', [Bx(i) Cx(i)],'ydata', [By(i) Cy(i)]);	set(block,'xdata', [xblocka(i,:)],'ydata', [yblocka(i,:)]);	set(couplerptr,'xdata', [Bx(i) Dx1(i) Cx(i)],...				'ydata' ,[By(i) Dy1(i) Cy(i)]);	set(gridpt,'xdata', Dx1(i), 'ydata',Dy1(i));
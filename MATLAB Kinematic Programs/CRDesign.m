function CRDesign(command_str,Argument2)%Variables%   Variables for calculation %   theta=rocker oscillation angle (deg)%   thetar=rocker oscillation angle (rad)%   alpha=crank angle (deg)%   alphar=crank angle (rad)%   Q= time ratio%   Bx, By=crank pin location - x and y coordinates%   Cx, Cy=rocker pin location - x and y coordinates%   circleb,circleb=x,y coordinates of the B1 circle%   radi=distance based on frame and crank link lengths%   t3,t4=limiting rocker angles (rad)%   bushx1,bushy1=x,y coordinates of the first bushing%   bushx2,bushy2=x,y coordinates of the second bushing%   ipos=number of linkage positions for the animation%   fact=conversion factor, from degrees to radians%   lknown = link with the known length%   rknown = known link length%Graphics Variables%   joint1=line for joint at crank/coupler%   joint2=line for joint at coupler/rocker%   crank=line for the crank%   coupler=line for the coupler%   rocker=line for the rocker%   bush1,bush2=lines representing the bushings%   xmin, xmax= x limits for the axes%   ymin, ymax= y limits for the axesglobal nBetaflagif nargin == 0 && isempty(findobj('Tag','fig_dsgn'))% CRDesign is being initialized	command_str = 'initialize';    theta = 80;    alpha = 10;elseif nargin == 0 && ~isempty(findobj('Tag','fig_dsgn'))   % CRDesign is already open    command_str = 'None';endif ~strcmp(command_str,'initialize') && ~strcmp(command_str,'Help')    % Retreive object and graphics handles from the userdata of design figure     % (fig_dsgn) and the axis (dsgn_axe).    % Then, retrieve previous value of variables from userdata of those objects       a = findobj('Tag','fig_dsgn');						b = findobj('Tag','dsgn_axe');	handles = get(a,'userdata');    h_theta = handles(1);    theta = get(h_theta,'userdata');    h_alpha = handles(2);    alpha = get(h_alpha,'userdata');    h_beta = handles(3);    beta = get(h_beta,'userdata');    h_Rradio = handles(4:7);    h_R = handles(8:11);    h_Tradio = handles(12:13);    h_Q = handles(14);    h_status = handles(15);       handles =get(b,'userdata');    h_arrow = handles(1);    arc1 = handles(2);    arc2 = handles(3);    bush1 = handles(4);    bush2 = handles(5);    pin1 = handles(6);     pin2 = handles(7);     joint1 = handles(8);    joint2 = handles(9);    joint12 = handles(10);    joint22 = handles(11);    joint13 = handles(12);    joint23 = handles(13);    crank = handles(14);    rocker = handles(15);    coupler = handles(16);    crank2 = handles(17);    rocker2 = handles(18);    coupler2 = handles(19);    crank3 = handles(20);    rocker3 = handles(21);    coupler3 = handles(22);    line1 = handles(23);     line2 = handles(24);     line3 = handles(25);       handles = get(arc1,'userdata');    xg = handles(1);    yg = handles(2);    betamin = handles(3);    betamax = handles(4);    rb = handles(5);    fact=pi/180;	thetar=theta*fact;	alphar=alpha*fact;endswitch command_str    case 'initialize'        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %	Initialize the User Interface        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        % Set the flag for beta value input from the userdata while initialization        nBetaflag=1;	        if nargin >= 2 || ~isempty(findobj('tag','menu_page'))            LocalOpenFig;            CRDesign('DrawB2Arc');            CRDesign('Move');        else            show_me_logo('initialize','CRDesign');        end	       case 'DrawB2Arc'        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %	Draw the B2 Circle        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        a = findobj('Tag','fig_dsgn');        b = findobj('Tag','dsgn_axe');        % Locate the radius and center of the B2 circle.        denom=sin(pi-thetar+alphar);        rb=100000;        sliderflag=1;        if denom~=0            sliderflag=0;            rb=sin(thetar/2)/denom;        end        xg=rb*cos(thetar/2 - alphar);        yg=-rb*sin(thetar/2 - alphar);           % Find the limiting angles for the B2 circle;        betamax=pi+alphar-thetar/2;        ym=0;        xm=2*rb*cos(thetar/2-alphar);        if alpha >=0            tt=tan(thetar);            if abs(tt) > 0.00000001 && abs(tt) < 1000000                A=1+1/(tan(thetar))^2;                B=-2*((xg-1)/tan(thetar) + yg);            end            if abs(tt) > 1000000;                A=1;                B=-2*yg;            end            C=(1+yg^2+xg^2-2*xg-rb^2);            ym=100000;            arg=B*B-4*A*C;            if arg > 0                if A ~= 0                    ym1=(-B+sqrt(arg)/(2*A));                    ym2=(-B-sqrt(arg)/(2*A));                    ym=max([ym1, ym2]);                    % If ym is negative for both roots, set ym = 0,                    if ym<0; ym=0; end                end            end            if arg < 0                set(h_status,'string','No solution exists; change input data ');                set(h_theta,'userdata',80);                set(h_alpha,'userdata',10);                set(h_theta,'string',80);                set(h_alpha,'string',10);                return;            end            xm = 1+ym/tan(thetar);            set(h_status,'string','');        end        betamin=atan2((ym-yg), (xm-xg));        % Set up coordinates of bushings and pins.           rpivot=0.03;        ninc=20;          npoints=ninc+1;        centerx=0;        centery=0;        coord=circle2(rpivot,centerx,centery,ninc);        % find coordinates of first pin        for i=1:1:npoints            xcoord1(i)=coord(i,1);            xcoord2(i)=xcoord1(i)+1;            ycoord1(i)=coord(i,2);        end        ycoord2=ycoord1;        % Find coordinates of first bushing        binc=ninc/2;        coord1=bushing(rpivot,centerx,centery,binc,0);        bpoints=ninc/2+16;        for i=1:1:bpoints            xbush1(i)=coord1(i,1);            xbush2(i)=xbush1(i)+1;		            ybush1(i)=coord1(i,2);        end        ybush2=ybush1;        % Set up coordinates for B2 arc if rb is a reasonable size.        ninc=180;        if rb < 20            inc=(betamax-betamin)/ninc;            betamean=(betamax+betamin)/2;            npoints = ninc+1;            i=0;            for j=betamin:inc:betamax                i=i+1;                coordx(i)=xg+rb*cos(j);                coordy(i)=yg+rb*sin(j);            end            % Set up coordinates to end line to B2 arc.            xline1=[1, xg+rb*cos(betamin)];            yline1=[0, yg+rb*sin(betamin)];        end        % Define B2 "arc" when rb is large        if rb >= 20            coordx(1)=0;            coordy(1)=0;            angB2=alphar-thetar/2+pi/2;            coordx(2)=2*cos(angB2);            coordy(2)=2*sin(angB2);            xline1=[0 0];            yline1=[0 0];        end        % Set up the axes for first drawing.        width=0.57;        height=0.57;        cx=[xcoord1, xbush1, xcoord2, xbush2,1,0,coordx,xline1,];        cy=[ycoord1,ybush1,ycoord2, ybush2,yg,coordy,yline1,];        xmina=min(cx);        xmaxa=max(cx);        ymina=min(cy);        if ymina>-.5; ymina=-0.5; end        ymaxa=max(cy);        rangex=xmaxa-xmina;        rangey=ymaxa-ymina;        xmin=xmina-0.4*rangex;        xmax=xmaxa+0.4*rangex;        ymin=ymina-0.1*rangey;        ymax=ymaxa+0.6*rangey;        values=eval('axisadjust(xmin, xmax, ymin, ymax, width, height)');        xmin=values(1);        xmax=values(2);        ymin=values(3);        ymax=values(4);        axis([xmin xmax ymin ymax]);        % draw the two pins and bushings.        set(pin1,'xdata', xcoord1, 'ydata',ycoord1);        set(bush1,'xdata', xbush1,'ydata', ybush1);        set(pin2,'xdata', xcoord2, 'ydata',ycoord2);        set(bush2,'xdata', xbush2,'ydata', ybush2);        % Draw the B2 arc.        set (arc1,'xdata', coordx, 'ydata', coordy);        % Draw line to end of B2 arc        set (line1, 'xdata', xline1, 'ydata',yline1);        % Draw x at point G.        set (line2, 'xdata', [xg-0.05, xg+0.05], 'ydata',[yg, yg]);        set (line3, 'xdata', [xg, xg], 'ydata',[yg-0.05, yg+0.05]);        % Draw arrow in it's minimum setting        arrowx = rb*[0 -1 -.95 NaN  -1 -.95];        arrowy = rb*[0  0 -.05 NaN  0   .05];        arrowz = rb*[0  0    0   0  0     0];        % Store a matrix that can be manipulated        % and used to draw the arrow after a rotation        % angle has been determined.        arrowud = [arrowx(:),arrowy(:),...               arrowz(:),ones(prod(size(arrowx)),1)]';        minval = 180-betamax/fact;             A = viewmtx(50,90);        firstarrow = A*arrowud;        firstarrow(1,:) = firstarrow(1,:)+[xg xg xg NaN xg xg];        firstarrow(2,:) = firstarrow(2,:)+[yg yg yg NaN yg yg];        set(h_arrow,'xdata',firstarrow(1,:),'ydata',firstarrow(2,:));        set(h_arrow,'userdata',arrowud);        set([arc1;h_arrow],...         'buttondownfcn','CRDesign(''Set Calls'');CRDesign(''Move'')');        hdls = [xg yg betamin betamax rb];        set(arc1,'userdata',hdls);          case 'Set Calls'        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        % The Callbacks When the User Moves or Releases         % the Mouse Button.        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        % get the handle of the objects used to control        % the mouse input         a = findobj('Tag','fig_dsgn');        nBetaflag = 0;        set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''fig_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');        set(a,'windowbuttonmotionfcn','CRDesign(''Move'')');       case 'Move'        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        % The Callbacks When The User Moves the Mouse Button.        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        % Find out where the mouse pointer is located.        a = findobj('Tag','fig_dsgn');        b = findobj('Tag','dsgn_axe');        set(h_status,'string','');        if nBetaflag==1            a = get(h_beta,'userdata');            b = get(h_beta,'string');            beta = check_val(a,b);            deg = 180-beta;        else               pt = get(b,'currentpoint');            pt = pt(1,1:2);                  % Determine the angle that the pointer is with            % respect to the arrrow hinge.            deg = atan2(pt(2)-yg,-pt(1)+xg)*180/pi;            % Make sure the arrow does not swing past limits.        end        minval = 180-betamax/fact;        maxval = 180-betamin/fact;        if deg > 90            deg=min(deg,maxval);        else            deg=max(deg,minval);        end        beta_val=180-deg;        % Store the value in the current axes UserData        % where it can be retrieved by an application.        set(h_beta,'userdata',beta_val);        set(h_beta,'string',num2str(beta_val));        % Create transformed coordinate points for the arrow.        arrowud = get(h_arrow,'userdata');        A = viewmtx(deg,90);        newarrow = A*arrowud;        newarrow(1,:) = newarrow(1,:)+[xg xg xg NaN xg xg];        newarrow(2,:) = newarrow(2,:)+[yg yg yg NaN yg yg];        set(h_arrow,'xdata',newarrow(1,:),'ydata',newarrow(2,:));        % Compute the coordinates of B1 and B2.        beta=beta_val*fact;        xb2=xg+rb*cos(beta);        yb2=yg+rb*sin(beta);        theta22=180+atan2(yb2,xb2)/fact;        phi=atan2(yb2, (xb2-1));        r4=sqrt((xb2-1)^2+yb2^2);        r1=1;        angb1=phi-thetar;        xb1=1+r4*cos(angb1);        yb1=r4*sin(angb1);        theta21=atan2(yb1,xb1)/fact;        % Compute r2 and r3.        leng1=sqrt(xb1^2+yb1^2);        leng2=sqrt(xb2^2+yb2^2);        r2=(leng1-leng2)/2;        r3=(leng1+leng2)/2;        % Draw the linkage in an arbitrary position.        theta2=(theta21+theta22)/2;        mode=-1;        theta1=0;        points = fourbar(r1,r2,r3,r4,theta2,0,0,mode,theta1,flag);        Bxx=points(17);        Byy=points(18);        Cxx=points(19);        Cyy=points(20);        set(joint1,'xdata', Bxx,'ydata',Byy);        set(joint2,'xdata', Cxx, 'ydata',Cyy);        set(crank,'xdata',[0 Bxx],'ydata', [0 Byy]);        set(coupler,'xdata', [Bxx Cxx],'ydata', [Byy Cyy]);        set(rocker,'xdata', [r1 Cxx],'ydata', [0 Cyy]);        % Draw linkage in extreme (B1) position        theta2=theta21;        points = fourbar(r1,r2,r3,r4,theta2,0,0,mode,theta1,flag);        Bxx=points(17);        Byy=points(18);        Cxx=points(19);        Cyy=points(20);        set(joint12,'xdata', Bxx,'ydata',Byy);        set(joint22,'xdata', Cxx, 'ydata',Cyy);        set(crank2,'xdata',[0 Bxx],'ydata', [0 Byy]);        set(coupler2,'xdata', [Bxx Cxx],'ydata', [Byy Cyy]);        set(rocker2,'xdata', [r1 Cxx],'ydata', [0 Cyy]);        %   fMinTMAngle = points(8) - points(7);        %   a = findobj('Tag','MinTMAngle');           %   set(a,'String',num2str(fMinTMAngle));        % Draw linkage in extreme (B2) position        theta2=theta22;        points = fourbar(r1,r2,r3,r4,theta2,0,0,mode,theta1,flag);        Bxx=points(17);        Byy=points(18);        Cxx=points(19);        Cyy=points(20);        set(joint13,'xdata', Bxx,'ydata',Byy);        set(joint23,'xdata', Cxx, 'ydata',Cyy);        set(crank3,'xdata',[0 Bxx],'ydata', [0 Byy]);        set(rocker3,'xdata', [r1 Cxx],'ydata', [0 Cyy]);        set(coupler3,'xdata', [Bxx Cxx],'ydata', [Byy Cyy]);        %   fMaxTMAngle = points(8) - points(7);        tmp = (r4^2 -(r1+r2)^2+r3^2)/(2*r4*r3);        fMaxTMAngle = acos(tmp);        if (fMaxTMAngle < 0)            fMaxTMAngle = pi + fMaxTMAngle;        end           fMaxTMAngle = fMaxTMAngle/fact;        tmp = (r4^2 -(r1-r2)^2+r3^2)/(2*r4*r3);        fMinTMAngle = (acos(tmp))/fact;        a = findobj('Tag','MaxTMAngle');           set(a,'String',num2str(fMaxTMAngle));        a = findobj('Tag','MinTMAngle');           set(a,'String',num2str(fMinTMAngle));        % Unscale the link lengths        r=[r1 r2 r3 r4];        %button = get(h_Rradio(2),'userdata')        set(h_Rradio(1),'userdata',r);        CRDesign('Change R value');        case 'Beta Optimization'        betamin = betamin/fact;        betamax = betamax/fact;        optbeta = fminbnd('OptBeta', betamin,betamax);        U1 = OptBeta(optbeta);        set(h_beta,'userdata',optbeta,'string',num2str(optbeta));        CRDesign('Change beta');     case 'Change theta'        nBetaflag = 1;        b = get(h_theta,'string');        if str2num(b) < 0.001 || str2num(b)>= 180            set(h_status,'string','Theta input is out of range. Please reinput theta angle ');            b=num2str(theta);            return;        end        theta = check_val(theta,b);        set(h_theta,'userdata',theta);        set(h_theta,'string',num2str(theta));        CRDesign('DrawB2Arc');        CRDesign('Move');          case 'Change beta'        nBetaflag=1;        CRDesign('Move');       case 'R_radio'        num_buttons = length(h_Rradio);        button = Argument2;        set(h_Rradio(2),'userdata',button);        if get(h_Rradio(button),'value') == 0            set(h_Rradio(button),'value',1);        end        set(h_Rradio([1:(button-1), (button+1):num_buttons]),'value',0);          case 'Change R value'        r = get(h_Rradio(1),'userdata');        button=get(h_Rradio(2),'userdata');        if r(button)>1e-05            a = get(h_R(button),'userdata');            b = get(h_R(button),'string');            Rknown = check_val(a,b);            if get(h_Rradio(button),'value') == 1                R=calc_R(r,Rknown,button);            end            set(h_status,'string','');        else               set(h_status,'string',...             ['The unscaled link length is too small,Please choose another one (button)']);            R=calc_R(r,2,1);        end        for i=1:4            set(h_R(i),'userdata',R(i));            set(h_R(i),'string',num2str(R(i)));        end          case 'T_radio'        num_buttons = 2;        button = Argument2;        set(h_Tradio(1),'userdata',button);        if get(h_Tradio(button),'value') == 0            set(h_Tradio(button),'value',1);        end        set(h_Tradio([1:(button-1), (button+1):num_buttons]),'value',0);    case 'Change time ratio'        nBetaflag = 1;        button=get(h_Tradio(1),'userdata');        alpha = get(h_alpha,'userdata');        Q =(180+alpha)/(180-alpha);        if button == 1            b = get(h_alpha,'string');            alpha = check_val(alpha,b);            Q =(180+alpha)/(180-alpha);        else             b = get(h_Q,'string');            Q = check_val(Q,b);            if Q < 0; Q=0; end            alpha=180*(Q-1)/(Q+1);        end        set(h_alpha,'userdata',alpha);        set(h_alpha,'string',num2str(alpha));        set(h_Q,'string',num2str(Q));        CRDesign('DrawB2Arc');        CRDesign('Move');       case 'None'           % the following command will bring the existing figure to foreground        a = findobj('Tag','fig_dsgn');        figure(a);    case 'Close'        % if the target window exist then close it        if ~isempty(findobj('Tag','Analysis Window'))            crana('Stop');            a = findobj('Tag','Analysis Window');               close(a);        end        a = findobj('Tag','fig_dsgn');        close(a);    case 'Analysis'        h_Rradio = findobj('Tag','R1_radio');        r = get(h_Rradio,'Userdata');        crana('initialize',r);    case 'Show Definitions'        Show_definition('initialize','CRDesign.jpg');       case 'Help'        %-------On-line help          HelpStr={'Crank Rocker Design';        '';        '    "CRDesign" is a program  to design a crank rocker  mechanism and ';        'to analyze the result.  The program  contains two  windows: a design ';        'window and an analysis window.  The nomenclature used by the program ';        'is  that given in the  textbook, Kinematics, Dynamics, and Design of ';        'Machinery by Kenneth Waldron and Gary Kinzel.';        '';        '    In the  design window, the  variables  are the  angles theta and ';        'beta, the time ratio, and one of  the link lengths.   The time ratio ';        'may be input either through the alpha angle or through the Q  value. ';        'One of the  program  features is that users can drag the mouse along ';        'the  arc  defining the  limit positions  for  the  output  link in a ';        'continuous fashion.    In addition, the  transmission angle range is ';        'shown and updated dynamically.';        '';        '    In the analysis window, users can control the number of plots(up ';        'to four) and the contents of each plot (ten options)  are  provided. ';        'Furthermore, the animation speed  can be easily adjusted by clicking ';        'on the speed buttons.';        '';        '    Two buttons connect the two windows.  The "Return" button in the ';        'analysis  window closes the  analysis  window  and  brings  back the ';        'design window, while the "Analysis" button in the design window open ';        'the analysis window and start the linkage animation.  Every time the ';        '"Analysis"  button is  pressed, all  of the  design  parameters  are ';        'updated to start a new animation. ';        '';        '    There is a status bar at  the bottom  of the design window.   If ';        'the chosen values for the variables cannot be used to create a crank ';        'rocker mechanism, an error message will be shown in the status box.  ';         ' '};        helpwin(HelpStr,'Crank Rocker Design');    case 'GetFile'        % Get the file name using the UIGETFILE        [sFileName sFilePath] = uigetfile('*.dat','Load File');        if sFileName == 0 && sFilePath == 0            return;        end           % Combine the path and file name together        sTemp = strcat( sFilePath, sFileName );        % get the size to erase the '.dat' extension           sz  = size(sFileName);        % load the data file          load(sTemp);        % assign the parameter to a variable        Parameter = eval(sFileName(1:(sz(2)-4)));        if length(Parameter) == 6            ntheta  = Parameter(1);            nalpha  = Parameter(2);            nQ      = Parameter(3);            nbeta   = Parameter(4);            nbutton = Parameter(5);            nRknown = Parameter(6);            set(h_theta,'Userdata',ntheta);            set(h_alpha,'Userdata',nalpha);            set(h_Q,'Userdata',nQ);            set(h_beta,'Userdata',nbeta);            set(h_Rradio(2),'Userdata',nbutton);            set(h_R(nbutton),'Userdata',nRknown);            set(h_theta,'string',num2str(ntheta));            set(h_alpha,'string',num2str(nalpha));            set(h_Q,'string',num2str(nQ));            set(h_beta,'string',num2str(nbeta));            set(h_R(nbutton),'string',num2str(nRknown));            CRDesign('R_radio',nbutton);            CRDesign('DrawB2Arc');            nBetaflag = 1;                  CRDesign('Move');            refresh;        else            set(h_status,'string','invalid file format');              return;        end                 case 'PutFile'        [sFileName sFilePath] = uiputfile('*.dat','Save As');        button = get(h_Rradio(2),'Userdata');        Rknown = get(h_R(button),'Userdata');        Q =(180+alpha)/(180-alpha);        ParameterData = [theta; alpha; Q; beta; button; Rknown];    %sTemp = strcat( sFilePath, sFileName);        [sTemp , errMsg] = sprintf('%s%s', sFilePath, sFileName);        [strCmd, errMsg] = sprintf('%s %s %s', 'save', sTemp, ' -ascii ParameterData');        eval(strCmd);   end   function val=check_val(oldval,newval)% Check if the user input is number input% if not, retrieve the previous value in userdataval=zeros(1);if ~isequal(length(oldval),length(str2num(newval))),  	val=oldval;%	set(findobj(gcf,'Tag','status_txt'),'String', ...%   ['Warning: An invalid property value has been entered.']);else  	val=str2num(newval);endfunction [R]=calc_R(r,Rknown,button)% R = Matrix of unscale the link lengths% r = Matrix of scaled link length% Rknown = given unscaled link length% Argument = the number of the RknownR=zeros(4,1);scale = Rknown/r(button);R=r*scale;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Show UI%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function LocalOpenFig()hdls = zeros(25,1);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Control the color of the UI%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%StdColor = get(0,'DefaultUIcontrolBackgroundColor');%PointsPerPixel = 72/get(0,'ScreenPixelsPerInch');bgframe = StdColor;bgedit = [1 1 1];bgtext = bgframe;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The Main Figure of Crank Rocker Design%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ScreenSize = get(0,'ScreenSize');sx = 480;sy = 400;FigPos = [ 10 ScreenSize(4)-sy-95 sx sy ] ;a = figure('Units','pixels', ...	'Color',[0.8 0.8 0.8], ...	'Name','Crank Rocker Design', ...	'NumberTitle','off', ...	'Position',FigPos, ...  	'Tag','fig_dsgn');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Draw Frame First% This will prevent the frames from been drawn on top of% other UICONTROLS. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.60 0.3825 0.39 0.305], ...	'Style','frame');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.60 0.695 0.39 0.190931], ...	'Style','frame');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.01 0.0119332 0.98 0.102625], ...	'Style','frame');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.60 0.8922 0.39 0.09], ...	'Style','frame');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.01 0.1225 0.58 0.0825], ...	'Style','frame');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.60 0.3 0.39 0.075], ...	'Style','frame');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.60 0.1225 0.39 0.0825], ...	'Style','frame');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.2125 0.39 0.08], ...	'Style','frame');  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% menu uicontrols%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uimenu('Parent',a, ...	'Label','Parameter', ...	'Tag','menu_parameter');   c = uimenu('Parent',b, ...	'Callback','CRDesign(''GetFile'')', ...	'Label','Load', ...	'Tag','submenu_load');  c = uimenu('Parent',b, ...	'Callback','CRDesign(''PutFile'')', ...	'Label','Save', ...	'Tag','submenu_save');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Create graphics window for design input%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-------Reference axisb = axes('Parent',a, ...  	'Box','on', ...  	'Color',[1 1 1], ...	'Position',[0.010 0.2125 0.58 0.768], ...  	'XColor',[0 0 0], ...  	'XGrid','off', ...  	'XTick',[],...  	'YColor',[0 0 0], ...  	'YGrid','off', ... 	'YTick',[], ...  	'ZColor',[0 0 0], ...  	'ZGrid','off', ...  	'ZTick',[]);		b = axes('Parent',a, ...   'Box','off', ...  	'DataAspectRatio',[1 1 1],...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Position',[0.010 0.2125 0.58 0.768], ...	'Tag','dsgn_axe');	axis off;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% edit related uicontrols%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%h_beta = uicontrol('Parent',a, ...  	'Units','normalized', ...  	'BackgroundColor',bgedit, ...	'Callback','CRDesign(''Change beta'')', ...	'Position',[0.83 0.305 0.137993 0.052506], ...	'String','90', ...  	'Horiz','left', ...	'Style','edit', ...	'Tag','beta_edit', ...  	'UserData',90);  h_Q  = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','CRDesign(''Change time ratio'')', ...	'Position',[0.83 0.701671 0.137993 0.0501193], ...	'String','1.176', ...  	'Horiz','left', ...	'Style','edit', ...	'Tag','Q_edit');  h_alpha = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','CRDesign(''Change time ratio'')', ...	'Position',[0.83 0.761337 0.137993 0.0477327], ...	'String','10', ...  	'Horiz','left', ...	'Style','edit', ...	'Tag','alpha_edit', ...	'UserData',10);  h_theta = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','CRDesign(''Change theta'')', ...	'Position',[0.83 0.91 0.137993 0.0477327], ...	'String','80', ...  	'Horiz','left', ...	'Style','edit', ...	'Tag','theta_edit', ...  	'UserData',80);  h_R(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','CRDesign(''Change R value'')', ...	'Position',[0.83 0.565632 0.137993 0.0477327], ...	'String','1', ...  	'Horiz','left', ...	'Style','edit', ...	'Tag','R_edit(1)', ...  	'UserData',1);  h_R(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','CRDesign(''Change R value'')', ...	'Position',[0.83 0.51074 0.137993 0.0477327], ...	'String','0.33163', ...  	'Horiz','left', ...	'Style','edit', ...	'Tag','R_edit(2)', ...	'UserData',0.331628);  h_R(3) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','CRDesign(''Change R value'')', ...	'Position',[0.83 0.455847 0.137993 0.0501193], ...	'String','1.0157', ...   'Horiz','left', ...	'Style','edit', ...	'Tag','R_edit(3)', ...	'UserData',1.01567);h_R(4) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','CRDesign(''Change R value'')', ...	'Position',[0.83 0.398568 0.137993 0.0501193], ...	'String','0.53209', ...  	'Horiz','left', ...	'Style','edit', ...	'Tag','R_edit(4)', ...	'UserData',0.532089);  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% radio button controls%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%h_Tradio(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''T_radio'',1)', ...	'Position',[0.629032 0.75895 0.19375 0.052506], ...	'String','Alpha angle', ...  	'Horiz','left', ...	'Style','radiobutton', ...	'Tag','alpha_radio', ...	'UserData',1, ...	'Value',1);  h_Tradio(2)  = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''T_radio'',2)', ...	'Position',[0.629032 0.699284 0.182796 0.0548926], ...	'String','Q value', ...  	'Horiz','left', ...	'Style','radiobutton', ...	'Tag','Q_radio');  h_Rradio(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''R_radio'',1)', ...	'Position',[0.629032 0.558473 0.182796 0.052506], ...	'String','base', ...  	'Horiz','left', ...	'Style','radiobutton', ...	'Tag','R1_radio', ...	'UserData',[1 0.331628 1.01567 0.532089], ...  	'Value',1);  h_Rradio(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''R_radio'',2)', ...	'Position',[0.629032 0.505967 0.182796 0.052506], ...	'String','crank', ...  	'Horiz','left', ...	'Style','radiobutton', ...	'Tag','R2_radio', ...  	'UserData',1);  h_Rradio(3) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''R_radio'',3)', ...	'Position',[0.629032 0.455847 0.182796 0.052506], ...	'String','coupler', ...  	'Horiz','left', ...	'Style','radiobutton', ...	'Tag','R3_radio');  h_Rradio(4)  = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''R_radio'',4)', ...	'Position',[0.629032 0.398568 0.182796 0.052506], ...	'String','rocker', ... 	'Horiz','left', ...	'Style','radiobutton', ...	'Tag','R4_radio');  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% push button controls%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''Analysis'')', ...	'Position',[0.6145 0.1325 0.1229 0.0625], ...	'String','Analysis');  b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''Help'')', ...	'Position',[0.7375 0.1325 0.1208 0.0625], ...	'String','Info');    b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''Close'')', ...	'Position',[0.8604 0.1325 0.1208 0.0625], ...	'String','Close');   b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''Beta Optimization'')', ...	'Position',[0.6145 0.22 0.1808 0.0625], ...	'String','Optimization');    b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','CRDesign(''Show Definitions'')', ...	'Position',[0.797 0.22 0.1808 0.0625], ...	'String','Definitions');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% text controls%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.621864 0.3125 0.148746 0.0429594], ...	'String','Beta angle', ...  	'Horiz','left', ...	'Style','text', ...	'Tag','StaticText1');  h_status = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'HorizontalAlignment','left', ...	'Position',[0.0412186 0.0381862 0.908602 0.0477327], ...	'String',' ', ...  	'Horiz','left', ...	'Style','text', ...	'Tag','status_txt');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.625448 0.909308 0.182796 0.0429594], ...	'String','Theta angle', ...  	'Horiz','left', ...	'Style','text', ...	'Tag','StaticText1');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.704301 0.613365 0.150538 0.0405728], ...	'String','Link length', ...	'Style','text', ...	'Tag','StaticText2');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.718638 0.818616 0.148746 0.0429594], ...	'String','Time Ratio', ...	'Style','text', ...	'Tag','StaticText2');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.015 0.145 0.25 0.04], ...  	'String','Transmission Angle', ...  	'HorizontalAlignment','left',...	'Style','text', ...	'Tag','StaticText3');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.40 0.145 0.06 0.04], ...	'String','Max', ...	'Style','text', ...	'Tag','StaticText4');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.46 0.145 0.10 0.04], ...	'String','123.45', ...	'Style','text', ...	'Tag','MaxTMAngle');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.25 0.145 0.05 0.04], ...	'String','Min', ...	'Style','text', ...	'Tag','StaticText4');  b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.3 0.145 0.10 0.04], ...	'String','123.45', ...	'Style','text', ...  	'Tag','MinTMAngle');hdls1 = [h_theta h_alpha h_beta h_Rradio h_R h_Tradio h_Q h_status];set(a,'userdata',hdls1);   % Set up vectors to be drawnjoint1=line('xdata', [],'ydata', [], 'marker', 'o','markersize',6,'color', 'r');joint2=line('xdata', [], 'ydata', [], 'marker','o','markersize',6,'color','r');joint12=line('xdata', [],'ydata', [], 'marker', 'o','markersize',6,'color', 'k');joint22=line('xdata', [], 'ydata', [], 'marker','o','markersize',6,'color','k');joint13=line('xdata', [],'ydata', [], 'marker', 'o','markersize',6,'color', 'k');joint23=line('xdata', [], 'ydata', [], 'marker','o','markersize',6,'color','k');crank=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'r');coupler=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'r');rocker=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'r');crank2=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'k');coupler2=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'k');rocker2=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'k');crank3=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'k');coupler3=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'k');rocker3=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'k');line1=line('xdata', [],'ydata', [], 'linestyle', '-','markersize', ...     8, 'color', 'b','linewidth',1);line2=line('xdata', [],'ydata', [], 'linestyle', '-','markersize', ...     8,'color', 'k','linewidth',1);line3=line('xdata', [],'ydata', [], 'linestyle', '-','markersize', ...     8, 'color', 'k','linewidth',1);bush1=line('xdata',[],'ydata',[], 'color', 'r');bush2=line('xdata',[],'ydata',[], 'color', 'r');pin1=line('xdata',[],'ydata',[], 'color', 'r');pin2=line('xdata',[],'ydata',[], 'color', 'r');arc1=line('xdata',[],'ydata',[],'linestyle','-','markersize',...     6, 'color','b','userdata',[]);arc2=line('xdata',[],'ydata',[],'linestyle','-', 'markersize',...     6,'color','b');  h_arrow = line('xdata',[],'ydata',[],'linewidth',2,'clipping','off','color', 'g');   hdls = [	h_arrow arc1 arc2 bush1 bush2 pin1 pin2 ...         joint1 joint2 joint12 joint22 joint13 ...         joint23 crank rocker coupler crank2 ...         rocker2 coupler2 crank3 rocker3 coupler3 ...         line1 line2 line3];a = findobj('Tag','dsgn_axe');set(a,'userdata',hdls );	hdls = zeros(5,1);set(arc1,'userdata',hdls);
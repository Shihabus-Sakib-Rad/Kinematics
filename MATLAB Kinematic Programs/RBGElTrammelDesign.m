 function []=RBGElTrammelDesign(Action, Argument2)% MATLAB file for design of an elliptic trammel linkage for rigid-body % guidance.%Some of the important variables used are:%ax1     = x coordinate of coupler coordinate system in position 1%ay1     = y coordinate of coupler coordinate system in position 1%ax2     = x coordinate of coupler coordinate system in position 2%ay2     = y coordinate of coupler coordinate system in position 2%ax3     = x coordinate of coupler coordinate system in position 3%ay3     = y coordinate of coupler coordinate system in position 3%theta1  = angle from frame x axis to coupler x axis in position 1 (degrees)%theta2  = angle from frame x axis to coupler x axis in position 2 (degrees)%theta3  = angle from frame x axis to coupler x axis in position 3 (degrees)%acx(i)  = x coordinate of circle point relative to fixed system for position i%acy(i)  = y coordinate of circle point relative to fixed system for position i%p12     = coordinates of pole between positions 1 and 2%p13     = coordinates of pole between positions 1 and 3%p23     = coordinates of pole between positions 2 and 3%p23prime= coordinates of image pole corresponding to p23% This program uses the following m.files.  These must be located in the same % directory or the path to the routines must be clearly defined:%	prrpc.m - Routine to analyze slider crank linkage when the crank is driving.%	circle.m - Routine to determine the coordinates of a circle%	rectangle.m - Routine to determine the coordinates of a rectangle%	frameline.m - Routine to determine the coordinates of a frame line%	sliderpoint.m - Routine for finding slider point given a point %                   near the circle of sliders.%	ipole.m - Routine to find image pole given displacement poles%	pole.m - Routine to find displacement polesglobal g_AnaRes if nargin == 0 && isempty(findobj('Tag','rbg_el_trammel_dsgn'))% RBElTrammelDesign is being initialized	Action = 'initialize';   elseif nargin == 0 && ~isempty(findobj('Tag','rbg_el_trammel_dsgn'))	  % RBGElTrammelDesign is already open   Action = 'None';endif ~strcmp(Action,'initialize')&& ~strcmp(Action,'Help')   % retrieve the previous data from the userdata of some objects   a = findobj('Tag','rbg_el_trammel_dsgn');   UD=a.UserData;   handles = UD.hand;        h_fx(1) = handles(1);   h_fy(1) = handles(2);   fx(1) = get(h_fx(1),'userdata');   fy(1) = get(h_fy(1),'userdata');   h_fx(2) = handles(3);   h_fy(2) = handles(4);   fx(2) = get(h_fx(2),'userdata');   fy(2) = get(h_fy(2),'userdata');   h_sld1x = handles(5);   h_sld1y = handles(6);      h_sld2x = handles(7);   h_sld2y = handles(8);   % sldx and sldy are the x and y coordinates in the coupler coordinate system% the editable variable are actually fx2 and fy2      h_posx = handles(9:11);   h_posy = handles(12:14);   h_theta = handles(15:17);   for n = 1:3      ax(n) = get(h_posx(n),'userdata');      ay(n) = get(h_posy(n),'userdata');      theta(n) = get(h_theta(n),'userdata');   end      ax1 = ax(1);   ay1 = ay(1);   theta1 = theta(1);   ax2 = ax(2);   ay2 = ay(2);   theta2 = theta(2);   ax3 = ax(3);   ay3 = ay(3);   theta3 = theta(3);      h_r1txt =  handles(18);   h_r2txt =  handles(19);   h_r3txt =  handles(18);   h_status = handles(20);      b = findobj('Tag','rbg_el_trammel_axes');   handles = get(b,'userdata');   position1 = handles(1);   position2 = handles(2);   position3 = handles(3);   a1 = handles(4);   a2 = handles(5);   a3 = handles(6);   pole12 = handles(7);   pole13 = handles(8);   pole23 = handles(9);   ipole23 = handles(10);   scircle = handles(11);   joint(1) = handles(12);   joint(2) = handles(13);   sliderline(1) = handles(14);   sliderline(2) = handles(15);   coupler1 = handles(16);   coupler2 = handles(17);   coupler3 = handles(18);   block(1) = handles(19);   block(2) = handles(20);end  switch Action   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	Initialize the User Interface%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case  'initialize'   if nargin >= 2 || ~isempty(findobj('tag','menu_page'))   	nCheckCenter1 = 1;   	LocalOpenFig;   	RBGElTrammelDesign('Draw Axes');   else   	show_me_logo('initialize','RBGElTrammelDesign');   end   case 'Draw Axes'   % Identify vectors giving the three components of a and b on the coupler.   drawfact=20;   height=0.8;   width=0.8;      d1x=cos(theta1*pi/180);	d1y=sin(theta1*pi/180);	d2x=cos(theta2*pi/180);	d2y=sin(theta2*pi/180);	d3x=cos(theta3*pi/180);	d3y=sin(theta3*pi/180);	cross1=abs(d1x*d2y-d1y*d2x);	cross2=abs(d1x*d3y-d1y*d3x);	cross3=abs(d2x*d3y-d2y*d3x);	if abs(cross1)<10^(-8) || abs(cross2)<10^(-8) || abs(cross3)<10^(-8)      set(h_status,'string', ...         ' Two or more positions approximately parallel, reinput positions');      return   end   % Identify vectors giving the three components of a and b on the coupler.   fact=pi/180;   theta1r=theta1*fact;   theta2r=theta2*fact;   theta3r=theta3*fact;   ax=[ax1 ax2 ax3];   ay=[ay1 ay2 ay3];   bx=[ax1+cos(theta1r) ax2+cos(theta2r) ax3+cos(theta3r)];   by=[ay1+sin(theta1r) ay2+sin(theta2r) ay3+sin(theta3r)];   drawlim1=max([max(ax); max(ay); max(bx); max(by)]);   drawlim2=min([max(ax); min(ay); min(bx); min(by)]);   drawlim=drawfact*max([abs(drawlim1); abs(drawlim2)]);% Identify poles using pole.m function.   p12=pole([ax(1);ay(1)],[ax(2);ay(2)],[bx(1);by(1)],[bx(2);by(2)]);	   p13=pole([ax(1);ay(1)],[ax(3);ay(3)],[bx(1);by(1)],[bx(3);by(3)]);   p23=pole([ax(2);ay(2)],[ax(3);ay(3)],[bx(2);by(2)],[bx(3);by(3)]);   pflag12=p12(3);   pflag13=p13(3);   pflag23=p23(3);   pflagtot=pflag12+pflag13+pflag23;% Identify the image pole p'23   p23prime=ipole(p12,p13,p23);% Find the circle of sliders relative to the coupler if the poles are finite.   if pflagtot==0;   	center=pole([p12(1);p12(2)],[p13(1);p13(2)],[p13(1);p13(2)],...              [p23prime(1);p23prime(2)]);   	x0=center(1);   	y0=center(2);   	dflag=center(3);   	rc=sqrt((p12(1)-x0)^2+(p12(2)-y0)^2);% Draw the circle relative to the frame when the poles are all finite.   	dalpha=2*pi/30;   	for j=1:1:31   		sx(j)=ax1;   		sy(j)=ay1;   		alpha=(j-1)*dalpha;   		if dflag==0   			sx(j)=x0+rc*cos(alpha);   			sy(j)=y0+rc*sin(alpha);   		end   	end   end% Draw straight line relative to the frame a pole lies at infinity   if pflagtot>0   	rc=10^10;   	dflag=1;   	stline=cosline(p12,p13,p23,p23prime);   	for j=1:1:31   		sx(j)=stline(j,1);   		sy(j)=stline(j,2);   	end   	cirangle=pi/2+atan2((sy(31)-sy(1)), (sx(31)-sx(1)));   	x0=sx(15)+rc*cos(cirangle);   	y0=sy(15)+rc*sin(cirangle);   end% Draw straight line relative to the frame if pole lies at infinity   if pflagtot>0   	stline=cosline(p12,p13,p23,p23prime);   	for j=1:1:31   		sx(j)=stline(j,1);   		sy(j)=stline(j,2);   	end   end% If a pole is far from the positions, do not draw it   p12x=p12(1);   if abs(p12x) > drawlim; p12x=ax; end   p12y=p12(2);   if abs(p12y) > drawlim; p12y=ay; end   p13x=p13(1);   if abs(p13x) > drawlim; p13x=ax; end   p13y=p13(2);   if abs(p13y) > drawlim; p13y=ay; end   p23x=p23(1);   if abs(p23x) > drawlim; p23x=ax; end   p23y=p23(2);   if abs(p23y) > drawlim; p23y=ay; end% Find axis limits   cx=[ax, bx, p12x, p13x, p23x, sx];   cy=[ay, by, p12y, p13y, p23y, sy];   rangex=max(cx)-min(cx);   rangey=max(cy)-min(cy);   xmin=min(cx)-0.2*rangex;   xmax=max(cx)+0.2*rangex;   ymin=min(cy)-0.2*rangey;   ymax=max(cy)+0.2*rangey;   values=axisadjust(xmin, xmax, ymin, ymax, width, height);   xmin=values(1);   xmax=values(2);   ymin=values(3);   ymax=values(4);%   axis equal   axis([xmin xmax ymin ymax]);% Plot the positions% To scale the length of the position line base on the axis size% make it one tenth of the axis x length.   f = (xmax-xmin)/10;   bx=[ax1+f*cos(theta1r) ax2+f*cos(theta2r) ax3+f*cos(theta3r)];   by=[ay1+f*sin(theta1r) ay2+f*sin(theta2r) ay3+f*sin(theta3r)];   set(position1, 'xdata', [ax(1) bx(1)], 'ydata', [ay(1) by(1)]);   set(position2, 'xdata', [ax(2) bx(2)], 'ydata', [ay(2) by(2)]);   set(position3, 'xdata', [ax(3) bx(3)], 'ydata', [ay(3) by(3)]);   set(a1, 'xdata',ax(1), 'ydata', ay(1));   set(a2, 'xdata',ax(2), 'ydata', ay(2));   set(a3, 'xdata',ax(3), 'ydata', ay(3));      a = findobj('tag','rbg_el_trammel_dsgn');   UD=a.UserData;   hdls = UD.hand;   lim = [xmin xmax ymin ymax];	set(a,'userdata',struct('hand',hdls,'wlim',lim,'Bx',bx,'By',by));   % Plot the poles   set(pole12, 'xdata',p12(1), 'ydata', p12(2));   set(pole13, 'xdata',p13(1), 'ydata', p13(2));   set(pole23, 'xdata',p23(1), 'ydata', p23(2));   set(ipole23, 'xdata',p23prime(1), 'ydata', p23prime(2));% Plot the slider circle   set(scircle, 'xdata',sx, 'ydata', sy);   scale=sqrt((max(ax)-min(ax))^2+(max(ay)-min(ay))^2);   rpivot=0.02*scale;   delta=2*rpivot;	%=============================================================% Part of program where joints are selected.%=============================================================% The point selected is in the frame coordinate system.  Transform% the point to the coupler coordinate system. % Rectify the point to the slider point circle.  First find the line from % the point chosen to the center of the circle.  Then find the point on the% circle that is on the line.  The center of the circle is at x0, y0, and % the radius of the circle is rc.  	st1=sin(theta1r);	ct1=cos(theta1r);	flag=1;	for n = 1:2		angle=atan2(fy(n)-y0, fx(n)-x0);		xn=x0+rc*cos(angle);		yn=y0+rc*sin(angle);% The point selected is in the frame coordinate system.  Transform% the point to the coupler coordinate system. 				% Compute the three positions of the slider point and slider line coordinates		Xn1= (xn-ax1)*ct1+(yn-ay1)*st1;		Yn1= -(xn-ax1)*st1+(yn-ay1)*ct1;					% Determine coordinates of the slider point for three positions		Values=sliderpoint(ax1,ay1,theta1,ax2,ay2,theta2, ax3,ay3,...			 theta3,Xn1,Yn1);		for ii=1:1:3			asx(ii)=Values(2*ii-1);			asy(ii)=Values(2*ii);		end		% Determine the coordinates of the slider line		lineangle(n)=Values(7)*fact;		length=Values(8);		if length < 3*delta; length=3*delta; end		ndash=20;		csang=cos(lineangle(n));		ssang=sin(lineangle(n));		xe = asx(1)-0.5*length*csang;		ye = asy(1)-0.5*length*ssang;		lineangled(n)=Values(7);		coord=frameline(2*length,xe,ye,ndash,lineangled(n),flag);		npoints=3*ndash;% Offset slider line by half the height of the slider block.		for i=1:1:npoints			xsl(i)=coord(i,1)+delta*ssang;			ysl(i)=coord(i,2)-delta*csang;		end							set(sliderline(n), 'xdata', xsl, 'ydata', ysl);% draw the first slider block		xpin(n)=asx(1);		ypin(n)=asy(1);		coords = rect(4*delta,2*delta,xpin(n),ypin(n),lineangled(n),0);		for j=1:1:5			xblock(j)=coords(j,1);			yblock(j)=coords(j,2);		end		set(block(n),'xdata', xblock, 'ydata',yblock);		set(joint(n),'xdata', xpin(n), 'ydata',ypin(n));		end% Draw the coupler	set(coupler1,'xdata', [xpin(1), xpin(2)], 'ydata',[ypin(1), ypin(2)]);	% **********************************************************************% Elliptic Trammel linkage designed.  Proceed with analysis% **********************************************************************% Define angles and distances to the original coupler line.	temp=atan2((ay(1)-ypin(1)), (ax(1)-xpin(1)));	phi=atan2((ypin(2)-ypin(1)), (xpin(2)-xpin(1)));	beta1=temp-phi;	temp=atan2((by(1)-ypin(1)), (bx(1)-xpin(1)));	beta2=temp-phi;	rc2=sqrt((by(1)-ypin(1))^2+ (bx(1)-xpin(1))^2);	rc1=sqrt((ay(1)-ypin(1))^2+ (ax(1)-xpin(1))^2);% Define link lengths and offset distance (r4)	r3=sqrt((ypin(2)-ypin(1))^2+(xpin(2)-xpin(1))^2);   % display the link lengths on the screen   set(h_r1txt,'string',num2str(r3));   set(h_r2txt,'string',num2str(lineangled(1)));   set(h_r3txt,'string',num2str(lineangled(2)));   % Update the data on the screen and the userdata       set(h_fx(1),'string',num2str(fx(1)),'userdata',fx(1));   set(h_fy(1),'string',num2str(fy(1)),'userdata',fy(1));   set(h_fx(2),'string',num2str(fx(2)),'userdata',fx(2));   set(h_fy(2),'string',num2str(fy(2)),'userdata',fy(2));      set(h_sld1x,'string',num2str(xpin(1)));   set(h_sld1y,'string',num2str(ypin(1)));   set(h_sld2x,'string',num2str(xpin(2)));   set(h_sld2y,'string',num2str(ypin(2)));      % Set argument2 = 1 in 'Set Calls' and 'Move' for moving the slider 1 around% Set argument2 = 2 in 'Set Calls' and 'Move' for moving the slider 2 around   set([joint(1) block(1)],...     'buttondownfcn','RBGElTrammelDesign(''Set Calls'',1);RBGElTrammelDesign(''Move'',1)');   set([joint(2) block(2)],...     'buttondownfcn','RBGElTrammelDesign(''Set Calls'',2);RBGElTrammelDesign(''Move'',2)');	set([a1],...	  'buttondownfcn','RBGElTrammelDesign(''Set Calls'',3);RBGElTrammelDesign(''Move Pos'',1)');	set([a2],...	  'buttondownfcn','RBGElTrammelDesign(''Set Calls'',4);RBGElTrammelDesign(''Move Pos'',2)');	set([a3],...	  'buttondownfcn','RBGElTrammelDesign(''Set Calls'',5);RBGElTrammelDesign(''Move Pos'',3)');	set([position1],...	  'buttondownfcn','RBGElTrammelDesign(''Set Calls'',6);RBGElTrammelDesign(''Move Ang'',1)');	set([position2],...	  'buttondownfcn','RBGElTrammelDesign(''Set Calls'',7);RBGElTrammelDesign(''Move Ang'',2)');	set([position3],...	  'buttondownfcn','RBGElTrammelDesign(''Set Calls'',8);RBGElTrammelDesign(''Move Ang'',3)');case 'Set Calls' % get the handle of the objects used to control% the mouse input    a = findobj('Tag','rbg_el_trammel_dsgn');   % Assign different function calls to windowbuttonmotionfcn when users try to move different points      if Argument2 == 1      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_el_trammel_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBGElTrammelDesign(''Move'',1)');   elseif  Argument2 == 2      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_el_trammel_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBGElTrammelDesign(''Move'',2)');   elseif  Argument2 == 3      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_el_trammel_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBGElTrammelDesign(''Move Pos'',1)');   elseif  Argument2 == 4      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_el_trammel_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBGElTrammelDesign(''Move Pos'',2)');   elseif  Argument2 == 5      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_el_trammel_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBGElTrammelDesign(''Move Pos'',3)');   elseif  Argument2 == 6      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_el_trammel_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBGElTrammelDesign(''Move Ang'',1)');   elseif  Argument2 == 7      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_el_trammel_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBGElTrammelDesign(''Move Ang'',2)');   elseif  Argument2 == 8      set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''rbg_el_trammel_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');      set(a,'windowbuttonmotionfcn','RBGElTrammelDesign(''Move Ang'',3)');   end   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The Callbacks When The User Moves the Mouse Button.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'Move'% Find out where the mouse pointer is located.%  a = findobj('Tag','rbg_el_trammel_dsgn');   set(h_status,'string','');   a = findobj('Tag','rbg_el_trammel_dsgn');   UD=a.UserData;   bx = UD.Bx;   by = UD.By;      b = findobj('Tag','rbg_el_trammel_axes');   hdls = get(b,'userdata');   fact=pi/180;   theta1r=theta1*fact;   theta2r=theta2*fact;   theta3r=theta3*fact;   ax=[ax1 ax2 ax3];   ay=[ay1 ay2 ay3];   bx=[ax1+cos(theta1r) ax2+cos(theta2r) ax3+cos(theta3r)];   by=[ay1+sin(theta1r) ay2+sin(theta2r) ay3+sin(theta3r)];   scale=sqrt((max(ax)-min(ax))^2+(max(ay)-min(ay))^2);   rpivot=0.02*scale;   delta=2*rpivot;	   % Identify poles using pole.m function.   p12=pole([ax(1);ay(1)],[ax(2);ay(2)],[bx(1);by(1)],[bx(2);by(2)]);	   p13=pole([ax(1);ay(1)],[ax(3);ay(3)],[bx(1);by(1)],[bx(3);by(3)]);   p23=pole([ax(2);ay(2)],[ax(3);ay(3)],[bx(2);by(2)],[bx(3);by(3)]);   pflag12=p12(3);   pflag13=p13(3);   pflag23=p23(3);   pflagtot=pflag12+pflag13+pflag23;% Identify the image pole p'23   p23prime=ipole(p12,p13,p23);% Find the circle of sliders relative to the coupler if the poles are finite.   if pflagtot==0;   	center=pole([p12(1);p12(2)],[p13(1);p13(2)],[p13(1);p13(2)],...              [p23prime(1);p23prime(2)]);   	x0=center(1);   	y0=center(2);   	dflag=center(3);   	rc=sqrt((p12(1)-x0)^2+(p12(2)-y0)^2);   end   if pflagtot>0   	rc=10^10;   	dflag=1;   	stline=cosline(p12,p13,p23,p23prime);   	for j=1:1:31   		sx(j)=stline(j,1);   		sy(j)=stline(j,2);   	end   	cirangle=pi/2+atan2((sy(31)-sy(1)), (sx(31)-sx(1)));   	x0=sx(15)+rc*cos(cirangle);   	y0=sy(15)+rc*sin(cirangle);   end    	pt = get(b,'currentpoint');   pt = pt(1,1:2);         if Argument2 == 1      fx(1) = pt(1);      fy(1) = pt(2);   end      if Argument2 == 2      fx(2) = pt(1);      fy(2) = pt(2);   end%=============================================================% Part of program where joints are selected.%=============================================================% The point selected is in the frame coordinate system.  Transform% the point to the coupler coordinate system. % Rectify the point to the slider point circle.  First find the line from % the point chosen to the center of the circle.  Then find the point on the% circle that is on the line.  The center of the circle is at x0, y0, and % the radius of the circle is rc.  	st1=sin(theta1r);	ct1=cos(theta1r);	flag=1;	for n = 1:2		angle=atan2(fy(n)-y0, fx(n)-x0);		xn=x0+rc*cos(angle);		yn=y0+rc*sin(angle);% The point selected is in the frame coordinate system.  Transform% the point to the coupler coordinate system. 				% Compute the three positions of the slider point and slider line coordinates		Xn1= (xn-ax1)*ct1+(yn-ay1)*st1;		Yn1= -(xn-ax1)*st1+(yn-ay1)*ct1;					% Determine coordinates of the slider point for three positions		Values=sliderpoint(ax1,ay1,theta1,ax2,ay2,theta2, ax3,ay3,...			 theta3,Xn1,Yn1);		for ii=1:1:3			asx(ii)=Values(2*ii-1);			asy(ii)=Values(2*ii);		end		% Determine the coordinates of the slider line		lineangle(n)=Values(7)*fact;		length=Values(8);		if length < 3*delta; length=3*delta; end		ndash=20;		csang=cos(lineangle(n));		ssang=sin(lineangle(n));		xe = asx(1)-0.5*length*csang;		ye = asy(1)-0.5*length*ssang;		lineangled(n)=Values(7);		coord=frameline(2*length,xe,ye,ndash,lineangled(n),flag);		npoints=3*ndash;% Offset slider line by half the height of the slider block.		for i=1:1:npoints			xsl(i)=coord(i,1)+delta*ssang;			ysl(i)=coord(i,2)-delta*csang;		end							set(sliderline(n), 'xdata', xsl, 'ydata', ysl);% draw the first slider block		xpin(n)=asx(1);		ypin(n)=asy(1);		coords = rect(4*delta,2*delta,xpin(n),ypin(n),lineangled(n),0);		for j=1:1:5			xblock(j)=coords(j,1);			yblock(j)=coords(j,2);		end		set(block(n),'xdata', xblock, 'ydata',yblock);		set(joint(n),'xdata', xpin(n), 'ydata',ypin(n));		end% Draw the coupler	set(coupler1,'xdata', [xpin(1), xpin(2)], 'ydata',[ypin(1), ypin(2)]);	% **********************************************************************% Elliptic Trammel linkage designed.  Proceed with analysis% **********************************************************************% Define angles and distances to the original coupler line.	temp=atan2((ay(1)-ypin(1)), (ax(1)-xpin(1)));	phi=atan2((ypin(2)-ypin(1)), (xpin(2)-xpin(1)));	beta1=temp-phi;	temp=atan2((by(1)-ypin(1)), (bx(1)-xpin(1)));	beta2=temp-phi;	rc2=sqrt((by(1)-ypin(1))^2+ (bx(1)-xpin(1))^2);	rc1=sqrt((ay(1)-ypin(1))^2+ (ax(1)-xpin(1))^2);% Define link lengths and offset distance (r4)	r3=sqrt((ypin(2)-ypin(1))^2+(xpin(2)-xpin(1))^2);   % display the link lengths on the screen   set(h_r1txt,'string',num2str(r3));   set(h_r2txt,'string',num2str(lineangled(1)));   set(h_r3txt,'string',num2str(lineangled(2)));   % Update the data on the screen and the userdata       set(h_fx(1),'string',num2str(fx(1)),'userdata',fx(1));   set(h_fy(1),'string',num2str(fy(1)),'userdata',fy(1));   set(h_fx(2),'string',num2str(fx(2)),'userdata',fx(2));   set(h_fy(2),'string',num2str(fy(2)),'userdata',fy(2));      set(h_sld1x,'string',num2str(xpin(1)));   set(h_sld1y,'string',num2str(ypin(1)));   set(h_sld2x,'string',num2str(xpin(2)));   set(h_sld2y,'string',num2str(ypin(2)));         %flush the draw buffer   drawnow;       case 'Move Pos'   nCheckCenter1 = 1;   a = findobj('Tag','rbg_el_trammel_dsgn');   UD=a.UserData;   axislimit = UD.wlim;      b = findobj('Tag','rbg_el_trammel_axes');   pt = get(b,'currentpoint');   pt = pt(1,1:2);   n = Argument2;   ax(n)=pt(1);   ay(n)=pt(2);   set(h_posx(n),'UserData',ax(n),'string',num2str(ax(n)));   set(h_posy(n),'UserData',ay(n),'string',num2str(ay(n)));         RBGElTrammelDesign('Draw Axes');    set(a,'userdata',UD);   axis(axislimit);case 'Move Ang'   nCheckCenter1 = 1;   a = findobj('Tag','rbg_el_trammel_dsgn');   UD=a.UserData;   axislimit = UD.wlim;      b = findobj('Tag','rbg_el_trammel_axes'); 	pt = get(b,'currentpoint');   pt = pt(1,1:2);   n = Argument2;   a1=pt(1);   a2=pt(2);   ang = atan2(pt(2)-ay(n),pt(1)-ax(n))*180/pi;   set(h_theta(n),'UserData',ang,'string',num2str(ang));         RBGElTrammelDesign('Draw Axes');    set(a,'userdata',UD);   axis(axislimit);   case 'Change Pos'% Update a set of three values posx, posy and theta every time   n = Argument2;   newvalx=get(h_posx(n),'string');   newvaly=get(h_posy(n),'string');   newval=get(h_theta(n),'string');   ax(n)=check_val(ax(n),newvalx);   ay(n)=check_val(ax(n),newvaly);   theta(n)=check_val(theta(n),newval);   set(h_posx(n),'UserData',ax(n),'string',num2str(ax(n)));   set(h_posy(n),'UserData',ay(n),'string',num2str(ay(n)));   set(h_theta(n),'UserData',theta(n),'string',num2str(theta(n)));      RBGElTrammelDesign('Draw Axes'); case 'Change Slider'% Change the center point using the keyboard input	n = Argument2;   newvalx = get(h_fx(n),'string');   newvaly = get(h_fy(n),'string');   fx = check_val(fx(n),newvalx);   fy = check_val(fy(n),newvaly);   set(h_fx(n),'userdata',fx,'string',num2str(fx));   set(h_fy(n),'userdata',fy,'string',num2str(fy));   RBGElTrammelDesign('Draw Axes');    case 'Resize'   n = Argument2;% To retrieve current axis limits      a = findobj('Tag','rbg_el_trammel_dsgn');   UD=a.UserData;% If 'Zoom out' button is pressed, downsize the figure by increasing x any y axis limits% If 'Zoom In' button is pressed, enlarge the figure by decreasing x any y axis limits   if n ==1      factor = 1.05;   else      factor = 0.95;   end      UD.wlim=factor*UD.wlim;   a.UserData=UD;   axis(UD.wlim);   case 'None'      % the following command will bring the existing figure % to foreground   a = findobj('Tag','rbg_el_trammel_dsgn');   figure(a);   case 'Close'   % if the target window exist then close it   if ~isempty(findobj('Tag','RBG Elliptic Trammel Analysis Window'))      rbg_el_trammel_ana('Stop');      a = findobj('Tag','RBG Elliptic Trammel Analysis Window');        	close(a);   end      a = findobj('Tag','rbg_el_trammel_dsgn');   close(a);   case 'Analysis'   a = findobj('Tag','rbg_el_trammel_dsgn');   UD=a.UserData;   bx = UD.Bx;   by = UD.By;   %======================================================================================================   fact=pi/180;   theta1r=theta1*fact;   theta2r=theta2*fact;   theta3r=theta3*fact;   ax=[ax1 ax2 ax3];   ay=[ay1 ay2 ay3];   bx=[ax1+cos(theta1r) ax2+cos(theta2r) ax3+cos(theta3r)];   by=[ay1+sin(theta1r) ay2+sin(theta2r) ay3+sin(theta3r)];      %======================================================================================================        rbg_el_trammel_ana('initialize',fx,fy,ax,ay,bx,by,theta);case 'Show Definitions'   Show_definition('initialize','RBGElTrammelDesign.jpg');   case 'Help'%-------On-line help     HelpStr={'Elliptic Trammel Design for the Rigid Body Guidance';    '';    '    "RBGElTrammelDesign" is  a program  to design of elliptic trammel';    'linkages by the two slider points and three coupler  positions.   The';    'program contains two windows: a design window and an analysis window.';    'The nomenclature used by the  program is  that given in the textbook,';    'Kinematics, Dynamics, and Design of Mechanisms by Kenneth Waldron and';    'Gary Kinzel.';    '';    '    In the design window, users can  specify two slider positions and';    'three  coupler positions either by  keyboard input or the mouse input';    'Users can even drag  mouse to change the angles of coupler positions.';    'The convenience of the mouse  usage  is one of  the important of this';    'program, which creating a fairly frendly user interface. In addition,';    'to verify the coupler position and its associated data, three colors,';    'red, green and blue, are utilized. Moreover, "Zoom Out" and "Zoom In"';       'buttons are available to scale the graphs. ';    '';    '    In the analysis  window, the animation  of two assembly modes are';    'provided.   Furthermore, the animation  speed can be easily  adjusted';    'by clicking on the speed buttons.';    '';    '    Two buttons connect the two windows.   The "Return" button in the';    'analysis window closes the analysis window and brings back the design';    'window, while the "Analysis"  button in  the  design  window open the';    'analysis  window  and  start the  linkage  animation  and  associated';    'shaking force animation.  Every time the "Analysis"button is pressed,';    'all of the design parameters are updated to start a new animation. ';    ' '};   helpwin(HelpStr,'Elliptic Trammel Design for the Rigid Body Guidance');case 'Get File'% Get the file name using the UIGETFILE   [sFileName sFilePath] = uigetfile('*.dat','Load File');     if sFileName == 0 && sFilePath == 0      return;   end      % Combine the path and file name together   sTemp = strcat( sFilePath, sFileName );% get the size to erase the '.dat' extension      sz  = size(sFileName);% load the data file     load(sTemp);% assign the parameter to a variable   Parameter = eval(sFileName(1:(sz(2)-4)));   if max(size(Parameter)) == 9      ax = Parameter(1:3);      ay = Parameter(4:6);      theta = Parameter(7:9);   else      set(h_status,'string','invalid file format');        return;   end   for n = 1:3      set(h_posx(n),'UserData',ax(n),'string',num2str(ax(n)));      set(h_posy(n),'UserData',ay(n),'string',num2str(ay(n)));      set(h_theta(n),'UserData',theta(n),'string',num2str(theta(n)));   end      RBGElTrammelDesign('Draw Axes');   refresh;   case 'Put File'   [sFileName sFilePath] = uiputfile('*.dat','Save As');	ParameterData = [ax1;ax2;ax3;ay1;ay2;ay3;theta1;theta2;theta3];%sTemp = strcat( sFilePath, sFileName);   [sTemp , errMsg] = sprintf('%s%s', sFilePath, sFileName);   [strCmd, errMsg] = sprintf('%s %s %s', 'save', sTemp, ' -ascii ParameterData');   eval(strCmd);   end   function LocalOpenFig()hdls = zeros(1,20);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Control the color of the UI%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%StdColor = get(0,'DefaultUIcontrolBackgroundColor');%PointsPerPixel = 72/get(0,'ScreenPixelsPerInch');bgframe = StdColor;bgedit = [1 1 1];bgtext = bgframe;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The Main Figure of Crank Rocker Design%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ScreenSize = get(0,'ScreenSize');sx = 480*2;sy = 400*2;FigPos = [ 10 ScreenSize(4)-sy-95 sx sy ] ;a = figure('Units','pixels', ...	'Color',[0.8 0.8 0.8], ...	'Name','Elliptic Trammel Design for Rigid-Body Guidance', ...	'NumberTitle','off', ...   'Position',FigPos, ...  	'Tag','rbg_el_trammel_dsgn');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Draw Frame First% This will prevent the frames from been drawn on top of% other UICONTROLS. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.00625 0.01 0.9833 0.1025], ...	'Style','frame'	, ...  	'Tag','Frame1');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.8175 0.3896 0.17], ...	'Style','frame', ...	'Tag','Frame_link');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.00625 0.12 0.58125 0.08], ...	'Style','frame', ...	'Tag','Frame_angle');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.12 0.3896 0.08], ...	'Style','frame', ...	'Tag','Frame_pushbutton');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.6525 0.3896 0.1575], ...	'Style','frame', ...  	'Tag','Frame6');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.49 0.3896 0.1575], ...	'Style','frame', ...  	'Tag','Frame6');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.2125 0.3896 0.2725], ...	'Style','frame', ...	'Tag','Frame_assemode');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% menu uicontrols%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uimenu('Parent',a, ...	'Label','Parameter', ...	'Tag','menu_parameter');  c = uimenu('Parent',b, ...	'Callback','RBGElTrammelDesign(''Get File'')', ...	'Label','Load Parameters', ...	'Tag','submenu_load');   c = uimenu('Parent',b, ...	'Callback','RBGElTrammelDesign(''Put File'')', ...	'Label','Save Parameters', ...	'Tag','submenu_save1');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Create graphics window for design input%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-------Reference axisb = axes('Parent',a, ...  	'Box','on', ...  	'Color',[1 1 1], ...	'Position',[0.00625 0.2125 0.58125 0.77], ...  	'XColor',[0 0 0], ...  	'XGrid','off', ...  	'XTick',[],...  	'YColor',[0 0 0], ...  	'YGrid','off', ...  	'YTick',[], ...  	'ZColor',[0 0 0], ...  	'ZGrid','off', ...  	'ZTick',[]);  b = axes('Parent',a, ...   'Box','off', ...  	'DataAspectRatio',[1 1 1],...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Position',[0.025 0.2 0.56 0.8], ...	'Tag','rbg_el_trammel_axes');%axis off;grid;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% edit related uicontrols%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%h_posx(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[1 0 0], ...	'Callback','RBGElTrammelDesign(''Change Pos'',1)', ...	'Position',[0.6706 0.365 0.105 0.0425], ...	'String','0', ...	'Style','edit', ...	'UserData',0);  h_posx(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 0 1], ...	'Callback','RBGElTrammelDesign(''Change Pos'',2)', ...	'Position',[0.6706 0.2925 0.105 0.0425], ...	'String','3', ...	'Style','edit', ...	'UserData',3);   h_posx(3) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 1 0], ...	'Callback','RBGElTrammelDesign(''Change Pos'',3)', ...	'Position',[0.6706 0.2275 0.105 0.0425], ...	'String','2', ...	'Style','edit', ...	'Tag','R_edit(3)', ...	'UserData',2);   h_posy(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[1 0 0], ...	'Callback','RBGElTrammelDesign(''Change Pos'',1)', ...	'Position',[0.7730 0.365 0.105 0.0425], ...	'String','0', ...	'Style','edit', ...	'UserData',0);   h_posy(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 0 1], ...	'Callback','RBGElTrammelDesign(''Change Pos'',2)', ...	'Position',[0.7730 0.2925 0.105 0.0425], ...	'String','0', ...	'Style','edit', ...	'UserData',0);   h_posy(3) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 1 0], ...	'Callback','RBGElTrammelDesign(''Change Pos'',3)', ...	'Position',[0.7730 0.2275 0.105 0.0425], ...	'String','2', ...	'Style','edit', ...	'UserData',2);   h_theta(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[1 0 0], ...	'Callback','RBGElTrammelDesign(''Change Pos'',1)', ...	'Position',[0.8754 0.365 0.105 0.0425], ...	'String','45', ...	'Style','edit', ...	'UserData',45);   h_theta(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 0 1], ...	'Callback','RBGElTrammelDesign(''Change Pos'',2)', ...	'Position',[0.8754 0.2925 0.105 0.0425], ...	'String','135', ...	'Style','edit', ...	'UserData',135);   h_theta(3) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...   'ForegroundColor',[0 1 0], ...	'Callback','RBGElTrammelDesign(''Change Pos'',3)', ...	'Position',[0.8754 0.2275 0.105 0.0425], ...	'String','0', ...	'Style','edit', ...	'UserData',0);   h_fx1 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBGElTrammelDesign(''Change Slider'',1)', ...	'Position',[0.7730 0.71 0.105 0.0425], ...	'String','3', ...	'Style','edit', ...	'UserData',3);   h_fy1 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBGElTrammelDesign(''Change Slider'',1)', ...	'Position',[0.8754 0.71 0.105 0.0425], ...	'String','1.09', ...	'Style','edit', ...	'UserData',1.09);   h_fx2 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBGElTrammelDesign(''Change Slider'',2)', ...	'Position',[0.7730 0.5475 0.105 0.0425], ...	'String','0.97', ...	'Style','edit', ...	'UserData',0.97);   h_fy2 = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','RBGElTrammelDesign(''Change Slider'',2)', ...	'Position',[0.8754 0.5475 0.105 0.0425], ...	'String','2.69', ...	'Style','edit', ...	'UserData',2.69);   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% push button controls%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBGElTrammelDesign(''Analysis'')', ...	'Position',[0.6125 0.13 0.11875 0.06], ...	'String','Analysis', ...	'Tag','AnalysisButton');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBGElTrammelDesign(''Close'')', ...	'Position',[0.8583 0.13 0.11875 0.06], ...	'String','Close', ...	'Tag','CloseButon');   b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBGElTrammelDesign(''Help'')', ...	'Position',[0.7354 0.13 0.11875 0.06], ...	'String','Info', ...	'Tag','InfoButton');    b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBGElTrammelDesign(''Resize'',1)', ...   'Position',[0.209 0.1325 0.178 0.055], ...   'userdata',1, ...	'String','Zoom Out');  b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBGElTrammelDesign(''Resize'',2)', ...	'Position',[0.3875 0.1325 0.178 0.055], ...   'String','Zoom In');   b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','RBGElTrammelDesign(''Show Definitions'')', ...	'Position',[0.02917 0.1325 0.178 0.055], ...   'String','Definitions');   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% text controls%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%h_status = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'HorizontalAlignment','left', ...	'Position',[0.05625 0.0275 0.9083 0.0475], ...	'String',' ', ...	'Style','text', ...	'Tag','status_txt');    b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.86458 0.4125 0.124 0.0375], ...	'String','frame angle', ...	'Style','text', ...	'Tag','StaticText1');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61875 0.925 0.1708 0.0425], ...	'String','r3', ...	'Style','text', ...	'Tag','StaticText2');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61875 0.8825 0.1708 0.0425], ...	'String','slider 1 angle', ...	'Style','text', ...	'Tag','StaticText4');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.6208 0.84 0.1708 0.0425], ...	'String','slider 2 angle', ...	'Style','text', ...	'Tag','StaticText2');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.365 0.05208 0.04], ...	'String','pos1', ...	'Style','text', ...	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.2925 0.05208 0.04], ...	'String','pos2', ...	'Style','text', ...	'Tag','StaticText4');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.2275 0.05208 0.04], ...	'String','pos3', ...	'Style','text', ...	'Tag','StaticText4');   h_r1txt = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.8083 0.9325 0.17292 0.04], ...	'String','0.45', ...	'Style','text');   h_r2txt = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.8083 0.8875 0.17292 0.04], ...	'String','2.1592', ...	'Style','text');   h_r3txt = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.8083 0.84 0.17292 0.04], ...	'String','8.9434', ...	'Style','text');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.6083 0.765 0.1313 0.0325], ...	'String','slider 1 point', ...	'Style','text');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.625 0.710 0.14375 0.0325], ...	'String','entered coord.', ...	'Style','text');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.625 0.675 0.14375 0.0325], ...	'String','slider coord.', ...	'Style','text');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.6025 0.1313 0.0325], ...	'String','slider 2 point', ...	'Style','text');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.625 0.5475 0.14375 0.0325], ...	'String','entered coord.', ...	'Style','text');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.625 0.5125 0.14375 0.0325], ...	'String','slider coord.', ...	'Style','text');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61042 0.4425 0.1333 0.0325], ...	'String','coupler point', ...	'Style','text');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.8063 0.765 0.04167 0.03], ...	'String','x', ...	'Style','text');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.9146 0.765 0.02917 0.032], ...	'String','y', ...	'Style','text');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.8063 0.605 0.02708 0.03], ...	'String','x', ...	'Style','text');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.9146 0.605 0.025 0.032], ...	'String','y', ...	'Style','text');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.7146 0.4125 0.02708 0.035], ...	'String','x', ...	'Style','text');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.80417 0.4125 0.02917 0.035], ...	'String','y', ...	'Style','text');h_sld1x = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.7730 0.665 0.105 0.04], ...	'String','1.89', ...	'Style','text');h_sld1y = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.8754 0.665 0.105 0.04], ...	'String','1.92', ...	'Style','text');h_sld2x = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.773 0.5025 0.105 0.04], ...	'String','1.57', ...	'Style','text');   h_sld2y = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.8754 0.5025 0.105 0.04], ...	'String','1.60', ...	'Style','text');   drawnow; hdls=[h_fx1 h_fy1 h_fx2 h_fy2 h_sld1x h_sld1y ...      h_sld2x h_sld2y h_posx h_posy h_theta ...	   h_r1txt h_r2txt h_r3txt h_status];a = findobj('Tag','rbg_el_trammel_dsgn');set(a,'userdata',struct('hand',hdls));	     % Set up the vectors needed to draw the linkageposition1=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'r');position2=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'b');position3=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'g');sliderline1=line('xdata', [], 'ydata' ,[], 'linewidth',1,'color', 'r');sliderline2=line('xdata', [], 'ydata' ,[], 'linewidth',1,'color', 'r');a1=line('xdata', [], 'ydata', [], 'marker', '+','markersize',10, 'color', 'r');a2=line('xdata', [], 'ydata', [], 'marker', '+','markersize',10, 'color', 'b');a3=line('xdata', [], 'ydata', [], 'marker', '+','markersize',10, 'color', 'g');pole12=line('xdata', [], 'ydata',[], 'marker', '+', 'markersize', 8,'color', 'k');pole13=line('xdata', [], 'ydata',[], 'marker', '+', 'markersize', 8,'color', 'k');pole23=line('xdata', [], 'ydata',[], 'marker', '+', 'markersize', 8,'color', 'k');ipole23=line('xdata', [], 'ydata',[], 'marker', '+', 'markersize', 8,'color', 'r');		scircle=line('xdata', [], 'ydata',[], 'linewidth',1,'color', 'k');coupler1=line('xdata', [], 'ydata', [],'linewidth',2,'color', 'k');coupler2=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'k');coupler3=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'b');block1=line('xdata', [], 'ydata',[],'linewidth' ,1, 'color', 'k');block2=line('xdata', [], 'ydata',[],'linewidth' ,1, 'color', 'k');joint1=line('xdata', [], 'ydata',[], 'marker', 'o', 'markersize', 7,'color', 'k');joint2=line('xdata', [], 'ydata',[], 'marker', 'o', 'markersize', 7,'color', 'k');     hdls=[ position1 position2 position3 a1 a2 a3 ...    pole12 pole13 pole23 ipole23 scircle ...    joint1 joint2 sliderline1 sliderline2 ...    coupler1 coupler2 coupler3 block1 block2 ];a = findobj('Tag','rbg_el_trammel_axes');set(a,'userdata',hdls );	function val=check_val(oldval,newval)% Check if the user input is number input% if not, retrieve the previous value in userdataval=zeros(1);if ~isequal(length(oldval),length(str2num(newval))),  	val=oldval;%	set(findobj(gcf,'Tag','status_txt'),'String', ...%   ['Warning: An invalid property value has been entered.']);else  	val=str2num(newval);end
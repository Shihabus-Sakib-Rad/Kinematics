function pij = pole(a1,a2,b1,b2)% This function computes the coordinates of the pole given two positions % of two points on the moving rigid body.% a1 is a two component vector giving the x,y coordinates of the %    first position of point a.% a2 is a two component vector giving the x,y coordinates of the %    second position of point a.% b1 is a two component vector giving the x,y coordinates of the %    first position of point b.% b2 is a two component vector giving the x,y coordinates of the %    second position of point b.% pij is a three component vector giving the x,y coordinates of the pole and%    a flag indicating if the pole is at infinity.  If %    pij(3) = 0, the pole is not at infinity.  If pij(3) = 1, the pole %    is at infinity.d1=2*(a1-a2);d2=2*(b1-b2);mag1=sqrt(d1(1)^2+d1(2)^2);mag2=sqrt(d2(1)^2+d2(2)^2);e1=a1-b1;e2=a2-b2;c(1)=(a1(1)^2+a1(2)^2)-(a2(1)^2+a2(2)^2);c(2)=(b1(1)^2+b1(2)^2)-(b2(1)^2+b2(2)^2);A=[d1(1) d1(2); d2(1) d2(2)];pij(3)=0;flag=0;% Determine if A is singulardeterminant=abs(det(A));if determinant > 10^(-10)% Locate the pole.	B=[c(1); c(2)];	s=A\B;% Find the coordinates of the pole when d1 and d2 are not parallel.	pij(1)=s(1);	pij(2)=s(2);	pij(3)=0;	flag=1;end% Locate the pole when the matrix is singularif flag==0% Special case when positions are parallel (pole at infinity)	angle1=atan2(e1(2),e1(1));	if angle1<0; angle1=angle1+2*pi; end	angle2=atan2(e2(2),e2(1));	if angle1<0; angle1=angle1+2*pi; end	angle=abs(angle1-angle2);	if angle < 10^(-10) || abs(angle-2*pi)< 10^(-10)		pij(1)=10^10;		theta=atan2(e1(2), e1(1));		pij(2)=pij(1)*tan(theta+pi/2);		pij(3)=1;		flag=1;	endend% Check for parallel lines connecting a1-a2 and b1-b2if flag==0	angle1=atan2(d1(2),d1(1));	if angle1<0; angle1=angle1+2*pi; end	angle2=atan2(d2(2),d2(1));	if angle1<0; angle1=angle1+2*pi; end	angle=abs(angle1-angle2);	dangle = angle-2*pi;	if angle < 10^(-10) || abs(dangle)< 10^(-10)		A=[(b1(2)-a1(2)) -(b1(1)-a1(1)); (b2(2)-a2(2)) -(b2(1)-a2(1))];		B=[(b1(2)-a1(2))*a1(1)-(b1(1)-a1(1))*a1(2);...		    (b2(2)-a2(2))*a2(1)-(b2(1)-a2(1))*a2(2)];		s=A\B;		pij(1)=s(1);		pij(2)=s(2);		pij(3)=0;		flag=1;	endend% Check for points at a1 and a2 coincidentif flag ==0	if mag1 < 10^(-10)		pij(1)=a1(1);		pij(2)=a2(2);		pij(3)=0;		flag=1;	endend	% Check for points at b1 and b2 coincident	if flag ==0			if mag2 < 10^(-10)		pij(1)=b1(1);		pij(2)=b2(2);		pij(3)=0;		flag=1;	endend
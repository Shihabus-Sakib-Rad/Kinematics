function [values] = prrpc(r3,theta2,theta3,td3,tdd3,beta,flag)% This function analyzes an prrp mechanism when the coupler% is the driving link.  The input values are:%r3      = length of coupler%theta3  = angle from frame x axis to vector r3 (degrees)%td3     = angular velocity of coupler (rad/sec)%tdd3    = angular acceleration of coupler (rad/sec^2)%theta2  = angle from frame x axis to vector r2 (degrees).%beta	   = angle from slider line 2 to slider line 1 (degrees) %flag    = analysis flag.  If flag = 1, only a position analysis is conducted. %          If flag = 2, both a position and velocity analysis are conducted. %		     If flag = 3, position, velocity, and acceleration analyses%		             are conducted.% The results are returned in the vector "values".  The answers are % stored in values according to the following:%values (1:4)   = vector lengths%values (5:8)   = vector angles (degrees)%values (9:12)  = derivatives of vector lengths%values (13:16) = derivatives of vector angles (rad/sec)%values (17:20) = second derivatives of vector lengths%values (21:24) = second derivatives of vector angles (rad/sec^2)%values (25:26) = x,y components of position of slider pin (point P)%values (27:28) = x,y components of position of slider offset point (point Q)%values (29:30) = x,y components of velocity of slider pin (point P)%values (31:32) = x,y components of velocity of slider offset point (point Q)%values (33:34) = x,y components of acceleration of slider pin (point P)%values (35:36) = x,y components of acceleration of slider offset point (point Q)%values (37)    = assembly flag.  If values(37) = 0, mechanism cannot %                 assembled.%convert input datavalues=zeros(37,1);r(3)=r3;theta1=theta2+beta;theta(1)=theta1;theta(2)=theta2;theta(3)=theta3;fact=pi/180;t1=theta(1)*fact;t2=theta(2)*fact;t3=theta(3)*fact;td=zeros(4,1);tdd=zeros(4,1);rd=zeros(4,1);rdd=zeros(4,1);td(3)=td3;tdd(3)=tdd3;s1=sin(t1);c1=cos(t1);s2=sin(t2);c2=cos(t2);s3=sin(t3);c3=cos(t3);% position calculationsAM=[c1 -c2; s1 -s2];BM=[r(3)*c3; r(3)*s3];CM=AM\BM;r(1)=CM(1);r(2)=CM(2);% coordinates of P and Q	values(25)=r(2)*c2;values(26)=r(2)*s2;values(27)=r(1)*c1;values(28)=r(1)*s1;%velocity calculation	if flag>1	BM=[-r(3)*td(3)*s3; r(3)*td(3)*c3];	CM=AM\BM;	rd(1)=CM(1);	rd(2)=CM(2);		% velocities of P and Q		values(29)=rd(2)*c2;	values(30)=rd(2)*s2;	values(31)=rd(1)*c1;	values(32)=rd(1)*s1;end	%acceleration calculation	if flag>2	BM=[-r(3)*tdd(3)*s3-r(3)*td(3)^2*c3; r(3)*tdd(3)*c3-r(3)*td(3)^2*s3];	CM=AM\BM;	rdd(1)=CM(1);	rdd(2)=CM(2);			% accelerations of P and Q		values(33)=rdd(2)*c2;	values(34)=rdd(2)*s2;	values(35)=rdd(1)*c1;	values(36)=rdd(1)*s1;end%store results in array valuesfor i = 1:3	values(i)=r(i);	values(i+4)=theta(i);	values(i+8)=rd(i);	values(i+12)=td(i);	values(i+16)=rdd(i);	values(i+20)=tdd(i);end
function []=FourbarAnalysis(Action, Argument2)% MATLAB program for analyzing four-bar mechanisms%Variables%   r1=frame length%   r2=crank length%   r3=coupler length%   r4=rocker length%   cr1=coupler radius (to point D1 from the crank pin)%   beta1=coupler angle (deg) (to point D2 from the rocker pin)%   cpad=coupler angle (rad) (to point D2 from the rocker pin)%	fourbario = data file with input data in it.%	readmode = io flag.  readmode = 1 for file input and 2 for interactive input.%   Q1=frame angle (deg)%   Q11=frame angle (rad)%   Q2=crank angle (rad)%   Q21=crank angle (deg)%   Q22=crank angle (deg) (vector)%   Q3,Q33=coupler angle (deg)%   Q4,Q44=rocker angle (deg)%   wdr=angular velocity of the driver link (crank or coupler) (rad/sec)%   w22=w2 (vector)%   w33=angular velocity of the coupler (rad/sec)%   w44=angular velocity of the rocker (rad/sec)%   cang1=angle from the line connecting the coupler point one and the crank pin (rad)%   cang2=angle from the line connecting the coupler point two and the rocker pin (rad)%   mode,assem=assembly mode%   tt=number of cycles to animate%   dt=number of animation positions per revolution%   itotal=number of animation positions%   bush1,bush2=x,y coordinates of the bushings%   cir1,cir2=x,y coordinates of the circles inside the bushings%   Bx,By=x,y coordinates of the crank pin%   Cx,Cy=x,y coordinates of the rocker pin%   Bx2,By2=x,y coordinates of the crank pointer%   Cx2,Cy2=x,y coordinates of the rocker pointer%   d2r,r2d=conversion factors between radians and degrees%   i=counting variable%   ans=repitition variable%Graphics variables%   xmin,xmax,ymin,ymax=axes limits%   h1=handle on the first axes in the window (crank angle vs. rocker angle)%   h2=handle on the second axes in the window (crank angle vs. rocker velocity)%   h3=handle on the third axes in the window (crank angle vs. input torque)%   h4=handle on the fourth axes in the window (linkage animation)%   displ4=line representing the crank angle vs. rocker angle%   vel=line representing the crank angle vs. rocker velocity%   displ3=line representing the crank angle vs. coupler angle%   d4bead=bead which follows the crank angle/rocker angle throughout animation%   vbead=bead which follows the crank angle/rocker velocity throughout animation%   d3bead=bead which follows the crank angle/coupler angle throughout animation%   bushy1=line representing the bushing at the crank hinge%   bushy2=line representing the bushing at the rocker hinge%   circ1=line representing the circle inside the bushing at the crank hinge %   circ2=line representing the circle inside the bushing at the rocker hinge%   joint1=line representing the joint at the crank pin %   joint2=line representing the joint at the rocker pin%   crank=line representing the crank %   coupler=line representing the coupler%   rocker=line representing the rocker%   couplerptr1=from crank circle point to coupler point%   couplerptr2=from rocker circle point to coupler point%   couplerpoint=line representing the coupler curve%	 cpflag = 1 if both couplerptr1 and couplerptr2 lines are to be %            drawn.  cpflag = 2 if only couplerpt1 line is to be %            drawn.%Program  global d2rglobal r2dglobal nBetaflagglobal nCradiusflagglobal nCheckLengthglobal g_AnaResd2r=pi/180;r2d=180/pi;if nargin == 0 && isempty(findobj('Tag','fourbar_dsgn'))% FourbarAnalysis is being initialized	Action = 'initialize';   elseif nargin == 0 && ~isempty(findobj('Tag','fourbar_dsgn'))	  % FourbarAnalysis is already open   Action = 'None';endif ~strcmp(Action,'initialize') && ~strcmp(Action,'Help')% retrieve the previous variable values from userdata of objects   a = findobj('Tag','fourbar_dsgn');   UD=a.UserData;   handles = UD.hand;   h_beta = handles(1);   beta1 = get(h_beta,'userdata');   h_Q = handles(2);   Q1 = get(h_Q,'userdata');      h_R = handles(3:7);   if nCheckLength == 0	   for i = 1:4		   r(i) = get(h_R(i),'userdata');       end   else      for i = 1:4         r(i) = str2num(get(h_R(i),'string'));      end   end   r1 = r(1);   r2 = r(2);   r3 = r(3);   r4 = r(4);      r(5) = get(h_R(5),'userdata');   cr1 = r(5);      h_vel = handles(8);   wdr = get(h_vel,'userdata');      h_Sradio = handles(9:10);   if get(h_Sradio(1),'value') == 1      cpflag = 1;   else      cpflag = 2;	end               h_Dradio = handles(11:12);   if get(h_Dradio(1),'value') == 1      driver = 1;   else      driver = 2;	end            h_Mradio = handles(13:14);   if get(h_Mradio(1),'value') == 1      times = 1;   else      times = 2;	end         h_ASradio = handles(15:16);   if get(h_ASradio(1),'value') == 1      mode = 1;   else      mode = -1;	end         h_status = handles(17);      b = findobj('Tag','fourbar_axe');   UD=b.UserData;   handles = UD.hand;   joint1 = handles(1);   joint2 = handles(2);   crank = handles(3);   coupler = handles(4);   rocker = handles(5);   couplerptr1 = handles(6);   couplerptr2 = handles(7);   couplerpoint1 = handles(8);   couplerpoint2 = handles(9);   gridpt = handles(10);   bushy1 = handles(11);   bushy2 = handles(12);   circ1 = handles(13);   circ2 = handles(14);end  switch Action   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	Initialize the User Interface%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case  'initialize'   nBetaflag = 1;   nCradiusflag = 1;   nCheckLength = 0;   if nargin >= 2 || ~isempty(findobj('tag','menu_page'))	   LocalOpenFig;       FourbarAnalysis('Draw Axes');   else        show_me_logo('initialize','FourbarAnalysis');   end   case 'Draw Axes'     % Define constants   i=0;   Q11=Q1*pi/180;% Determine the angle limits   qstart=0;   qstop=360;   if driver==1; [qstart,qstop]=fb_angle_limits_cr(r1, r2, r3,r4,Q1); end   if driver==2; [qstart,qstop]=fb_angle_limits_co(r1, r2, r3,r4,Q1); end   temp=qstart;   if qstop<qstart;      qstart=qstop;   	qstop=temp;   end   npos=73;   dq = ((qstop-qstart)/(npos-1))-0.000000001;   QM1=qstart+0.000000001;   i2=0;   for mmm=1:1:times% Analyze for two cycles in different modes if times=2.   	if mmm ~=1   		mode = -mode;   		dq=-dq;   	end	% Loop to analyze the linkage for a full cycle   	for motion=1:1:npos   		if motion>1; QM1=QM1+dq; end% Call function to compute the position.  If driver=1, call fourbar with % crank as driver.  If driver=2, call fourbar with coupler as driver.   		if driver==1	     	para = fourbar_cr(r1,r2,r3,r4,QM1,wdr,0,mode,Q1,2);   		end   		if driver==2            para = fourbar_co(r1,r2,r3,r4,cr1,beta1,QM1,wdr,0,mode,Q1,2);   		end	% Store the linkage information in para into named vectors	        	assem=para(29);   		j=0;   		if assem==1   			i=i+1;   			Q22(i)=para(6);   			Q33(i)=para(7);   			Q44(i)=para(8);   			if Q33(i)<0; Q33(i)=Q33(i)+360; end   			if Q44(i)<0; Q44(i)=Q44(i)+360; end   			w22(i)=para(10);    			w33(i)=para(11);   			w44(i)=para(12);   			cang1=(Q33(i)+beta1)*d2r;% Store position information in matrices.   			Bx(i)= para(17);   			By(i)= para(18);   			Cx(i)= para(19);   			Cy(i)= para(20);   			Dx1(i)=Bx(i)+cr1*cos(cang1);   			Dy1(i)=By(i)+cr1*sin(cang1);			% Determine coordinates for coupler curve for first mode			   			if mmm==1   				Dx2(i)=Dx1(i);   				Dy2(i)=Dy1(i);   			end			% Determine coordinates for coupler curve for second mode			   			if mmm==2   				i2=i2+1;   				Dx3(i2)=Dx1(i);   				Dy3(i2)=Dy1(i);   			end								   		end% Prepare the result data and store them in the global variable g_AnaRes% Those result data can be save as output data while menu 'save result data'% is choosen.   		Q222 = Q22';   		Q333 = Q33';   		Q444 = Q44';   		w333 = w33';   		w444 = w44';         g_AnaRes = [Q222 Q333 Q444 w333 w444];      end    end	% Define the axes for the graph showing the linkage   itotal = i;    if nCheckLength == 1        if  itotal == 0            set(h_status,'string','Geometrical error, Please input another valus');            for j = 1:4                r_old = get(h_R(j),'userdata');                set(h_R(j),'string',num2str(r_old));            end            nCheckLength = 0;            return;        else            set(h_status,'string','');            for j = 1:4                r_new = get(h_R(j),'string');                set(h_R(j),'userdata',str2num(r_new));            end            nCheckLength = 0;        end      end    width=0.95;    height=0.95;% Locate the coordinates of the bushing and revolute joints.  First find% the shortest link   rmin=min([r1, r2, r3, r4]);   bush1=bushing(rmin/10,0,0,40,0);   cir1=circle2(rmin/10,0,0,40);   bush2=bushing(rmin/10,(r1*cos(Q11)),(r1*sin(Q11)),40,0);   cir2=circle2(rmin/10,(r1*cos(Q11)),(r1*sin(Q11)),40);% Set the bushing points   set(bushy1,'xdata', bush1(:,1), 'ydata',bush1(:,2));   set(bushy2,'xdata', bush2(:,1), 'ydata',bush2(:,2));   set(circ1,'xdata', cir1(:,1), 'ydata',cir1(:,2));   set(circ2,'xdata', cir2(:,1), 'ydata',cir2(:,2));   refresh;   % Find the limits for the plots   xmina=min([min(Dx1) min(Bx) min(Cx) min(bush1(:,1)) min(Dx2) ...      min(bush2(:,1)) r1*cos(Q11) ]);   xmaxa=max([max(Dx1) max(Bx) max(Cx) max(bush1(:,1)) max(Dx2) ...      max(bush2(:,1)) r1*cos(Q11) ]);   ymina=min([min(Dy1) min(By) min(Cy) min(bush1(:,2)) min(Dy2) ...      min(bush2(:,2)) r1*sin(Q11) ]);   ymaxa=max([max(Dy1) max(By) max(Cy) max(bush1(:,2)) max(Dy2) ...      max(bush2(:,2)) r1*sin(Q11) ]);   rangex=xmaxa-xmina;   rangey=ymaxa-ymina;   xmin=xmina-0.1*rangex;   xmax=xmaxa+0.1*rangex;   ymin=ymina-0.1*rangey;   ymax=ymaxa+0.1*rangey;   values=axisadjust(xmin, xmax, ymin, ymax, width, height);   xmin=values(1)-1;   xmax=values(2);   ymin=values(3);   ymax=values(4);   axis([xmin xmax ymin ymax]);   a = findobj('Tag','fourbar_dsgn');   UD=a.UserData;   hdls = UD.hand;   lim =[xmin xmax ymin ymax];   a.UserData=struct('hand',hdls,'wlim',lim);   % Plot the of the linkage alone   itotal=i;% Draw the coupler curves first.   set(couplerpoint1,'xdata', Dx2, 'ydata' ,Dy2);   set(couplerpoint2,'xdata', [], 'ydata' ,[]);   if times==2   	set(couplerpoint2,'xdata', Dx3, 'ydata' ,Dy3);   end	% Plot linkage in fixed position.   i = floor(itotal/4);   set(joint1,'xdata', Bx(i), 'ydata',By(i));   set(joint2,'xdata', Cx(i), 'ydata',Cy(i));   set(crank,'xdata',[0 Bx(i)],'ydata', [0 By(i)]);   set(coupler,'xdata', [Bx(i) Cx(i)],'ydata', [By(i) Cy(i)]);   set(rocker,'xdata', [(r1*cos(Q11)) Cx(i)],'ydata', ...      [(r1*sin(Q11)) Cy(i)]);   set(gridpt,'xdata',Dx1(i), 'ydata' ,Dy1(i));   set(couplerptr1,'xdata', [Bx(i) Dx1(i)], ...   	'ydata' ,[By(i) Dy1(i)]);   set(couplerptr2,'xdata', [],...   	'ydata' ,[]);   if cpflag ==2   	set(couplerptr2,'xdata', [Cx(i) Dx1(i)],...   		'ydata' ,[Cy(i) Dy1(i)]);   end  %flush the draw buffer   drawnow;    Bx_fix = Bx(i);   By_fix = By(i);   Cx_fix = Cx(i);   Cy_fix = Cy(i);   b = findobj('Tag','fourbar_axe');   UD=b.UserData;   hdls = UD.hand;   lim =[Bx_fix By_fix Cx_fix Cy_fix qstart qstop];   b.UserData=struct('hand',hdls,'wlim',lim);   set([gridpt;couplerptr1;couplerptr2;couplerpoint1;couplerpoint2],...     'buttondownfcn','FourbarAnalysis(''Set Calls'');FourbarAnalysis(''Move'')');case 'Set Calls' % get the handle of the objects used to control% the mouse input    a = findobj('Tag','fourbar_dsgn');   nBetaflag = 0;   nCradiusflag = 0;   set(a,'windowbuttonupfcn', 'a = findobj(''Tag'',''fourbar_dsgn'');set(a,''windowbuttonmotion'','''');refresh ');   set(a,'windowbuttonmotionfcn','FourbarAnalysis(''Move'')');   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The Callbacks When The User Moves the Mouse Button.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%case 'Move'% Find out where the mouse pointer is located.   set(h_status,'string','');   b = findobj('Tag','fourbar_axe');   UD=b.UserData;   hdls = UD.wlim;   Bx = hdls(1);   By = hdls(2);    Cx = hdls(3);    Cy = hdls(4);    qstart = hdls(5);    qstop = hdls(6);   if nBetaflag == 1 || nCradiusflag == 1      a = get(h_beta,'userdata');      b = get(h_beta,'string');      beta1 = check_val(a,b);      a = get(h_R(5),'userdata');      b = get(h_R(5),'string');      cr1 = check_val(a,b);   else       	pt = get(b,'currentpoint');      pt = pt(1,1:2);      % Determine the angle that the pointer is with% respect to the arrrow hinge.      beta1 = atan2(pt(2)-By,pt(1)-Bx)*180/pi-atan2(Cy-By,Cx-Bx)*180/pi;      cr1 = sqrt((pt(2) -By)^2 + (pt(1) -Bx)^2);   end   if beta1 > 180      beta1 = beta1 - 360;   elseif beta1 < -180      beta1 = beta1+360;        end      	% Store the value in the current axes UserData% where it can be retrieved by an application.   set(h_beta,'userdata',beta1);   set(h_beta,'string',num2str(beta1));   set(h_R(5),'userdata',cr1);   set(h_R(5),'string',num2str(cr1));% Loop to analyze the linkage for a full cycle     i=0;   Q11=Q1*pi/180;   npos=73;   dq = ((qstop-qstart)/(npos-1))-0.000000001;   QM1=qstart+0.000000001;   i2=0;   for mmm=1:1:times% Analyze for two cycles in different modes if times=2.   	if mmm ~=1	    	mode = -mode;   		dq=-dq;   	end      for motion=1:1:npos   		if motion>1; QM1=QM1+dq; end% Call function to compute the position.  If driver=1, call fourbar with % crank as driver.  If driver=2, call fourbar with coupler as driver.   		if driver==1   	  		para = fourbar_cr(r1,r2,r3,r4,QM1,wdr,0,mode,Q1,2);   		end   		if driver==2            para = fourbar_co(r1,r2,r3,r4,cr1,beta1,QM1,wdr,0,mode,Q1,2);   		end	% Store the linkage information in para into named vectors	    		assem=para(29);   	  	j=0;   		if assem==1   			i=i+1;   			Q22(i)=para(6);   			Q33(i)=para(7);   			Q44(i)=para(8);   			if Q33(i)<0; Q33(i)=Q33(i)+360; end   			if Q44(i)<0; Q44(i)=Q44(i)+360; end   			w22(i)=para(10);    			w33(i)=para(11);   			w44(i)=para(12);   			cang1=(Q33(i)+beta1)*d2r;% Store position information in matrices.   			Bx(i)= para(17);   			By(i)= para(18);   			Cx(i)= para(19);   			Cy(i)= para(20);   			Dx1(i)=Bx(i)+cr1*cos(cang1);   			Dy1(i)=By(i)+cr1*sin(cang1);			% Determine coordinates for coupler curve for first mode			   			if mmm==1   	  			Dx2(i)=Dx1(i);   				Dy2(i)=Dy1(i);   			end			% Determine coordinates for coupler curve for second mode			   	  		if mmm==2   				i2=i2+1;   				Dx3(i2)=Dx1(i);   				Dy3(i2)=Dy1(i);   			end   		end% Prepare the result data and store them in the global variable g_AnaRes% Those result data can be save as output data while menu 'save result data'% is choosen.   		Q222 = Q22';   		Q333 = Q33';   		Q444 = Q44';   		w333 = w33';   		w444 = w44';         g_AnaRes = [Q222 Q333 Q444 w333 w444];   	end   end	% Plot the of the linkage alone   itotal=i;% Draw the coupler curves first.   set(couplerpoint1,'xdata', Dx2, 'ydata' ,Dy2);   set(couplerpoint2,'xdata', [], 'ydata' ,[]);   if times==2   	set(couplerpoint2,'xdata', Dx3, 'ydata' ,Dy3);   end   	% Plot linkage in fixed position.   i = floor(itotal/4);   set(gridpt,'xdata',Dx1(i), 'ydata' ,Dy1(i));   set(couplerptr1,'xdata', [Bx(i) Dx1(i)], ...   	'ydata' ,[By(i) Dy1(i)]);   set(couplerptr2,'xdata', [],...   	'ydata' ,[]);   if cpflag ==2      set(couplerptr2,'xdata', [Cx(i) Dx1(i)],...   		'ydata' ,[Cy(i) Dy1(i)]);   end  %flush the draw buffer   drawnow; case 'Change Beta'   nBetaflag=1;   FourbarAnalysis('Move');         case 'Change Q'   newval=get(h_Q,'string');   Q1=check_val(Q1,newval);   set(h_Q,'UserData',Q1);   set(h_Q,'string',num2str(Q1));   FourbarAnalysis('Draw Axes'); case 'Change R'   n = Argument2;   newval=get(h_R(n),'string');   r(n)=check_val(r(n),newval);   nCheckLength = 1;   FourbarAnalysis('Draw Axes');    case 'Change Cradius'   nCradiusflag = 1;      FourbarAnalysis('Move');   case 'S_radio'      nBetaflag = 1;   num_buttons = 2;   button = Argument2;      if get(h_Sradio(button),'value') == 0   	set(h_Sradio(button),'value',1);   end   set(h_Sradio([1:(button-1), (button+1):num_buttons]),'value',0);   FourbarAnalysis('Draw Axes');      case 'D_radio'      nBetaflag = 1;   num_buttons = 2;   button = Argument2;   if get(h_Dradio(button),'value') == 0   	set(h_Dradio(button),'value',1);   end   set(h_Dradio([1:(button-1), (button+1):num_buttons]),'value',0);   FourbarAnalysis('Draw Axes');      case 'M_radio'      nBetaflag = 1;   num_buttons = 2;   button = Argument2;   if get(h_Mradio(button),'value') == 0   	set(h_Mradio(button),'value',1);   end   set(h_Mradio([1:(button-1), (button+1):num_buttons]),'value',0);   FourbarAnalysis('Draw Axes');   case 'AS_radio'      nBetaflag = 1;   num_buttons = 2;   button = Argument2;   if get(h_ASradio(button),'value') == 0   	set(h_ASradio(button),'value',1);   end   set(h_ASradio([1:(button-1), (button+1):num_buttons]),'value',0);   FourbarAnalysis('Draw Axes');   case 'Change Velocity'      nBetaflag = 1;   newval=get(h_vel,'string');   wdr=check_val(wdr,newval);   set(h_vel,'UserData',wdr);   set(h_vel,'string',num2str(wdr));   FourbarAnalysis('Draw Axes');  case 'Resize'   n = Argument2;% To retrieve current axis limits      a = findobj('Tag','fourbar_dsgn');   UD=a.UserData;% If 'Zoom out' button is pressed, downsize the figure by increasing x any y axis limits% If 'Zoom In' button is pressed, enlarge the figure by decreasing x any y axis limits   if n ==1      factor = 1.05;   else      factor = 0.95;   end      UD.wlim=factor*UD.wlim;   a.UserData=UD;   axis(UD.wlim);   case 'None'      % the following command will bring the existing figure % to foreground   a = findobj('Tag','fourbar_dsgn');   figure(a);   case 'Close'   % if the target window exist then close it   if ~isempty(findobj('Tag','Fourbar Analysis Window'))      fourbar_ana('Stop');      a = findobj('Tag','Fourbar Analysis Window');        	close(a);   end      a = findobj('Tag','fourbar_dsgn');   close(a);   case 'Analysis'   fourbar_ana('initialize',r,beta1,Q1,wdr,cpflag,driver,times,mode,1);case 'Show Definitions'   Show_definition('initialize','FourbarAnalysis.jpg');   case 'Help'%-------On-line help     HelpStr={'Four Bar Analysis';    '';    '    "FourbarAnalysis" is a program to design a four bar linkage mechanism';    'mechanism and to analyze the result.   The program contains  two windows:';    'a design window and an analysis window.   The  nomenclature  used by  the';    'program is  that given in the textbook,  Kinematics, Dynamics, and Design';    'of Mechanisms by Kenneth Waldron and Gary Kinzel.';    '';    '    In the design window, the variables are the five link  length (frame,';    'crank, coupler, rocker and  coupler  radius) and  two  angles  (beta  and';    'frame angle)  and  the angular velocity of the driver.   More options are';    'given to present the mechanisms in different  modes,  line  or triangular';    'coupler, crank or coupler  driver, half or  whole coupler point path (one';    'or both mode radio button set), and  assembly mode (1 or -1).  One of the';    'program features is that users  can drag the mouse to  change the coupler';    'point in a  continuous fashion.   This changes  both  the beta  angle and';    'coupler radius.   In addition,  five more  link  lengths  of the cognates';    'mechanism are shown and updated dynamically.  Two assembly modes (1 or -1';    'are available in radio buttons.  Because changing  the coupler point  can';    'move the mechanism  plot  out of the  figure window,  "Zoom In" and "Zoom';    'Out" buttons are available to downsize and upsize the mechanism plot.';    '';    '    In the analysis window, users can control the number of plots  (up to';    'four)  and  the  contents  of  each  plot (four  options)  are  provided.';    'Furthermore, the animation  speed can be  easily  adjusted by clicking on';    'the speed buttons.';    '';    '    Two  buttons  connect  the  two windows.   The "Return" button in the';    'analysis  window  closes  the  analysis window and brings back the design';    'window,  while  the "Analysis"  button  in  the  design  window  open the';    'analysis  window  and  start  the  linkage  animation.    Every  time the';    '"Analysis" button is pressed, all of the design parameters are updated to';    'start a new animation. ';    '';    '    There is  a status bar at  the  bottom of the design window.   If the';    'chosen  values  for  the  variables  cannot be used  to create a four bar';    'mechanism, an error message will be shown in the status box.  ';     ' '};   helpwin(HelpStr,'Four Bar Analysis');case 'Get File'% Get the file name using the UIGETFILE   [sFileName sFilePath] = uigetfile('*.dat','Load File');     if sFileName == 0 && sFilePath == 0      return;   end      % Combine the path and file name together   sTemp = strcat( sFilePath, sFileName );% get the size to erase the '.dat' extension      sz  = size(sFileName);% load the data file     load(sTemp);% assign the parameter to a variable   Parameter = eval(sFileName(1:(sz(2)-4)));   a = Parameter;   if length(Parameter) == 12      r(1:5) = Parameter(1:5);      beta1 = Parameter(6);      Q1 = Parameter(7);      cpflag = Parameter(8);      driver = Parameter(9);      times = Parameter(10);      mode = Parameter(11);      wdr = Parameter(12);   	for i=1:5    		set(h_R(i),'UserData',r(i));      end       	set(h_Q,'UserData',Q1);   	set(h_beta,'Userdata',beta1);   	set(h_vel,'Userdata',wdr);      for i=1:5         set(h_R(i),'string',num2str(r(i)));      end          set(h_Q,'string',num2str(Q1));      set(h_beta,'string',num2str(beta1));      set(h_vel,'string',num2str(wdr));      if cpflag == 1      	FourbarAnalysis('S_radio',1);      else       	FourbarAnalysis('S_radio',2);      end      if driver == 1      	FourbarAnalysis('D_radio',1);      else       	FourbarAnalysis('D_radio',2);      end      if times == 1      	FourbarAnalysis('M_radio',1);      else       	FourbarAnalysis('M_radio',2);      end      if mode == 1      	FourbarAnalysis('AS_radio',1);      else       	FourbarAnalysis('AS_radio',2);      end%	FourbarAnalysis('Draw Axes');            refresh;   else      set(h_status,'string','invalid file format');        return;   end             case 'Put File'   [sFileName sFilePath] = uiputfile('*.dat','Save As');   if Argument2 == 1      	ParameterData = [r1; r2; r3; r4; cr1; beta1; Q1; cpflag; driver; times; mode; wdr];   else      ParameterData = g_AnaRes;   end   %sTemp = strcat( sFilePath, sFileName);   [sTemp , errMsg] = sprintf('%s%s', sFilePath, sFileName);   [strCmd, errMsg] = sprintf('%s %s %s', 'save', sTemp, ' -ascii ParameterData');   eval(strCmd);   end   function LocalOpenFig()hdls = zeros(1,20);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Control the color of the UI%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%StdColor = get(0,'DefaultUIcontrolBackgroundColor');%PointsPerPixel = 72/get(0,'ScreenPixelsPerInch');bgframe = StdColor;bgedit = [1 1 1];bgtext = bgframe;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The Main Figure of Crank Rocker Design%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ScreenSize = get(0,'ScreenSize');sx = 480;sy = 400;FigPos = [ 10 ScreenSize(4)-sy-95 sx sy ] ;a = figure('Units','pixels', ...	'Color',[0.8 0.8 0.8], ...	'Name','Fourbar Analysis', ...	'NumberTitle','off', ...	'Position',FigPos, ...  	'Tag','fourbar_dsgn');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Draw Frame First% This will prevent the frames from been drawn on top of% other UICONTROLS. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.0083 0.01 0.9833 0.1025], ...	'Style','frame'	, ...  	'Tag','Frame1');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.6675 0.3896 0.305], ...	'Style','frame', ...	'Tag','Frame_link');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.01 0.1275 0.577 0.0850], ...	'Style','frame', ...	'Tag','Frame_angle');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.1275 0.3896 0.079], ...	'Style','frame', ...	'Tag','Frame_pushbutton');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.595 0.3896 0.065], ...	'Style','frame', ...	'Tag','Frame_R');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.41 0.3896 0.055], ...	'Style','frame', ...  	'Tag','Frame6');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.47 0.3896 0.055], ...	'Style','frame', ...	'Tag','Frame7');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.5325 0.3896 0.055], ...	'Style','frame', ...	'Tag','Frame7');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.31 0.3896 0.0925], ...	'Style','frame', ...	'Tag','Frame_assemode');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgframe, ...	'Position',[0.6 0.217 0.3896 0.0825], ...	'Style','frame', ...	'Tag','Frame_zoombutton');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% menu uicontrols%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uimenu('Parent',a, ...	'Label','Parameter', ...	'Tag','menu_parameter');  c = uimenu('Parent',b, ...	'Callback','FourbarAnalysis(''Get File'')', ...	'Label','Load Parameters', ...	'Tag','submenu_load');   c = uimenu('Parent',b, ...	'Callback','FourbarAnalysis(''Put File'',1)', ...	'Label','Save Parameters', ...	'Tag','submenu_save1');c = uimenu('Parent',b, ...	'Callback','FourbarAnalysis(''Put File'',2)', ...	'Label','Save Result Data', ...	'Tag','submenu_save2');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Create graphics window for design input%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-------Reference axisb = axes('Parent',a, ...  	'Box','on', ...  	'Color',[1 1 1], ...	'Position',[0.0083 0.2275 0.5771 0.7475], ...  	'XColor',[0 0 0], ...  	'XGrid','off', ...  	'XTick',[],...  	'YColor',[0 0 0], ...  	'YGrid','off', ...  	'YTick',[], ...  	'ZColor',[0 0 0], ...  	'ZGrid','off', ...  	'ZTick',[]);  b = axes('Parent',a, ...   'Box','off', ...  	'DataAspectRatio',[1 1 1],...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Position',[0.0083 0.2275 0.5771 0.7475], ...	'Tag','fourbar_axe');axis off;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% edit related uicontrols%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%h_beta = uicontrol('Parent',a, ...  	'Units','normalized', ...  	'BackgroundColor',bgedit, ...	'Callback','FourbarAnalysis(''Change Beta'')', ...	'Position',[0.1625 0.1425 0.1125 0.0525], ...	'String','0', ...  	'Horiz','left', ...	'Style','edit', ...	'Tag','beta_edit', ...  	'UserData',0);  h_Q  = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','FourbarAnalysis(''Change Q'')', ...	'Position',[0.4625 0.1425 0.1125 0.0525], ...	'String','0', ...  	'Horiz','left', ...	'Style','edit', ...	'Tag','Q_edit', ...  	'UserData',0);   h_R(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','FourbarAnalysis(''Change R'',1)', ...	'Position',[0.825 0.91 0.1375 0.05], ...	'String','2', ...	'Style','edit', ...	'Tag','R_edit(1)', ...	'UserData',2);  h_R(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','FourbarAnalysis(''Change R'',2)', ...	'Position',[0.825 0.8525 0.1375 0.05], ...	'String','2.5', ...	'Style','edit', ...	'Tag','R_edit(2)', ...	'UserData',2.5);   h_R(3) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','FourbarAnalysis(''Change R'',3)', ...	'Position',[0.825 0.795 0.1375 0.05], ...	'String','1.0', ...	'Style','edit', ...	'Tag','R_edit(3)', ...	'UserData',1.0);   h_R(4) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','FourbarAnalysis(''Change R'',4)', ...	'Position',[0.825 0.7375 0.1375 0.05], ...	'String','2.5', ...	'Style','edit', ...	'Tag','R_edit(4)', ...	'UserData',2.5);   h_R(5) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','FourbarAnalysis(''Change Cradius'')', ...	'Position',[0.825 0.68 0.1375 0.05], ...	'String','0.5', ...	'Style','edit', ...	'Tag','R_edit(5)', ...	'UserData',0.5);   h_vel = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgedit, ...	'Callback','FourbarAnalysis(''Change Velocity'')', ...	'Position',[0.8292 0.6025 0.13125 0.05], ...	'String','5', ...	'Style','edit', ...	'Tag','vel_edit', ...	'UserData',5);      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% radio button controls%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%h_Sradio(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''S_radio'',1)', ...	'Position',[0.6187 0.54  0.1600 0.0425], ...	'String','line', ...	'Style','radiobutton', ...	'Tag','shape_radio1', ...	'UserData',1, ...	'Value',1);           h_Sradio(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''S_radio'',2)', ...	'Position',[0.795 0.54  0.1600 0.0425], ...	'String','triangle', ...	'Style','radiobutton', ...	'Tag','shape_radio2', ...	'UserData',0, ...	'Value',0);   h_Dradio(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''D_radio'',1)', ...	'Position',[0.6187 0.475  0.1760 0.0425], ...	'String','crank driv.', ...	'Style','radiobutton', ...	'Tag','driver_radio1', ...	'UserData',1, ...	'Value',1);          h_Dradio(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''D_radio'',2)', ...	'Position',[0.795 0.475  0.188 0.0425], ...	'String','coupler driv.', ...	'Style','radiobutton', ...	'Tag','driver_radio2', ...	'UserData',0, ...	'Value',0);   h_Mradio(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''M_radio'',1)', ...	'Position',[0.6187 0.415 0.1750 0.0425], ...	'String','one mode', ...	'Style','radiobutton', ...	'Tag','mode_radio1', ...	'UserData',1, ...	'Value',1);   h_Mradio(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''M_radio'',2)', ...	'Position',[0.795 0.415 0.1750 0.0425], ...	'String','both modes', ...	'Style','radiobutton', ...	'Tag','mode_radio2', ...	'UserData',0, ...	'Value',0);h_ASradio(1) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''AS_radio'',1)', ...	'Position',[0.795 0.3525 0.1600 0.0425], ...	'String',' 1', ...	'Style','radiobutton', ...	'Tag','assmode_radio1', ...	'Value',0);   h_ASradio(2) = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''AS_radio'',2)', ...	'Position',[0.795 0.3125 0.1600 0.041], ...	'String','-1', ...	'Style','radiobutton', ...	'Tag','assmode_radio2', ...	'Value',1);   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% push button controls%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''Analysis'')', ...	'Position',[0.6042 0.136 0.1333 0.06], ...	'String','Analysis');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''Close'')', ...	'Position',[0.8542 0.136 0.1324 0.06], ...	'String','Close');   b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''Help'')', ...	'Position',[0.7367 0.136 0.1166 0.06], ...	'String','Info');   b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''Resize'',1)', ...	'Position',[0.6042 0.2235 0.1333 0.06], ...	'String','Zoom Out');  b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''Resize'',2)', ...	'Position',[0.7367 0.2235 0.1166 0.06], ...   'String','Zoom In');   b = uicontrol('Parent',a, ...  	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Callback','FourbarAnalysis(''Show Definitions'')', ...	'Position',[0.8542 0.2235 0.1324 0.06], ...   'String','Definitions');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% text controls%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%h_status = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'HorizontalAlignment','left', ...	'Position',[0.05625 0.0275 0.9083 0.0475], ...	'String',' ', ...	'Style','text', ...	'Tag','status_txt');    b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.02708 0.145 0.1375 0.0425], ...	'String','beta angle', ...	'Style','text', ...	'Tag','StaticText1');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.2942 0.145 0.1521 0.0425], ...	'String','frame angle', ...	'Style','text', ...	'Tag','StaticText1');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.6208 0.91 0.1729 0.0425], ...	'String','frame length', ...	'Style','text', ...	'Tag','StaticText4');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.6167 0.85 0.1708 0.0425], ...	'String','crank length', ...	'Style','text', ...	'Tag','StaticText2');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.625 0.7925 0.1833 0.0425], ...	'String','coupler length', ...	'Style','text', ...	'Tag','StaticText2');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.61875 0.735 0.18125 0.0425], ...	'String','rocker length', ...	'Style','text', ...	'Tag','StaticText3');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.625 0.6775 0.18125 0.0425], ...	'String','coupler radius', ...	'Style','text', ...	'Tag','StaticText4');   b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...	'Position',[0.6145 0.6075 0.20625 0.0425], ...	'String','angular velocity', ...	'Style','text', ...   	'Tag','StaticText4');b = uicontrol('Parent',a, ...	'Units','normalized', ...	'BackgroundColor',bgtext, ...   'Position',[0.604 0.3525 0.18625 0.0425], ...	'String','assembly mode', ...	'Style','text', ...	'Tag','StaticText4');drawnow;   hdls=[h_beta h_Q h_R h_vel h_Sradio h_Dradio h_Mradio h_ASradio h_status];%hdls(22) = 1;a = findobj('Tag','fourbar_dsgn');set(a,'userdata',struct('hand',hdls));     % Set up the vectors needed to draw the linkagejoint1=line('xdata', [], 'ydata', [], 'marker', 'o','markersize',8, 'color', 'k');joint2=line('xdata', [], 'ydata', [], 'marker', 'o','markersize',8, 'color', 'k');crank=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'k');coupler=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'color', 'k');couplerptr1=line('xdata', [], 'ydata' ,[], 'linewidth' ,1,'color', 'k');	   couplerptr2=line('xdata', [], 'ydata' ,[], 'linewidth' ,1,'color', 'k');	   couplerpoint1=line('xdata', [], 'ydata' ,[], 'linewidth' ,1,'color', 'r', 'linestyle', '-');	couplerpoint2=line('xdata', [], 'ydata' ,[], 'linewidth' ,1,'color', 'r', 'linestyle', '-');	gridpt=line('xdata', [], 'ydata' ,[], 'linewidth' ,2,'markersize',6,'color', 'g', 'marker', 'o');	rocker=line('xdata', [], 'ydata' ,[], 'linewidth',2,'color', 'k');bushy1=line('xdata', [], 'ydata',[], 'linestyle', '-','color', 'r');bushy2=line('xdata', [], 'ydata',[], 'linestyle', '-','color', 'r');circ1=line('xdata', [], 'ydata',[], 'linestyle', '-','color', 'r');circ2=line('xdata', [], 'ydata',[], 'linestyle', '-','color', 'r');hdls=[joint1 joint2 crank coupler rocker couplerptr1 ...       couplerptr2 couplerpoint1 couplerpoint2 gridpt ...		 bushy1 bushy2 circ1 circ2];a = findobj('Tag','fourbar_axe');set(a,'userdata',struct('hand',hdls));function val=check_val(oldval,newval)% Check if the user input is number input% if not, retrieve the previous value in userdataval=zeros(1);if ~isequal(length(oldval),length(str2num(newval))),  	val=oldval;%	set(findobj(gcf,'Tag','status_txt'),'String', ...%   ['Warning: An invalid property value has been entered.']);else  	val=str2num(newval);end
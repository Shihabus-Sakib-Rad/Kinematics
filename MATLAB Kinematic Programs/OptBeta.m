function U = OptBeta(beta)% OptBeta is the program to calculate the U value of choosen% beta angle value.% 1. Retrieve some value (theta,xg,yg and rb) from the CRDesign%    program. If the CRDesign is ont open at that time, return the%    program without doing anything.% Note: the unit of input beta is degreeif ~isempty(findobj('Tag','fig_dsgn'))	a = findobj('Tag','fig_dsgn');						b = findobj('Tag','dsgn_axe');	handles = get(a,'userdata');   h_theta = handles(1);   theta = get(h_theta,'userdata');   handles =get(b,'userdata');   arc1 = handles(2);   handles = get(arc1,'userdata');   xg = handles(1);   yg = handles(2);   rb = handles(5);      fact = pi/180;      beta=beta*fact;% assign two values, W and n      W = 1;   n = 5;   thetar = theta*fact;      xb2=xg+rb*cos(beta);   yb2=yg+rb*sin(beta);   theta22=180+atan2(yb2,xb2)/fact;   phi=atan2(yb2, (xb2-1));   r4=sqrt((xb2-1)^2+yb2^2);   r1=1;   angb1=phi-thetar;   xb1=1+r4*cos(angb1);   yb1=r4*sin(angb1);   theta21=atan2(yb1,xb1)/fact;% Compute r2 and r3.   leng1=sqrt(xb1^2+yb1^2);   leng2=sqrt(xb2^2+yb2^2);   r2=(leng1-leng2)/2;   if (r2==0); r2=0.0000001; end   r3=(leng1+leng2)/2;      % r1,r2,r3 and r4 are required to calculate the maximum and   % the minimum of the transmission angle	tmp = (r4^2 -(r1+r2)^2+r3^2)/(2*r4*r3);   fMaxTMAngle = acos(tmp);   if (fMaxTMAngle < 0)      fMaxTMAngle = pi + fMaxTMAngle;   end      tmp = (r4^2 -(r1-r2)^2+r3^2)/(2*r4*r3);   fMinTMAngle = acos(tmp);   % Formula to calculate the U value     u1 = max(abs(pi/2 - fMinTMAngle), abs(pi/2 - fMaxTMAngle));   F = max([(r1/r2) (r3/r2) (r4/r2)]);   u2 = exp(F-n);   U = u1 + W*u2;else    return;end
function KinDAP(Action,Argument2)% This is a program to construct the menu page of a series of MATLAB programs.% It will open a window with program categories, in which it can open sub-program% list under that category. The prefix,'+' or '-' can indicate if the list has% been open or not.% variables:% topicList: contains the available program names in each category% nOpenFlag: a flag indicating if the category has been open or not% categoryName: available category name in a cell% categoryList: the current whole list, including the categories and opened sublists,% 					 in the category list box.% nlistLength: the total length of the list in the current category list box.% nTopic: the number of programs in an individual categoryglobal nOpenFlag;if nargin == 0 && isempty(findobj('Tag','menu_page'))   % menu page is being initialized    Action = 'initialize';elseif nargin == 0 && ~isempty(findobj('Tag','menu_page'))		% menu page is already open    Action = 'None';endif ~strcmp( Action,'initialize')    a = findobj('tag','menu_page');    param = get(a,'userdata');    topicList = param.topicList;    hdls = param.hdls;    h_close = hdls(1);    h_run = hdls(2);    h_category = hdls(3);    h_about = hdls(4);    h_list = hdls(5);endswitch Action    case 'initialize'        nOpenFlag = [-1 -1 -1 -1];        if nargin < 2           show_me_logo2;        else           LocalOpenFig;        end            case 'Run'        if ~isempty(findobj('tag','menu_page'))           strCmd = get(h_run,'userdata');           eval(strCmd);        end    case 'Show List'            case 'Show Category'        categoryName = {'Linkage' 'Cam' 'Rigid Body Guidance' 'Gear'};        index = get(h_category,'value');        categoryList = get(h_category,'string');    % Check if the selected item is one of the category names,    % if it is, then toggle the nOpenFlag to open or close that category.    % if it is not, then set the "Run" button available and return.        sz = size(categoryList{index});        categoryList_no_sign = categoryList{index}(2:sz(2));        if strcmp(categoryList_no_sign,'Linkage Design')           theCategory = 1;        elseif strcmp(categoryList_no_sign,'Cam Design')           theCategory = 2;        elseif strcmp(categoryList_no_sign,'Rigid Body Guidance Design')           theCategory = 3;        elseif strcmp(categoryList_no_sign,'Gear Design')           theCategory = 4;        else    %      strName = categoryList{index};           strName = categoryList{index}(7:sz(2));           set(h_run,'userdata',strName);           set(h_run,'enable','on');           return        end        nOpenFlag(theCategory) = -(nOpenFlag(theCategory));        nlistLength = length(categoryList);        nTopic = length(topicList{theCategory});        if nOpenFlag(theCategory) == 1           categoryList{index} = categoryList{index}(2:sz(2));    % Change the prefix of the category name           categoryList{index} = ['-' categoryList{index}];    % Inset the selected program sublist to the category list box    % First, move the list, indexed from index+1 to nlistLength, further.    % Then, copy the inserted sublist to the right position.           for i = nlistLength : -1 : index+1              categoryList(i+nTopic) = categoryList(i);           end           j = 1;           for i = index+1 : index+nTopic              categoryList{i} = topicList{theCategory}(j).Name;              j=j+1;           end        else           categoryList{index} = categoryList{index}(2:sz(2));           categoryList{index} = ['+' categoryList{index}];           for i = index+1 : nlistLength-nTopic              categoryList{i} = categoryList{i+nTopic};           end           for i = nlistLength-nTopic+1 : nlistLength               categoryList{i} = '';           end           categoryList = categoryList(1:nlistLength-nTopic,:);        end        set(h_category,'string',categoryList,'userdata',theCategory);        KinDAP('Show Contents',theCategory);        if strcmp(categoryList{4},'+Gear Design')           set(h_run,'enable','off');        end    case 'Show Contents'        aboutMsg = get(h_about,'userdata');        n = Argument2;        set(h_about,'string',aboutMsg{n});    case 'None'        a = findobj('Tag','menu_page');    case 'Close'        a = findobj('Tag','menu_page');        close(a);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Show UI%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function LocalOpenFig()chooseMsg = 'Choose a sub-topic to see a list of programs';clickMsg = 'Click to expand this topic';%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The Main Figure of Crank Rocker Design%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ScreenSize = get(0,'ScreenSize');sx = 560;sy = 420;figureColor = [0.8 0.8 0.8];FigPos = [10 ScreenSize(4)-sy-95 sx sy];h0 = figure('Color',figureColor, ...	'IntegerHandle','off', ...	'Interruptible','off', ...	'NumberTitle','off', ...    'Position',FigPos, ...    'Resize','on', ...	'Tag','menu_page');h_1 = axes('Parent',h0, ...	'Units','normalized', ...	'Box','on', ...	'CameraUpVector',[0 1 0], ...	'CameraUpVectorMode','manual', ...	'Color',[1 1 1], ...	'ColorOrder',gray(16), ...	'Interruptible','off', ...	'Position',[0 0 1 1], ...	'Tag','Image_axe');img = imread('menu.jpg');image(img);% Initialize  buttons and listboxes% build program listbox% Set up category listboxh_List(1) = uicontrol('Parent',h0, ...    'Style', 'list', ...    'HorizontalAlignment','left', ...	'Units','normalized', ...    'BackgroundColor', [1 1 1], ...    'Max', 1, ...    'Value', 1, ...    'Enable', 'on', ...    'Position', [0.0536 0.1548 0.2857 0.6119], ...    'Callback', 'KinDAP(''Show Category'')', ...    'Userdata',1, ...    'Tag', 'CategoryListbox');% create a listbox for displaying the 'about' informationh_List(2) = uicontrol('Parent',h0, ...    'Style', 'list', ...    'HorizontalAlignment','left', ...	'Units','normalized', ...    'BackgroundColor', [0.8 0.8 0.8], ...    'Min', 0, ...    'Max', 2, ...    'Value', [], ...    'Enable', 'on', ...    'Position', [0.375 0.4738 0.5714 0.2929], ...    'String', ' ', ...    'Tag', 'AboutListbox', ...    'UserData', LocalLoadTopics);h_List(3) = uicontrol('Parent',h0, ...    'Style', 'list', ...    'HorizontalAlignment','left', ...	'Units','normalized', ...    'BackgroundColor', [1 1 1], ...    'Max', 2, ...    'Value', [], ...    'Enable', 'inactive', ...    'Position', [0.375 0.1548 0.5714 0.281], ...    'Callback', 'KinDAP(''Show Contents'')', ...    'String', clickMsg, ...    'Tag', 'DemoListbox');% The close buttonh_close = uicontrol('Parent',h0, ...    'Style', 'pushbutton', ...	'Units','normalized', ...    'Position', [0.0679 0.0452 0.3661 0.0714], ...    'String', 'Close', ...    'Callback', 'KinDAP(''Close'')');% The run buttonh_run = uicontrol('Parent',h0, ...    'Style', 'pushbutton', ...	'Units','normalized', ...    'Position', [0.5411 0.0452 0.3661 0.0714], ...    'String', 'Run', ...    'Enable', 'off', ...    'Callback', 'KinDAP(''Run'')');axis off;hdls = [h_close h_run h_List];param.hdls = hdls;categoryName{1} = 'Linkage Design';categoryName{2} = 'Cam Design';categoryName{3} = 'Rigid Body Guidance Design';categoryName{4} = 'Gear Design';topicList{1}(1).Name = 'CRDesign';topicList{1}(2).Name = 'CognateAnalysis';topicList{1}(3).Name = 'DoubleRockerDesign';topicList{1}(4).Name = 'FourbarAnalysis';topicList{1}(5).Name = 'SliderCrankAnalysis';topicList{1}(6).Name = 'SixbarAnalysis';topicList{1}(7).Name = 'HrCrankRockerAnalysis';topicList{1}(8).Name = 'HrSliderCrankAnalysis';topicList{1}(9).Name = 'CentrodeAnalysis';topicList{1}(10).Name = 'ShakeAnalysis';topicList{2}(1).Name = 'cam2'; % New cam design programtopicList{2}(2).Name = 'CamDesign'; % Old cam design programtopicList{3}(1).Name = 'RBG4barDesign';topicList{3}(2).Name = 'RBGCrankSliderDesign';topicList{3}(3).Name = 'RBGSliderCrankDesign';topicList{3}(4).Name = 'RBGElTrammelDesign';topicList{4}(1).Name = 'Arb2thDesign';topicList{4}(2).Name = 'GeardrAnalysis';param.categoryName = categoryName;param.topicList = topicList;nCategory = 4;indent = '      ';    for i = 1:nCategory       nTopic = length(topicList{i});       categoryName{i} = ['+' categoryName{i}];       for j = 1:nTopic          param.topicList{i}(j).Name= ['      ' param.topicList{i}(j).Name];       end    endaboutMsg = LocalLoadTopics;set(h_List(2),'string',aboutMsg{5});set(h_List(1),'string',categoryName);set(h0,'userdata',param);function aboutTopicArray = LocalLoadTopics()about1 ={...    ' The linkage design and analysis category has a total '    ' of ten kinematic routines. It is mainly used for '    ' the synthesis and analysis of linkages.  '    ' A brief description of the routines is     '    ' provided here.                                 '    '                                                '    ' 1. CRDesign is for crank-rocker design.       '    ' 2. CognateAnalysis is for the cognate analysis of a '    '     four-bar linkage.     '    ' 3. DoubleRockerDesign synthesizes double-rocker '    '     mechanisms.'	' 4. FourbarAnalysis analyzes a four-bar linkage'	' 5. SliderCrankAnalysis analyzes a slider-crank mechanism'	' 6. SixbarAnalysis analyzes six-bar linkages designed using'	'     four-bar coupler curves'    ' 7. HrCrankRockerAnalysis is a routine generating an'    '     atlas of coupler curves for a crank-rocker mechanism.'    ' 8. HrSliderCrankAnalysis is a routine generating an'    '     atlas of coupler curves for a slider-crank mechanism.'	' 9. CentrodeAnalysis generates the moving and fixed '    '     centrodes for the coupler of a four-bar linkage'    ' 10. ShakeAnalysis is for calculating the shaking     '    '      force and optimized a counter-balance weight.    '};about2= {...    ' The cam category has two programs.  One (CamDesign)is an '    ' integrated cam-design routine to design four types of '    ' followers: a flat-faced follower, an oscillating flat-    '    ' faced follower, a roller follower, and an oscillating  '    ' cylindrical-faced follower.  The second program (cam2)'    ' is a general cam design program which will design a'    ' cam for various types of followers and motion schedules.' };about3 ={...    ' The rigid body guidance category includes three'    ' routines, one for a four-bar linkage, one for a '    ' slider-crank linkage, and one for a double-'    ' slider linkage.  A flexible user input from either'    ' the keyboard or mouse dragging is provided to  '    ' change the locations of circle points, center  '    ' points, and slider points.                     '};about4= {...    ' The Gear category has two routines. One draws'    ' involute gears and the other generates the gear '    ' tooth form for an arbitrary conjugate gear.  The '    ' conjugate gears are animated.    '};about5={...    ' This menu shows the index for a series of        '    ' kinematic programs. These programs adopt a   '    ' graphical user interface to provide a friendly '    ' environment for users. Through the programs,'    ' users can see the designed mechanism and its   '    ' animation quickly.                         '    '                                                '    ' These menu includes some basic mechanisms in   '    ' four categories: linkages, cams, rigid body  '    ' guidance, and gear design. Sample data are provided'    ' to illustrate how the routines work.		 '};aboutTopicArray = {about1 about2 about3 about4 about5};
function [values] = fourbar_cr(r1,r2,r3,r4,theta2,td2,tdd2,sigma,theta1,flag)% This function analyzes a four-bar linkage when the crank is the % driving link.  The input values are:%r1      = length of vector 1 (frame)%r2      = length of vector 2 (crank)%r3      = length of vector 3 (coupler)%r4      = length of vector 4 (slider offset)%theta2  = crank angle (degrees)%td2     = crank angular velocity (rad/sec)%tdd2    = crank angular acceleration (rad/sec^2)%sigma   = +1 or -1.  Identifies assembly mode%theta1  = angle between line through fixed pivots and frame x axis (degrees)%flag    = analysis flag.  %          If flag = 1, only a position analysis is conducted. %          If flag = 2, both a position and velocity analysis is conducted. %		   If flag = 3, a position, velocity, and acceleration analysis is conducted.% The results are returned in the vector "values".  The answers are % stored in values according to the following:%values (1:4)   = vector lengths%values (5:8)   = vector angles (degrees)%values (9:12)  = derivatives of vector angles (rad/sec)%values (13:16) = second derivatives of vector angles (rad/sec^2)%values (17:18) = x,y components of position of crank pin (point Q)%values (19:20) = x,y components of position of follower pin (point P)%values (21:22) = x,y components of velocity of crank pin (point Q)%values (23:24) = x,y components of velocity of follower pin (point P)%values (25:26) = x,y components of acceleration of crank pin (point Q)%values (27:28) = x,y components of acceleration of follower pin (point P)%values (29)    = assembly flag.  If values(29) = 0, mechanism cannot assembled.%convert input datavalues=zeros(29,1);r(1)=r1;r(2)=r2;r(3)=r3;r(4)=r4;theta=zeros(4,1);td=zeros(4,1);tdd=zeros(4,1);theta(1)=theta1;theta(2)=theta2;fact=pi/180;t1=theta(1)*fact;t2=theta(2)*fact;s1=sin(t1);c1=cos(t1);s2=sin(t2);c2=cos(t2);% position calculationsA=2*r(1)*r(4)*c1-2*r(2)*r(4)*c2;B=2*r(1)*r(4)*s1-2*r(2)*r(4)*s2;C=r(1)*r(1)+r(2)*r(2)+r(4)*r(4)-r(3)*r(3)-2*r(1)*r(2)*(c1*c2+s1*s2);arg=B*B-C*C+A*A;if (arg>=0)	values(29)=1;    % Check for the denominator equal to zero	if abs(C-A)>=(10^(-10)*(abs(C)+abs(A)))		t4=2*atan((-B+sigma*sqrt(arg))/(C-A));		s4=sin(t4);		c4=cos(t4);		t3=atan2((r(1)*s1+r(4)*s4-r(2)*s2),(r(1)*c1+r(4)*c4-r(2)*c2));		s3=sin(t3);		c3=cos(t3);	elseif abs(C-A)<(10^(-10)*(abs(C)+abs(A)))        % If the denominator is zero, compute theta(3) first		A=-2*r(1)*r(3)*c1+2*r(2)*r(3)*c2;		B=-2*r(1)*r(3)*s1+2*r(2)*r(3)*s2;		C=r(1)*r(1)+r(2)*r(2)+r(3)*r(3)-r(4)*r(4)-2*r(1)*r(2)*(c1*c2+s1*s2);		arg=B*B-C*C+A*A;        if arg>=0            t3=2*atan((-B-sigma*sqrt(arg))/(C-A));            s3=sin(t3);            c3=cos(t3);            t4=atan2((-r(1)*s1+r(3)*s3+r(2)*s2),(-r(1)*c1+r(3)*c3+r(2)*c2));            s4=sin(t4);            c4=cos(t4);        end	end	theta(4)=t4/fact;	theta(3)=t3/fact;		% coordinates of P and Q	values(17)=r(2)*c2;	values(18)=r(2)*s2;	values(19)=values(17)+r(3)*c3;	values(20)=values(18)+r(3)*s3;	%velocity calculation    if flag>1		td(2)=td2;		AM=[-r(3)*s3, r(4)*s4; -r(3)*c3, r4*c4];		BM=[r(2)*td(2)*s2;r(2)*td(2)*c2];		CM=AM\BM;		td(3)=CM(1);		td(4)=CM(2);			% velocities of P and Q		values(21)=-r(2)*td(2)*s2;		values(22)=r(2)*td(2)*c2;		values(23)=values(21)-r(3)*td(3)*s3;		values(24)=values(22)+r(3)*td(3)*c3;    end		%acceleration calculation	if flag >2		tdd(2)=tdd2;		BM=[r(2)*tdd(2)*s2+r(2)*td(2)*td(2)*c2+r(3)*td(3)*td(3)*c3-r(4)*td(4)*td(4)*c4;...   		r(2)*tdd(2)*c2-r(2)*td(2)*td(2)*s2-r(3)*td(3)*td(3)*s3+r(4)*td(4)*td(4)*s4];		CM=AM\BM;		tdd(3)=CM(1);		tdd(4)=CM(2);		% accelerations of P and Q		values(25)=-r(2)*tdd(2)*s2-r(2)*td(2)*td(2)*c2;		values(26)=r(2)*tdd(2)*c2-r(2)*td(2)*td(2)*s2;		values(27)=-r(4)*tdd(4)*s4-r(4)*td(4)*td(4)*c4;		values(28)=r(4)*tdd(4)*c4-r(4)*td(4)*td(4)*s4;	endend%store results in array valuesfor i = 1:4	values(i)=r(i);	values(i+4)=theta(i);	values(i+8)=td(i);	values(i+12)=tdd(i);end